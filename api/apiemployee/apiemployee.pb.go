// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: apiemployee.proto

package apiemployee

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	base "myserver/api/base"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryEmployInfoByUserReq struct {
	Head *base.Head `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// 街道编码
	StreetId int64 `protobuf:"varint,2,opt,name=street_id,json=streetId,proto3" json:"street_id,omitempty"`
	// 社区编码 比如 柳城街道社区
	CommunityId  int64 `protobuf:"varint,3,opt,name=community_id,json=communityId,proto3" json:"community_id,omitempty"`
	UserType     int32 `protobuf:"varint,4,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`
	LastRecordId int64 `protobuf:"varint,5,opt,name=last_record_id,json=lastRecordId,proto3" json:"last_record_id,omitempty"`
	Page         int32 `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
	Limit        int32 `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	// 查询字段
	Query string `protobuf:"bytes,8,opt,name=query,proto3" json:"query,omitempty"`
	// 区域编码 比如温江区
	Adcode      int64 `protobuf:"varint,9,opt,name=adcode,proto3" json:"adcode,omitempty"`
	CreatedTime int64 `protobuf:"varint,10,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
}

func (m *QueryEmployInfoByUserReq) Reset()         { *m = QueryEmployInfoByUserReq{} }
func (m *QueryEmployInfoByUserReq) String() string { return proto.CompactTextString(m) }
func (*QueryEmployInfoByUserReq) ProtoMessage()    {}
func (*QueryEmployInfoByUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{0}
}
func (m *QueryEmployInfoByUserReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEmployInfoByUserReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEmployInfoByUserReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEmployInfoByUserReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEmployInfoByUserReq.Merge(m, src)
}
func (m *QueryEmployInfoByUserReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryEmployInfoByUserReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEmployInfoByUserReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEmployInfoByUserReq proto.InternalMessageInfo

func (m *QueryEmployInfoByUserReq) GetHead() *base.Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *QueryEmployInfoByUserReq) GetStreetId() int64 {
	if m != nil {
		return m.StreetId
	}
	return 0
}

func (m *QueryEmployInfoByUserReq) GetCommunityId() int64 {
	if m != nil {
		return m.CommunityId
	}
	return 0
}

func (m *QueryEmployInfoByUserReq) GetUserType() int32 {
	if m != nil {
		return m.UserType
	}
	return 0
}

func (m *QueryEmployInfoByUserReq) GetLastRecordId() int64 {
	if m != nil {
		return m.LastRecordId
	}
	return 0
}

func (m *QueryEmployInfoByUserReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *QueryEmployInfoByUserReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryEmployInfoByUserReq) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *QueryEmployInfoByUserReq) GetAdcode() int64 {
	if m != nil {
		return m.Adcode
	}
	return 0
}

func (m *QueryEmployInfoByUserReq) GetCreatedTime() int64 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

type DeleteEmployInfoReq struct {
	Head   *base.Head `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	EmpIds string     `protobuf:"bytes,2,opt,name=emp_ids,json=empIds,proto3" json:"emp_ids,omitempty"`
}

func (m *DeleteEmployInfoReq) Reset()         { *m = DeleteEmployInfoReq{} }
func (m *DeleteEmployInfoReq) String() string { return proto.CompactTextString(m) }
func (*DeleteEmployInfoReq) ProtoMessage()    {}
func (*DeleteEmployInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{1}
}
func (m *DeleteEmployInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteEmployInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteEmployInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteEmployInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteEmployInfoReq.Merge(m, src)
}
func (m *DeleteEmployInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteEmployInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteEmployInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteEmployInfoReq proto.InternalMessageInfo

func (m *DeleteEmployInfoReq) GetHead() *base.Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *DeleteEmployInfoReq) GetEmpIds() string {
	if m != nil {
		return m.EmpIds
	}
	return ""
}

type DeleteEmployInfoRes struct {
	Base *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (m *DeleteEmployInfoRes) Reset()         { *m = DeleteEmployInfoRes{} }
func (m *DeleteEmployInfoRes) String() string { return proto.CompactTextString(m) }
func (*DeleteEmployInfoRes) ProtoMessage()    {}
func (*DeleteEmployInfoRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{2}
}
func (m *DeleteEmployInfoRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteEmployInfoRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteEmployInfoRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteEmployInfoRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteEmployInfoRes.Merge(m, src)
}
func (m *DeleteEmployInfoRes) XXX_Size() int {
	return m.Size()
}
func (m *DeleteEmployInfoRes) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteEmployInfoRes.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteEmployInfoRes proto.InternalMessageInfo

func (m *DeleteEmployInfoRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

type QueryEmployInfoByUserMode struct {
	Name                     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Phone                    string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Gender                   int32  `protobuf:"varint,3,opt,name=gender,proto3" json:"gender,omitempty"`
	CompanyName              string `protobuf:"bytes,4,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	CompanyId                int64  `protobuf:"varint,5,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	IdCardNumber             string `protobuf:"bytes,6,opt,name=id_card_number,json=idCardNumber,proto3" json:"id_card_number,omitempty"`
	CompanyCommunity         string `protobuf:"bytes,7,opt,name=company_community,json=companyCommunity,proto3" json:"company_community,omitempty"`
	CompanyCommunityId       int64  `protobuf:"varint,8,opt,name=company_community_id,json=companyCommunityId,proto3" json:"company_community_id,omitempty"`
	ResidenceDetailedAddress string `protobuf:"bytes,9,opt,name=residence_detailed_address,json=residenceDetailedAddress,proto3" json:"residence_detailed_address,omitempty"`
	ResidenceCommunity       string `protobuf:"bytes,10,opt,name=residence_community,json=residenceCommunity,proto3" json:"residence_community,omitempty"`
	ResidenceCommunityId     int64  `protobuf:"varint,11,opt,name=residence_community_id,json=residenceCommunityId,proto3" json:"residence_community_id,omitempty"`
	CreatedTime              int64  `protobuf:"varint,12,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	UpdateTime               int64  `protobuf:"varint,13,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// 所在部门
	Department string `protobuf:"bytes,14,opt,name=department,proto3" json:"department,omitempty"`
	// 今日体温（摄氏度）
	Temperature float32 `protobuf:"fixed32,15,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// 是否出现发热、干咳、乏力、呼吸困难等症状 1:是，2否
	EpidemicSymptom int32 `protobuf:"varint,16,opt,name=epidemic_symptom,json=epidemicSymptom,proto3" json:"epidemic_symptom,omitempty"`
	// 检测结果
	DetectionResult string `protobuf:"bytes,17,opt,name=detection_result,json=detectionResult,proto3" json:"detection_result,omitempty"`
	// 检测人
	DetectionOperator   string `protobuf:"bytes,18,opt,name=detection_operator,json=detectionOperator,proto3" json:"detection_operator,omitempty"`
	SymptomWithin14Days string `protobuf:"bytes,19,opt,name=symptom_within14_days,json=symptomWithin14Days,proto3" json:"symptom_within14_days,omitempty"`
	// 是否湖北返蓉人员
	FormHuBei int32 `protobuf:"varint,20,opt,name=form_hu_bei,json=formHuBei,proto3" json:"form_hu_bei,omitempty"`
	// 过去14天内是否有接触过新型冠状病毒的肺炎病例？
	Touch_NCP int32 `protobuf:"varint,21,opt,name=touch_NCP,json=touchNCP,proto3" json:"touch_NCP,omitempty"`
	// 过去14天内是否有过湖北或其他有本地病例持续传播地区的旅居史？
	BeenToHuBei int32 `protobuf:"varint,22,opt,name=been_to_hu_bei,json=beenToHuBei,proto3" json:"been_to_hu_bei,omitempty"`
	// 返蓉时间
	ReturnChengDuTime int64 `protobuf:"varint,23,opt,name=return_cheng_du_time,json=returnChengDuTime,proto3" json:"return_cheng_du_time,omitempty"`
	// 返蓉详细地址
	ReturnChengDuDetailedAddress string `protobuf:"bytes,24,opt,name=return_cheng_du_detailed_address,json=returnChengDuDetailedAddress,proto3" json:"return_cheng_du_detailed_address,omitempty"`
	// 返蓉交通工具，","分割
	ReturnChengDuTransport string `protobuf:"bytes,25,opt,name=return_cheng_du_transport,json=returnChengDuTransport,proto3" json:"return_cheng_du_transport,omitempty"`
	// 交通工具详细信息（例如班次、航班号、车牌号）
	TransportDetailInfo string `protobuf:"bytes,26,opt,name=transport_detail_info,json=transportDetailInfo,proto3" json:"transport_detail_info,omitempty"`
	// 过去14天内是否与湖北等地区人员有接触史？
	TouchHuBeiPeopleWithin14Days int32 `protobuf:"varint,27,opt,name=touch_hu_bei_people_within14_days,json=touchHuBeiPeopleWithin14Days,proto3" json:"touch_hu_bei_people_within14_days,omitempty"`
	// 最后接触时间
	LastTouchTime int64 `protobuf:"varint,28,opt,name=last_touch_time,json=lastTouchTime,proto3" json:"last_touch_time,omitempty"`
	// 是否是2020年2月3日0:00时后从成都市以外区域来温江？
	FromChengDuOutside int32 `protobuf:"varint,29,opt,name=from_cheng_du_outside,json=fromChengDuOutside,proto3" json:"from_cheng_du_outside,omitempty"`
	// 您何时来温江
	ThisPlaceTime            int64  `protobuf:"varint,30,opt,name=this_place_time,json=thisPlaceTime,proto3" json:"this_place_time,omitempty"`
	ReturnThisPlaceTransport string `protobuf:"bytes,31,opt,name=return_this_place_transport,json=returnThisPlaceTransport,proto3" json:"return_this_place_transport,omitempty"`
	// 您的职业是
	Profession string `protobuf:"bytes,32,opt,name=profession,proto3" json:"profession,omitempty"`
	// 来温江前14天主要活动轨迹，","分割
	LifeTrace string `protobuf:"bytes,33,opt,name=life_trace,json=lifeTrace,proto3" json:"life_trace,omitempty"`
	// 签名图片地址
	SignImage  string `protobuf:"bytes,34,opt,name=sign_image,json=signImage,proto3" json:"sign_image,omitempty"`
	EmployeeId int64  `protobuf:"varint,35,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	// 公司详细地址
	DetailedAddress string `protobuf:"bytes,36,opt,name=detailed_address,json=detailedAddress,proto3" json:"detailed_address,omitempty"`
	// 从何处来温江 市内还是室外
	ComeFromWenjiang string `protobuf:"bytes,37,opt,name=come_from_wenjiang,json=comeFromWenjiang,proto3" json:"come_from_wenjiang,omitempty"`
	// 从何处来 省/市/区
	ComeFromAddress string `protobuf:"bytes,38,opt,name=come_from_address,json=comeFromAddress,proto3" json:"come_from_address,omitempty"`
	// 从何处来详细地址
	ComeFromDetailedAddress string `protobuf:"bytes,39,opt,name=come_from_detailed_address,json=comeFromDetailedAddress,proto3" json:"come_from_detailed_address,omitempty"`
	Age                     int32  `protobuf:"varint,40,opt,name=age,proto3" json:"age,omitempty"`
	// 公司归属省
	CompanyProvince string `protobuf:"bytes,41,opt,name=company_province,json=companyProvince,proto3" json:"company_province,omitempty"`
	// 公司归属省id
	CompanyProvinceId int64 `protobuf:"varint,42,opt,name=company_province_id,json=companyProvinceId,proto3" json:"company_province_id,omitempty"`
	// 公司归属市
	CompanyCity string `protobuf:"bytes,43,opt,name=company_city,json=companyCity,proto3" json:"company_city,omitempty"`
	// 公司归属市id
	CompanyCityId int64 `protobuf:"varint,44,opt,name=company_city_id,json=companyCityId,proto3" json:"company_city_id,omitempty"`
	// 公司归属县/区
	CompanyDistrict string `protobuf:"bytes,45,opt,name=company_district,json=companyDistrict,proto3" json:"company_district,omitempty"`
	// 公司归属县/区
	CompanyDistrictId int64 `protobuf:"varint,46,opt,name=company_district_id,json=companyDistrictId,proto3" json:"company_district_id,omitempty"`
}

func (m *QueryEmployInfoByUserMode) Reset()         { *m = QueryEmployInfoByUserMode{} }
func (m *QueryEmployInfoByUserMode) String() string { return proto.CompactTextString(m) }
func (*QueryEmployInfoByUserMode) ProtoMessage()    {}
func (*QueryEmployInfoByUserMode) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{3}
}
func (m *QueryEmployInfoByUserMode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEmployInfoByUserMode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEmployInfoByUserMode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEmployInfoByUserMode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEmployInfoByUserMode.Merge(m, src)
}
func (m *QueryEmployInfoByUserMode) XXX_Size() int {
	return m.Size()
}
func (m *QueryEmployInfoByUserMode) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEmployInfoByUserMode.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEmployInfoByUserMode proto.InternalMessageInfo

func (m *QueryEmployInfoByUserMode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *QueryEmployInfoByUserMode) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetCompanyId() int64 {
	if m != nil {
		return m.CompanyId
	}
	return 0
}

func (m *QueryEmployInfoByUserMode) GetIdCardNumber() string {
	if m != nil {
		return m.IdCardNumber
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetCompanyCommunity() string {
	if m != nil {
		return m.CompanyCommunity
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetCompanyCommunityId() int64 {
	if m != nil {
		return m.CompanyCommunityId
	}
	return 0
}

func (m *QueryEmployInfoByUserMode) GetResidenceDetailedAddress() string {
	if m != nil {
		return m.ResidenceDetailedAddress
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetResidenceCommunity() string {
	if m != nil {
		return m.ResidenceCommunity
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetResidenceCommunityId() int64 {
	if m != nil {
		return m.ResidenceCommunityId
	}
	return 0
}

func (m *QueryEmployInfoByUserMode) GetCreatedTime() int64 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *QueryEmployInfoByUserMode) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *QueryEmployInfoByUserMode) GetDepartment() string {
	if m != nil {
		return m.Department
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetTemperature() float32 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *QueryEmployInfoByUserMode) GetEpidemicSymptom() int32 {
	if m != nil {
		return m.EpidemicSymptom
	}
	return 0
}

func (m *QueryEmployInfoByUserMode) GetDetectionResult() string {
	if m != nil {
		return m.DetectionResult
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetDetectionOperator() string {
	if m != nil {
		return m.DetectionOperator
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetSymptomWithin14Days() string {
	if m != nil {
		return m.SymptomWithin14Days
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetFormHuBei() int32 {
	if m != nil {
		return m.FormHuBei
	}
	return 0
}

func (m *QueryEmployInfoByUserMode) GetTouch_NCP() int32 {
	if m != nil {
		return m.Touch_NCP
	}
	return 0
}

func (m *QueryEmployInfoByUserMode) GetBeenToHuBei() int32 {
	if m != nil {
		return m.BeenToHuBei
	}
	return 0
}

func (m *QueryEmployInfoByUserMode) GetReturnChengDuTime() int64 {
	if m != nil {
		return m.ReturnChengDuTime
	}
	return 0
}

func (m *QueryEmployInfoByUserMode) GetReturnChengDuDetailedAddress() string {
	if m != nil {
		return m.ReturnChengDuDetailedAddress
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetReturnChengDuTransport() string {
	if m != nil {
		return m.ReturnChengDuTransport
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetTransportDetailInfo() string {
	if m != nil {
		return m.TransportDetailInfo
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetTouchHuBeiPeopleWithin14Days() int32 {
	if m != nil {
		return m.TouchHuBeiPeopleWithin14Days
	}
	return 0
}

func (m *QueryEmployInfoByUserMode) GetLastTouchTime() int64 {
	if m != nil {
		return m.LastTouchTime
	}
	return 0
}

func (m *QueryEmployInfoByUserMode) GetFromChengDuOutside() int32 {
	if m != nil {
		return m.FromChengDuOutside
	}
	return 0
}

func (m *QueryEmployInfoByUserMode) GetThisPlaceTime() int64 {
	if m != nil {
		return m.ThisPlaceTime
	}
	return 0
}

func (m *QueryEmployInfoByUserMode) GetReturnThisPlaceTransport() string {
	if m != nil {
		return m.ReturnThisPlaceTransport
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetProfession() string {
	if m != nil {
		return m.Profession
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetLifeTrace() string {
	if m != nil {
		return m.LifeTrace
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetSignImage() string {
	if m != nil {
		return m.SignImage
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetEmployeeId() int64 {
	if m != nil {
		return m.EmployeeId
	}
	return 0
}

func (m *QueryEmployInfoByUserMode) GetDetailedAddress() string {
	if m != nil {
		return m.DetailedAddress
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetComeFromWenjiang() string {
	if m != nil {
		return m.ComeFromWenjiang
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetComeFromAddress() string {
	if m != nil {
		return m.ComeFromAddress
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetComeFromDetailedAddress() string {
	if m != nil {
		return m.ComeFromDetailedAddress
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *QueryEmployInfoByUserMode) GetCompanyProvince() string {
	if m != nil {
		return m.CompanyProvince
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetCompanyProvinceId() int64 {
	if m != nil {
		return m.CompanyProvinceId
	}
	return 0
}

func (m *QueryEmployInfoByUserMode) GetCompanyCity() string {
	if m != nil {
		return m.CompanyCity
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetCompanyCityId() int64 {
	if m != nil {
		return m.CompanyCityId
	}
	return 0
}

func (m *QueryEmployInfoByUserMode) GetCompanyDistrict() string {
	if m != nil {
		return m.CompanyDistrict
	}
	return ""
}

func (m *QueryEmployInfoByUserMode) GetCompanyDistrictId() int64 {
	if m != nil {
		return m.CompanyDistrictId
	}
	return 0
}

type QueryEmployInfoByUserRes struct {
	Base  *base.BaseRes                `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Info  []*QueryEmployInfoByUserMode `protobuf:"bytes,2,rep,name=info,proto3" json:"info,omitempty"`
	Total int64                        `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *QueryEmployInfoByUserRes) Reset()         { *m = QueryEmployInfoByUserRes{} }
func (m *QueryEmployInfoByUserRes) String() string { return proto.CompactTextString(m) }
func (*QueryEmployInfoByUserRes) ProtoMessage()    {}
func (*QueryEmployInfoByUserRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{4}
}
func (m *QueryEmployInfoByUserRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEmployInfoByUserRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEmployInfoByUserRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEmployInfoByUserRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEmployInfoByUserRes.Merge(m, src)
}
func (m *QueryEmployInfoByUserRes) XXX_Size() int {
	return m.Size()
}
func (m *QueryEmployInfoByUserRes) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEmployInfoByUserRes.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEmployInfoByUserRes proto.InternalMessageInfo

func (m *QueryEmployInfoByUserRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *QueryEmployInfoByUserRes) GetInfo() []*QueryEmployInfoByUserMode {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *QueryEmployInfoByUserRes) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type GetQiniuTokenReq struct {
	Head *base.Head `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
}

func (m *GetQiniuTokenReq) Reset()         { *m = GetQiniuTokenReq{} }
func (m *GetQiniuTokenReq) String() string { return proto.CompactTextString(m) }
func (*GetQiniuTokenReq) ProtoMessage()    {}
func (*GetQiniuTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{5}
}
func (m *GetQiniuTokenReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetQiniuTokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetQiniuTokenReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetQiniuTokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetQiniuTokenReq.Merge(m, src)
}
func (m *GetQiniuTokenReq) XXX_Size() int {
	return m.Size()
}
func (m *GetQiniuTokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetQiniuTokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetQiniuTokenReq proto.InternalMessageInfo

func (m *GetQiniuTokenReq) GetHead() *base.Head {
	if m != nil {
		return m.Head
	}
	return nil
}

type GetQiniuTokenRes struct {
	Base  *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Token string        `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *GetQiniuTokenRes) Reset()         { *m = GetQiniuTokenRes{} }
func (m *GetQiniuTokenRes) String() string { return proto.CompactTextString(m) }
func (*GetQiniuTokenRes) ProtoMessage()    {}
func (*GetQiniuTokenRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{6}
}
func (m *GetQiniuTokenRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetQiniuTokenRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetQiniuTokenRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetQiniuTokenRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetQiniuTokenRes.Merge(m, src)
}
func (m *GetQiniuTokenRes) XXX_Size() int {
	return m.Size()
}
func (m *GetQiniuTokenRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetQiniuTokenRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetQiniuTokenRes proto.InternalMessageInfo

func (m *GetQiniuTokenRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetQiniuTokenRes) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type WebLoginReq struct {
	Head     *base.Head `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	UserName string     `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Pwd      string     `protobuf:"bytes,3,opt,name=pwd,proto3" json:"pwd,omitempty"`
}

func (m *WebLoginReq) Reset()         { *m = WebLoginReq{} }
func (m *WebLoginReq) String() string { return proto.CompactTextString(m) }
func (*WebLoginReq) ProtoMessage()    {}
func (*WebLoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{7}
}
func (m *WebLoginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebLoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebLoginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebLoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebLoginReq.Merge(m, src)
}
func (m *WebLoginReq) XXX_Size() int {
	return m.Size()
}
func (m *WebLoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WebLoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_WebLoginReq proto.InternalMessageInfo

func (m *WebLoginReq) GetHead() *base.Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *WebLoginReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *WebLoginReq) GetPwd() string {
	if m != nil {
		return m.Pwd
	}
	return ""
}

type WebLoginInfo struct {
	UserId      string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName    string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserPwd     string `protobuf:"bytes,3,opt,name=user_pwd,json=userPwd,proto3" json:"user_pwd,omitempty"`
	StreetId    string `protobuf:"bytes,4,opt,name=street_id,json=streetId,proto3" json:"street_id,omitempty"`
	CommunityId string `protobuf:"bytes,5,opt,name=community_id,json=communityId,proto3" json:"community_id,omitempty"`
	// 1 表示街道账号 2 表示社区账号  3表示超级账号
	UserType    int32 `protobuf:"varint,6,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`
	Adcode      int64 `protobuf:"varint,7,opt,name=adcode,proto3" json:"adcode,omitempty"`
	CreatedTime int64 `protobuf:"varint,8,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// 所在省ID
	ProvinceId int64 `protobuf:"varint,9,opt,name=province_id,json=provinceId,proto3" json:"province_id,omitempty"`
	// 所在市ID
	CityId int64 `protobuf:"varint,10,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	// 所在县级ID
	AreaId int64 `protobuf:"varint,11,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
}

func (m *WebLoginInfo) Reset()         { *m = WebLoginInfo{} }
func (m *WebLoginInfo) String() string { return proto.CompactTextString(m) }
func (*WebLoginInfo) ProtoMessage()    {}
func (*WebLoginInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{8}
}
func (m *WebLoginInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebLoginInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebLoginInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebLoginInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebLoginInfo.Merge(m, src)
}
func (m *WebLoginInfo) XXX_Size() int {
	return m.Size()
}
func (m *WebLoginInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WebLoginInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WebLoginInfo proto.InternalMessageInfo

func (m *WebLoginInfo) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *WebLoginInfo) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *WebLoginInfo) GetUserPwd() string {
	if m != nil {
		return m.UserPwd
	}
	return ""
}

func (m *WebLoginInfo) GetStreetId() string {
	if m != nil {
		return m.StreetId
	}
	return ""
}

func (m *WebLoginInfo) GetCommunityId() string {
	if m != nil {
		return m.CommunityId
	}
	return ""
}

func (m *WebLoginInfo) GetUserType() int32 {
	if m != nil {
		return m.UserType
	}
	return 0
}

func (m *WebLoginInfo) GetAdcode() int64 {
	if m != nil {
		return m.Adcode
	}
	return 0
}

func (m *WebLoginInfo) GetCreatedTime() int64 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *WebLoginInfo) GetProvinceId() int64 {
	if m != nil {
		return m.ProvinceId
	}
	return 0
}

func (m *WebLoginInfo) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *WebLoginInfo) GetAreaId() int64 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

type WebLoginRes struct {
	Base *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Info *WebLoginInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *WebLoginRes) Reset()         { *m = WebLoginRes{} }
func (m *WebLoginRes) String() string { return proto.CompactTextString(m) }
func (*WebLoginRes) ProtoMessage()    {}
func (*WebLoginRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{9}
}
func (m *WebLoginRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebLoginRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebLoginRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebLoginRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebLoginRes.Merge(m, src)
}
func (m *WebLoginRes) XXX_Size() int {
	return m.Size()
}
func (m *WebLoginRes) XXX_DiscardUnknown() {
	xxx_messageInfo_WebLoginRes.DiscardUnknown(m)
}

var xxx_messageInfo_WebLoginRes proto.InternalMessageInfo

func (m *WebLoginRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *WebLoginRes) GetInfo() *WebLoginInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type AddEmployeeInfoReq struct {
	Head *base.Head `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// 姓名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 联系电话
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	// 公司归属省
	CompanyProvince string `protobuf:"bytes,4,opt,name=company_province,json=companyProvince,proto3" json:"company_province,omitempty"`
	// 公司归属省id
	CompanyProvinceId int64 `protobuf:"varint,5,opt,name=company_province_id,json=companyProvinceId,proto3" json:"company_province_id,omitempty"`
	// 公司归属市
	CompanyCity string `protobuf:"bytes,6,opt,name=company_city,json=companyCity,proto3" json:"company_city,omitempty"`
	// 公司归属市id
	CompanyCityId int64 `protobuf:"varint,7,opt,name=company_city_id,json=companyCityId,proto3" json:"company_city_id,omitempty"`
	// 公司归属县/区
	CompanyDistrict string `protobuf:"bytes,8,opt,name=company_district,json=companyDistrict,proto3" json:"company_district,omitempty"`
	// 公司归属县/区
	CompanyDistrictId int64 `protobuf:"varint,9,opt,name=company_district_id,json=companyDistrictId,proto3" json:"company_district_id,omitempty"`
	// 公司归属街道
	CompanyStreet string `protobuf:"bytes,10,opt,name=company_street,json=companyStreet,proto3" json:"company_street,omitempty"`
	// 公司归属街道id
	CompanyStreetId int64 `protobuf:"varint,11,opt,name=company_street_id,json=companyStreetId,proto3" json:"company_street_id,omitempty"`
	// 公司归属社区
	CompanyCommunity string `protobuf:"bytes,12,opt,name=company_community,json=companyCommunity,proto3" json:"company_community,omitempty"`
	// 公司归属社区id
	CompanyCommunityId int64 `protobuf:"varint,13,opt,name=company_community_id,json=companyCommunityId,proto3" json:"company_community_id,omitempty"`
	// 企业名称
	CompanyName string `protobuf:"bytes,14,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	// 公司id
	CompanyId int64 `protobuf:"varint,15,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 身份证号码
	IdCardNumber string `protobuf:"bytes,16,opt,name=id_card_number,json=idCardNumber,proto3" json:"id_card_number,omitempty"`
	// 性别 1：女；2：男
	Gender int32 `protobuf:"varint,17,opt,name=gender,proto3" json:"gender,omitempty"`
	// 年龄
	Age int32 `protobuf:"varint,18,opt,name=age,proto3" json:"age,omitempty"`
	// 居住地所属省
	ResidenceProvince string `protobuf:"bytes,19,opt,name=residence_province,json=residenceProvince,proto3" json:"residence_province,omitempty"`
	// 居住地所属省id
	ResidenceProvinceId int64 `protobuf:"varint,20,opt,name=residence_province_id,json=residenceProvinceId,proto3" json:"residence_province_id,omitempty"`
	// 居住地归属市
	ResidenceCity string `protobuf:"bytes,21,opt,name=residence_city,json=residenceCity,proto3" json:"residence_city,omitempty"`
	// 居住地归属市id
	ResidenceCityId int64 `protobuf:"varint,22,opt,name=residence_city_id,json=residenceCityId,proto3" json:"residence_city_id,omitempty"`
	// 居住地归属县/区
	ResidenceDistrict string `protobuf:"bytes,23,opt,name=residence_district,json=residenceDistrict,proto3" json:"residence_district,omitempty"`
	// 居住地归属县/区id
	ResidenceDistrictId int64 `protobuf:"varint,24,opt,name=residence_district_id,json=residenceDistrictId,proto3" json:"residence_district_id,omitempty"`
	// 居住地归属街道
	ResidenceStreet string `protobuf:"bytes,25,opt,name=residence_street,json=residenceStreet,proto3" json:"residence_street,omitempty"`
	// 居住地归属街道id
	ResidenceStreetId int64 `protobuf:"varint,26,opt,name=residence_street_id,json=residenceStreetId,proto3" json:"residence_street_id,omitempty"`
	// 居住地归属社区
	ResidenceCommunity string `protobuf:"bytes,27,opt,name=residence_community,json=residenceCommunity,proto3" json:"residence_community,omitempty"`
	// 居住地归属社区id
	ResidenceCommunityId int64 `protobuf:"varint,28,opt,name=residence_community_id,json=residenceCommunityId,proto3" json:"residence_community_id,omitempty"`
	// 详细居住地址
	ResidenceDetailedAddress string `protobuf:"bytes,29,opt,name=residence_detailed_address,json=residenceDetailedAddress,proto3" json:"residence_detailed_address,omitempty"`
	// 创建时间
	CreatedTime int64 `protobuf:"varint,30,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// 最近修改时间
	UpdateTime int64 `protobuf:"varint,31,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// 1表示未删除  2表示删除
	IsDelete int32 `protobuf:"varint,32,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
}

func (m *AddEmployeeInfoReq) Reset()         { *m = AddEmployeeInfoReq{} }
func (m *AddEmployeeInfoReq) String() string { return proto.CompactTextString(m) }
func (*AddEmployeeInfoReq) ProtoMessage()    {}
func (*AddEmployeeInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{10}
}
func (m *AddEmployeeInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddEmployeeInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddEmployeeInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddEmployeeInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddEmployeeInfoReq.Merge(m, src)
}
func (m *AddEmployeeInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *AddEmployeeInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddEmployeeInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddEmployeeInfoReq proto.InternalMessageInfo

func (m *AddEmployeeInfoReq) GetHead() *base.Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *AddEmployeeInfoReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddEmployeeInfoReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *AddEmployeeInfoReq) GetCompanyProvince() string {
	if m != nil {
		return m.CompanyProvince
	}
	return ""
}

func (m *AddEmployeeInfoReq) GetCompanyProvinceId() int64 {
	if m != nil {
		return m.CompanyProvinceId
	}
	return 0
}

func (m *AddEmployeeInfoReq) GetCompanyCity() string {
	if m != nil {
		return m.CompanyCity
	}
	return ""
}

func (m *AddEmployeeInfoReq) GetCompanyCityId() int64 {
	if m != nil {
		return m.CompanyCityId
	}
	return 0
}

func (m *AddEmployeeInfoReq) GetCompanyDistrict() string {
	if m != nil {
		return m.CompanyDistrict
	}
	return ""
}

func (m *AddEmployeeInfoReq) GetCompanyDistrictId() int64 {
	if m != nil {
		return m.CompanyDistrictId
	}
	return 0
}

func (m *AddEmployeeInfoReq) GetCompanyStreet() string {
	if m != nil {
		return m.CompanyStreet
	}
	return ""
}

func (m *AddEmployeeInfoReq) GetCompanyStreetId() int64 {
	if m != nil {
		return m.CompanyStreetId
	}
	return 0
}

func (m *AddEmployeeInfoReq) GetCompanyCommunity() string {
	if m != nil {
		return m.CompanyCommunity
	}
	return ""
}

func (m *AddEmployeeInfoReq) GetCompanyCommunityId() int64 {
	if m != nil {
		return m.CompanyCommunityId
	}
	return 0
}

func (m *AddEmployeeInfoReq) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *AddEmployeeInfoReq) GetCompanyId() int64 {
	if m != nil {
		return m.CompanyId
	}
	return 0
}

func (m *AddEmployeeInfoReq) GetIdCardNumber() string {
	if m != nil {
		return m.IdCardNumber
	}
	return ""
}

func (m *AddEmployeeInfoReq) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *AddEmployeeInfoReq) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *AddEmployeeInfoReq) GetResidenceProvince() string {
	if m != nil {
		return m.ResidenceProvince
	}
	return ""
}

func (m *AddEmployeeInfoReq) GetResidenceProvinceId() int64 {
	if m != nil {
		return m.ResidenceProvinceId
	}
	return 0
}

func (m *AddEmployeeInfoReq) GetResidenceCity() string {
	if m != nil {
		return m.ResidenceCity
	}
	return ""
}

func (m *AddEmployeeInfoReq) GetResidenceCityId() int64 {
	if m != nil {
		return m.ResidenceCityId
	}
	return 0
}

func (m *AddEmployeeInfoReq) GetResidenceDistrict() string {
	if m != nil {
		return m.ResidenceDistrict
	}
	return ""
}

func (m *AddEmployeeInfoReq) GetResidenceDistrictId() int64 {
	if m != nil {
		return m.ResidenceDistrictId
	}
	return 0
}

func (m *AddEmployeeInfoReq) GetResidenceStreet() string {
	if m != nil {
		return m.ResidenceStreet
	}
	return ""
}

func (m *AddEmployeeInfoReq) GetResidenceStreetId() int64 {
	if m != nil {
		return m.ResidenceStreetId
	}
	return 0
}

func (m *AddEmployeeInfoReq) GetResidenceCommunity() string {
	if m != nil {
		return m.ResidenceCommunity
	}
	return ""
}

func (m *AddEmployeeInfoReq) GetResidenceCommunityId() int64 {
	if m != nil {
		return m.ResidenceCommunityId
	}
	return 0
}

func (m *AddEmployeeInfoReq) GetResidenceDetailedAddress() string {
	if m != nil {
		return m.ResidenceDetailedAddress
	}
	return ""
}

func (m *AddEmployeeInfoReq) GetCreatedTime() int64 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *AddEmployeeInfoReq) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *AddEmployeeInfoReq) GetIsDelete() int32 {
	if m != nil {
		return m.IsDelete
	}
	return 0
}

type AddEmployeeInfoRes struct {
	Base *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Id   int64         `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *AddEmployeeInfoRes) Reset()         { *m = AddEmployeeInfoRes{} }
func (m *AddEmployeeInfoRes) String() string { return proto.CompactTextString(m) }
func (*AddEmployeeInfoRes) ProtoMessage()    {}
func (*AddEmployeeInfoRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{11}
}
func (m *AddEmployeeInfoRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddEmployeeInfoRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddEmployeeInfoRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddEmployeeInfoRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddEmployeeInfoRes.Merge(m, src)
}
func (m *AddEmployeeInfoRes) XXX_Size() int {
	return m.Size()
}
func (m *AddEmployeeInfoRes) XXX_DiscardUnknown() {
	xxx_messageInfo_AddEmployeeInfoRes.DiscardUnknown(m)
}

var xxx_messageInfo_AddEmployeeInfoRes proto.InternalMessageInfo

func (m *AddEmployeeInfoRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *AddEmployeeInfoRes) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateEmployeeInfoReq struct {
	Head *base.Head `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// 姓名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 联系电话
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	// 公司归属省
	CompanyProvince string `protobuf:"bytes,4,opt,name=company_province,json=companyProvince,proto3" json:"company_province,omitempty"`
	// 公司归属省id
	CompanyProvinceId int64 `protobuf:"varint,5,opt,name=company_province_id,json=companyProvinceId,proto3" json:"company_province_id,omitempty"`
	// 公司归属市
	CompanyCity string `protobuf:"bytes,6,opt,name=company_city,json=companyCity,proto3" json:"company_city,omitempty"`
	// 公司归属市id
	CompanyCityId int64 `protobuf:"varint,7,opt,name=company_city_id,json=companyCityId,proto3" json:"company_city_id,omitempty"`
	// 公司归属县/区
	CompanyDistrict string `protobuf:"bytes,8,opt,name=company_district,json=companyDistrict,proto3" json:"company_district,omitempty"`
	// 公司归属县/区
	CompanyDistrictId int64 `protobuf:"varint,9,opt,name=company_district_id,json=companyDistrictId,proto3" json:"company_district_id,omitempty"`
	// 公司归属街道
	CompanyStreet string `protobuf:"bytes,10,opt,name=company_street,json=companyStreet,proto3" json:"company_street,omitempty"`
	// 公司归属街道id
	CompanyStreetId int64 `protobuf:"varint,11,opt,name=company_street_id,json=companyStreetId,proto3" json:"company_street_id,omitempty"`
	// 公司归属社区
	CompanyCommunity string `protobuf:"bytes,12,opt,name=company_community,json=companyCommunity,proto3" json:"company_community,omitempty"`
	// 公司归属社区id
	CompanyCommunityId int64 `protobuf:"varint,13,opt,name=company_community_id,json=companyCommunityId,proto3" json:"company_community_id,omitempty"`
	// 企业名称
	CompanyName string `protobuf:"bytes,14,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	// 公司id
	CompanyId int64 `protobuf:"varint,15,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 身份证号码
	IdCardNumber string `protobuf:"bytes,16,opt,name=id_card_number,json=idCardNumber,proto3" json:"id_card_number,omitempty"`
	// 性别 1：女；2：男
	Gender int32 `protobuf:"varint,17,opt,name=gender,proto3" json:"gender,omitempty"`
	// 年龄
	Age int32 `protobuf:"varint,18,opt,name=age,proto3" json:"age,omitempty"`
	// 居住地所属省
	ResidenceProvince string `protobuf:"bytes,19,opt,name=residence_province,json=residenceProvince,proto3" json:"residence_province,omitempty"`
	// 居住地所属省id
	ResidenceProvinceId int64 `protobuf:"varint,20,opt,name=residence_province_id,json=residenceProvinceId,proto3" json:"residence_province_id,omitempty"`
	// 居住地归属市
	ResidenceCity string `protobuf:"bytes,21,opt,name=residence_city,json=residenceCity,proto3" json:"residence_city,omitempty"`
	// 居住地归属市id
	ResidenceCityId int64 `protobuf:"varint,22,opt,name=residence_city_id,json=residenceCityId,proto3" json:"residence_city_id,omitempty"`
	// 居住地归属县/区
	ResidenceDistrict string `protobuf:"bytes,23,opt,name=residence_district,json=residenceDistrict,proto3" json:"residence_district,omitempty"`
	// 居住地归属县/区id
	ResidenceDistrictId int64 `protobuf:"varint,24,opt,name=residence_district_id,json=residenceDistrictId,proto3" json:"residence_district_id,omitempty"`
	// 居住地归属街道
	ResidenceStreet string `protobuf:"bytes,25,opt,name=residence_street,json=residenceStreet,proto3" json:"residence_street,omitempty"`
	// 居住地归属街道id
	ResidenceStreetId int64 `protobuf:"varint,26,opt,name=residence_street_id,json=residenceStreetId,proto3" json:"residence_street_id,omitempty"`
	// 居住地归属社区
	ResidenceCommunity string `protobuf:"bytes,27,opt,name=residence_community,json=residenceCommunity,proto3" json:"residence_community,omitempty"`
	// 居住地归属社区id
	ResidenceCommunityId int64 `protobuf:"varint,28,opt,name=residence_community_id,json=residenceCommunityId,proto3" json:"residence_community_id,omitempty"`
	// 详细居住地址
	ResidenceDetailedAddress string `protobuf:"bytes,29,opt,name=residence_detailed_address,json=residenceDetailedAddress,proto3" json:"residence_detailed_address,omitempty"`
	// 员工id
	Id int64 `protobuf:"varint,30,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *UpdateEmployeeInfoReq) Reset()         { *m = UpdateEmployeeInfoReq{} }
func (m *UpdateEmployeeInfoReq) String() string { return proto.CompactTextString(m) }
func (*UpdateEmployeeInfoReq) ProtoMessage()    {}
func (*UpdateEmployeeInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{12}
}
func (m *UpdateEmployeeInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateEmployeeInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateEmployeeInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateEmployeeInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEmployeeInfoReq.Merge(m, src)
}
func (m *UpdateEmployeeInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateEmployeeInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEmployeeInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEmployeeInfoReq proto.InternalMessageInfo

func (m *UpdateEmployeeInfoReq) GetHead() *base.Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *UpdateEmployeeInfoReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateEmployeeInfoReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UpdateEmployeeInfoReq) GetCompanyProvince() string {
	if m != nil {
		return m.CompanyProvince
	}
	return ""
}

func (m *UpdateEmployeeInfoReq) GetCompanyProvinceId() int64 {
	if m != nil {
		return m.CompanyProvinceId
	}
	return 0
}

func (m *UpdateEmployeeInfoReq) GetCompanyCity() string {
	if m != nil {
		return m.CompanyCity
	}
	return ""
}

func (m *UpdateEmployeeInfoReq) GetCompanyCityId() int64 {
	if m != nil {
		return m.CompanyCityId
	}
	return 0
}

func (m *UpdateEmployeeInfoReq) GetCompanyDistrict() string {
	if m != nil {
		return m.CompanyDistrict
	}
	return ""
}

func (m *UpdateEmployeeInfoReq) GetCompanyDistrictId() int64 {
	if m != nil {
		return m.CompanyDistrictId
	}
	return 0
}

func (m *UpdateEmployeeInfoReq) GetCompanyStreet() string {
	if m != nil {
		return m.CompanyStreet
	}
	return ""
}

func (m *UpdateEmployeeInfoReq) GetCompanyStreetId() int64 {
	if m != nil {
		return m.CompanyStreetId
	}
	return 0
}

func (m *UpdateEmployeeInfoReq) GetCompanyCommunity() string {
	if m != nil {
		return m.CompanyCommunity
	}
	return ""
}

func (m *UpdateEmployeeInfoReq) GetCompanyCommunityId() int64 {
	if m != nil {
		return m.CompanyCommunityId
	}
	return 0
}

func (m *UpdateEmployeeInfoReq) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *UpdateEmployeeInfoReq) GetCompanyId() int64 {
	if m != nil {
		return m.CompanyId
	}
	return 0
}

func (m *UpdateEmployeeInfoReq) GetIdCardNumber() string {
	if m != nil {
		return m.IdCardNumber
	}
	return ""
}

func (m *UpdateEmployeeInfoReq) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *UpdateEmployeeInfoReq) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *UpdateEmployeeInfoReq) GetResidenceProvince() string {
	if m != nil {
		return m.ResidenceProvince
	}
	return ""
}

func (m *UpdateEmployeeInfoReq) GetResidenceProvinceId() int64 {
	if m != nil {
		return m.ResidenceProvinceId
	}
	return 0
}

func (m *UpdateEmployeeInfoReq) GetResidenceCity() string {
	if m != nil {
		return m.ResidenceCity
	}
	return ""
}

func (m *UpdateEmployeeInfoReq) GetResidenceCityId() int64 {
	if m != nil {
		return m.ResidenceCityId
	}
	return 0
}

func (m *UpdateEmployeeInfoReq) GetResidenceDistrict() string {
	if m != nil {
		return m.ResidenceDistrict
	}
	return ""
}

func (m *UpdateEmployeeInfoReq) GetResidenceDistrictId() int64 {
	if m != nil {
		return m.ResidenceDistrictId
	}
	return 0
}

func (m *UpdateEmployeeInfoReq) GetResidenceStreet() string {
	if m != nil {
		return m.ResidenceStreet
	}
	return ""
}

func (m *UpdateEmployeeInfoReq) GetResidenceStreetId() int64 {
	if m != nil {
		return m.ResidenceStreetId
	}
	return 0
}

func (m *UpdateEmployeeInfoReq) GetResidenceCommunity() string {
	if m != nil {
		return m.ResidenceCommunity
	}
	return ""
}

func (m *UpdateEmployeeInfoReq) GetResidenceCommunityId() int64 {
	if m != nil {
		return m.ResidenceCommunityId
	}
	return 0
}

func (m *UpdateEmployeeInfoReq) GetResidenceDetailedAddress() string {
	if m != nil {
		return m.ResidenceDetailedAddress
	}
	return ""
}

func (m *UpdateEmployeeInfoReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateEmployeeInfoRes struct {
	Base *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (m *UpdateEmployeeInfoRes) Reset()         { *m = UpdateEmployeeInfoRes{} }
func (m *UpdateEmployeeInfoRes) String() string { return proto.CompactTextString(m) }
func (*UpdateEmployeeInfoRes) ProtoMessage()    {}
func (*UpdateEmployeeInfoRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{13}
}
func (m *UpdateEmployeeInfoRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateEmployeeInfoRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateEmployeeInfoRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateEmployeeInfoRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEmployeeInfoRes.Merge(m, src)
}
func (m *UpdateEmployeeInfoRes) XXX_Size() int {
	return m.Size()
}
func (m *UpdateEmployeeInfoRes) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEmployeeInfoRes.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEmployeeInfoRes proto.InternalMessageInfo

func (m *UpdateEmployeeInfoRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

type GetEmployeeInfoReq struct {
	Head *base.Head `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// 员工id
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetEmployeeInfoReq) Reset()         { *m = GetEmployeeInfoReq{} }
func (m *GetEmployeeInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetEmployeeInfoReq) ProtoMessage()    {}
func (*GetEmployeeInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{14}
}
func (m *GetEmployeeInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEmployeeInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEmployeeInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEmployeeInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEmployeeInfoReq.Merge(m, src)
}
func (m *GetEmployeeInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetEmployeeInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEmployeeInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetEmployeeInfoReq proto.InternalMessageInfo

func (m *GetEmployeeInfoReq) GetHead() *base.Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *GetEmployeeInfoReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetEmployeeInfoRes struct {
	Base         *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	EmployeeInfo *EmployeeInfo `protobuf:"bytes,2,opt,name=employee_info,json=employeeInfo,proto3" json:"employee_info,omitempty"`
}

func (m *GetEmployeeInfoRes) Reset()         { *m = GetEmployeeInfoRes{} }
func (m *GetEmployeeInfoRes) String() string { return proto.CompactTextString(m) }
func (*GetEmployeeInfoRes) ProtoMessage()    {}
func (*GetEmployeeInfoRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{15}
}
func (m *GetEmployeeInfoRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEmployeeInfoRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEmployeeInfoRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEmployeeInfoRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEmployeeInfoRes.Merge(m, src)
}
func (m *GetEmployeeInfoRes) XXX_Size() int {
	return m.Size()
}
func (m *GetEmployeeInfoRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEmployeeInfoRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetEmployeeInfoRes proto.InternalMessageInfo

func (m *GetEmployeeInfoRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetEmployeeInfoRes) GetEmployeeInfo() *EmployeeInfo {
	if m != nil {
		return m.EmployeeInfo
	}
	return nil
}

type EmployeeInfo struct {
	// 姓名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 联系电话
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	// 公司归属省
	CompanyProvince string `protobuf:"bytes,4,opt,name=company_province,json=companyProvince,proto3" json:"company_province,omitempty"`
	// 公司归属省id
	CompanyProvinceId int64 `protobuf:"varint,5,opt,name=company_province_id,json=companyProvinceId,proto3" json:"company_province_id,omitempty"`
	// 公司归属市
	CompanyCity string `protobuf:"bytes,6,opt,name=company_city,json=companyCity,proto3" json:"company_city,omitempty"`
	// 公司归属市id
	CompanyCityId int64 `protobuf:"varint,7,opt,name=company_city_id,json=companyCityId,proto3" json:"company_city_id,omitempty"`
	// 公司归属县/区
	CompanyDistrict string `protobuf:"bytes,8,opt,name=company_district,json=companyDistrict,proto3" json:"company_district,omitempty"`
	// 公司归属县/区
	CompanyDistrictId int64 `protobuf:"varint,9,opt,name=company_district_id,json=companyDistrictId,proto3" json:"company_district_id,omitempty"`
	// 公司归属街道
	CompanyStreet string `protobuf:"bytes,10,opt,name=company_street,json=companyStreet,proto3" json:"company_street,omitempty"`
	// 公司归属街道id
	CompanyStreetId int64 `protobuf:"varint,11,opt,name=company_street_id,json=companyStreetId,proto3" json:"company_street_id,omitempty"`
	// 公司归属社区
	CompanyCommunity string `protobuf:"bytes,12,opt,name=company_community,json=companyCommunity,proto3" json:"company_community,omitempty"`
	// 公司归属社区id
	CompanyCommunityId int64 `protobuf:"varint,13,opt,name=company_community_id,json=companyCommunityId,proto3" json:"company_community_id,omitempty"`
	// 企业名称
	CompanyName string `protobuf:"bytes,14,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	// 公司id
	CompanyId int64 `protobuf:"varint,15,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 身份证号码
	IdCardNumber string `protobuf:"bytes,16,opt,name=id_card_number,json=idCardNumber,proto3" json:"id_card_number,omitempty"`
	// 性别 1：女；2：男
	Gender int32 `protobuf:"varint,17,opt,name=gender,proto3" json:"gender,omitempty"`
	// 年龄
	Age int32 `protobuf:"varint,18,opt,name=age,proto3" json:"age,omitempty"`
	// 居住地所属省
	ResidenceProvince string `protobuf:"bytes,19,opt,name=residence_province,json=residenceProvince,proto3" json:"residence_province,omitempty"`
	// 居住地所属省id
	ResidenceProvinceId int64 `protobuf:"varint,20,opt,name=residence_province_id,json=residenceProvinceId,proto3" json:"residence_province_id,omitempty"`
	// 居住地归属市
	ResidenceCity string `protobuf:"bytes,21,opt,name=residence_city,json=residenceCity,proto3" json:"residence_city,omitempty"`
	// 居住地归属市id
	ResidenceCityId int64 `protobuf:"varint,22,opt,name=residence_city_id,json=residenceCityId,proto3" json:"residence_city_id,omitempty"`
	// 居住地归属县/区
	ResidenceDistrict string `protobuf:"bytes,23,opt,name=residence_district,json=residenceDistrict,proto3" json:"residence_district,omitempty"`
	// 居住地归属县/区id
	ResidenceDistrictId int64 `protobuf:"varint,24,opt,name=residence_district_id,json=residenceDistrictId,proto3" json:"residence_district_id,omitempty"`
	// 居住地归属街道
	ResidenceStreet string `protobuf:"bytes,25,opt,name=residence_street,json=residenceStreet,proto3" json:"residence_street,omitempty"`
	// 居住地归属街道id
	ResidenceStreetId int64 `protobuf:"varint,26,opt,name=residence_street_id,json=residenceStreetId,proto3" json:"residence_street_id,omitempty"`
	// 居住地归属社区
	ResidenceCommunity string `protobuf:"bytes,27,opt,name=residence_community,json=residenceCommunity,proto3" json:"residence_community,omitempty"`
	// 居住地归属社区id
	ResidenceCommunityId int64 `protobuf:"varint,28,opt,name=residence_community_id,json=residenceCommunityId,proto3" json:"residence_community_id,omitempty"`
	// 详细居住地址
	ResidenceDetailedAddress string `protobuf:"bytes,29,opt,name=residence_detailed_address,json=residenceDetailedAddress,proto3" json:"residence_detailed_address,omitempty"`
	// 员工id
	Id         int64 `protobuf:"varint,30,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime int64 `protobuf:"varint,31,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime int64 `protobuf:"varint,32,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	IsDelete   int32 `protobuf:"varint,33,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
}

func (m *EmployeeInfo) Reset()         { *m = EmployeeInfo{} }
func (m *EmployeeInfo) String() string { return proto.CompactTextString(m) }
func (*EmployeeInfo) ProtoMessage()    {}
func (*EmployeeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{16}
}
func (m *EmployeeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmployeeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmployeeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmployeeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmployeeInfo.Merge(m, src)
}
func (m *EmployeeInfo) XXX_Size() int {
	return m.Size()
}
func (m *EmployeeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EmployeeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EmployeeInfo proto.InternalMessageInfo

func (m *EmployeeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EmployeeInfo) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *EmployeeInfo) GetCompanyProvince() string {
	if m != nil {
		return m.CompanyProvince
	}
	return ""
}

func (m *EmployeeInfo) GetCompanyProvinceId() int64 {
	if m != nil {
		return m.CompanyProvinceId
	}
	return 0
}

func (m *EmployeeInfo) GetCompanyCity() string {
	if m != nil {
		return m.CompanyCity
	}
	return ""
}

func (m *EmployeeInfo) GetCompanyCityId() int64 {
	if m != nil {
		return m.CompanyCityId
	}
	return 0
}

func (m *EmployeeInfo) GetCompanyDistrict() string {
	if m != nil {
		return m.CompanyDistrict
	}
	return ""
}

func (m *EmployeeInfo) GetCompanyDistrictId() int64 {
	if m != nil {
		return m.CompanyDistrictId
	}
	return 0
}

func (m *EmployeeInfo) GetCompanyStreet() string {
	if m != nil {
		return m.CompanyStreet
	}
	return ""
}

func (m *EmployeeInfo) GetCompanyStreetId() int64 {
	if m != nil {
		return m.CompanyStreetId
	}
	return 0
}

func (m *EmployeeInfo) GetCompanyCommunity() string {
	if m != nil {
		return m.CompanyCommunity
	}
	return ""
}

func (m *EmployeeInfo) GetCompanyCommunityId() int64 {
	if m != nil {
		return m.CompanyCommunityId
	}
	return 0
}

func (m *EmployeeInfo) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *EmployeeInfo) GetCompanyId() int64 {
	if m != nil {
		return m.CompanyId
	}
	return 0
}

func (m *EmployeeInfo) GetIdCardNumber() string {
	if m != nil {
		return m.IdCardNumber
	}
	return ""
}

func (m *EmployeeInfo) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *EmployeeInfo) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *EmployeeInfo) GetResidenceProvince() string {
	if m != nil {
		return m.ResidenceProvince
	}
	return ""
}

func (m *EmployeeInfo) GetResidenceProvinceId() int64 {
	if m != nil {
		return m.ResidenceProvinceId
	}
	return 0
}

func (m *EmployeeInfo) GetResidenceCity() string {
	if m != nil {
		return m.ResidenceCity
	}
	return ""
}

func (m *EmployeeInfo) GetResidenceCityId() int64 {
	if m != nil {
		return m.ResidenceCityId
	}
	return 0
}

func (m *EmployeeInfo) GetResidenceDistrict() string {
	if m != nil {
		return m.ResidenceDistrict
	}
	return ""
}

func (m *EmployeeInfo) GetResidenceDistrictId() int64 {
	if m != nil {
		return m.ResidenceDistrictId
	}
	return 0
}

func (m *EmployeeInfo) GetResidenceStreet() string {
	if m != nil {
		return m.ResidenceStreet
	}
	return ""
}

func (m *EmployeeInfo) GetResidenceStreetId() int64 {
	if m != nil {
		return m.ResidenceStreetId
	}
	return 0
}

func (m *EmployeeInfo) GetResidenceCommunity() string {
	if m != nil {
		return m.ResidenceCommunity
	}
	return ""
}

func (m *EmployeeInfo) GetResidenceCommunityId() int64 {
	if m != nil {
		return m.ResidenceCommunityId
	}
	return 0
}

func (m *EmployeeInfo) GetResidenceDetailedAddress() string {
	if m != nil {
		return m.ResidenceDetailedAddress
	}
	return ""
}

func (m *EmployeeInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EmployeeInfo) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *EmployeeInfo) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *EmployeeInfo) GetIsDelete() int32 {
	if m != nil {
		return m.IsDelete
	}
	return 0
}

type AddEmployeeHealthInfoReq struct {
	Head *base.Head `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// 过去14天到现在，是否有以下症状,","分割
	SymptomWithin14Days string `protobuf:"bytes,2,opt,name=symptom_within14_days,json=symptomWithin14Days,proto3" json:"symptom_within14_days,omitempty"`
	// 是否湖北返蓉人员
	FormHuBei int32 `protobuf:"varint,3,opt,name=form_hu_bei,json=formHuBei,proto3" json:"form_hu_bei,omitempty"`
	// 过去14天内是否有接触过新型冠状病毒的肺炎病例？
	Touch_NCP int32 `protobuf:"varint,4,opt,name=touch_NCP,json=touchNCP,proto3" json:"touch_NCP,omitempty"`
	// 过去14天内是否有过湖北或其他有本地病例持续传播地区的旅居史？
	BeenToHuBei int32 `protobuf:"varint,5,opt,name=been_to_hu_bei,json=beenToHuBei,proto3" json:"been_to_hu_bei,omitempty"`
	// 返蓉时间
	ReturnChengDuTime int64 `protobuf:"varint,6,opt,name=return_cheng_du_time,json=returnChengDuTime,proto3" json:"return_cheng_du_time,omitempty"`
	// 返蓉详细地址
	ReturnChengDuDetailedAddress string `protobuf:"bytes,7,opt,name=return_cheng_du_detailed_address,json=returnChengDuDetailedAddress,proto3" json:"return_cheng_du_detailed_address,omitempty"`
	// 返蓉交通工具，","分割
	ReturnChengDuTransport string `protobuf:"bytes,8,opt,name=return_cheng_du_transport,json=returnChengDuTransport,proto3" json:"return_cheng_du_transport,omitempty"`
	// 交通工具详细信息（例如班次、航班号、车牌号）
	TransportDetailInfo string `protobuf:"bytes,9,opt,name=transport_detail_info,json=transportDetailInfo,proto3" json:"transport_detail_info,omitempty"`
	// 过去14天内是否与湖北等地区人员有接触史？
	TouchHuBeiPeopleWithin14Days int32 `protobuf:"varint,10,opt,name=touch_hu_bei_people_within14_days,json=touchHuBeiPeopleWithin14Days,proto3" json:"touch_hu_bei_people_within14_days,omitempty"`
	// 最后接触时间
	LastTouchTime int64 `protobuf:"varint,11,opt,name=last_touch_time,json=lastTouchTime,proto3" json:"last_touch_time,omitempty"`
	// 是否是2020年2月3日0:00时后从成都市以外区域来温江？
	FromChengDuOutside int32 `protobuf:"varint,12,opt,name=from_cheng_du_outside,json=fromChengDuOutside,proto3" json:"from_cheng_du_outside,omitempty"`
	// 您何时来温江
	ThisPlaceTime int64 `protobuf:"varint,13,opt,name=this_place_time,json=thisPlaceTime,proto3" json:"this_place_time,omitempty"`
	// 乘坐何种交通工具到温江，","分割
	ReturnThisPlaceTransport string `protobuf:"bytes,14,opt,name=return_this_place_transport,json=returnThisPlaceTransport,proto3" json:"return_this_place_transport,omitempty"`
	// 您的职业是
	Profession string `protobuf:"bytes,15,opt,name=profession,proto3" json:"profession,omitempty"`
	// 来温江前14天主要活动轨迹，","分割
	LifeTrace string `protobuf:"bytes,16,opt,name=life_trace,json=lifeTrace,proto3" json:"life_trace,omitempty"`
	// 签名图片地址
	SignImage string `protobuf:"bytes,17,opt,name=sign_image,json=signImage,proto3" json:"sign_image,omitempty"`
	// 员工id
	EmployeeId int64 `protobuf:"varint,18,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	// 员工所属公司id
	CompanyId int64 `protobuf:"varint,19,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 从何处来温江 市内还是室外
	ComeFromWenjiang string `protobuf:"bytes,20,opt,name=come_from_wenjiang,json=comeFromWenjiang,proto3" json:"come_from_wenjiang,omitempty"`
	// 从何处来 省/市/区
	ComeFromAddress string `protobuf:"bytes,21,opt,name=come_from_address,json=comeFromAddress,proto3" json:"come_from_address,omitempty"`
	// 从何处来详细地址
	ComeFromDetailedAddress string `protobuf:"bytes,22,opt,name=come_from_detailed_address,json=comeFromDetailedAddress,proto3" json:"come_from_detailed_address,omitempty"`
}

func (m *AddEmployeeHealthInfoReq) Reset()         { *m = AddEmployeeHealthInfoReq{} }
func (m *AddEmployeeHealthInfoReq) String() string { return proto.CompactTextString(m) }
func (*AddEmployeeHealthInfoReq) ProtoMessage()    {}
func (*AddEmployeeHealthInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{17}
}
func (m *AddEmployeeHealthInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddEmployeeHealthInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddEmployeeHealthInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddEmployeeHealthInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddEmployeeHealthInfoReq.Merge(m, src)
}
func (m *AddEmployeeHealthInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *AddEmployeeHealthInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddEmployeeHealthInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddEmployeeHealthInfoReq proto.InternalMessageInfo

func (m *AddEmployeeHealthInfoReq) GetHead() *base.Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *AddEmployeeHealthInfoReq) GetSymptomWithin14Days() string {
	if m != nil {
		return m.SymptomWithin14Days
	}
	return ""
}

func (m *AddEmployeeHealthInfoReq) GetFormHuBei() int32 {
	if m != nil {
		return m.FormHuBei
	}
	return 0
}

func (m *AddEmployeeHealthInfoReq) GetTouch_NCP() int32 {
	if m != nil {
		return m.Touch_NCP
	}
	return 0
}

func (m *AddEmployeeHealthInfoReq) GetBeenToHuBei() int32 {
	if m != nil {
		return m.BeenToHuBei
	}
	return 0
}

func (m *AddEmployeeHealthInfoReq) GetReturnChengDuTime() int64 {
	if m != nil {
		return m.ReturnChengDuTime
	}
	return 0
}

func (m *AddEmployeeHealthInfoReq) GetReturnChengDuDetailedAddress() string {
	if m != nil {
		return m.ReturnChengDuDetailedAddress
	}
	return ""
}

func (m *AddEmployeeHealthInfoReq) GetReturnChengDuTransport() string {
	if m != nil {
		return m.ReturnChengDuTransport
	}
	return ""
}

func (m *AddEmployeeHealthInfoReq) GetTransportDetailInfo() string {
	if m != nil {
		return m.TransportDetailInfo
	}
	return ""
}

func (m *AddEmployeeHealthInfoReq) GetTouchHuBeiPeopleWithin14Days() int32 {
	if m != nil {
		return m.TouchHuBeiPeopleWithin14Days
	}
	return 0
}

func (m *AddEmployeeHealthInfoReq) GetLastTouchTime() int64 {
	if m != nil {
		return m.LastTouchTime
	}
	return 0
}

func (m *AddEmployeeHealthInfoReq) GetFromChengDuOutside() int32 {
	if m != nil {
		return m.FromChengDuOutside
	}
	return 0
}

func (m *AddEmployeeHealthInfoReq) GetThisPlaceTime() int64 {
	if m != nil {
		return m.ThisPlaceTime
	}
	return 0
}

func (m *AddEmployeeHealthInfoReq) GetReturnThisPlaceTransport() string {
	if m != nil {
		return m.ReturnThisPlaceTransport
	}
	return ""
}

func (m *AddEmployeeHealthInfoReq) GetProfession() string {
	if m != nil {
		return m.Profession
	}
	return ""
}

func (m *AddEmployeeHealthInfoReq) GetLifeTrace() string {
	if m != nil {
		return m.LifeTrace
	}
	return ""
}

func (m *AddEmployeeHealthInfoReq) GetSignImage() string {
	if m != nil {
		return m.SignImage
	}
	return ""
}

func (m *AddEmployeeHealthInfoReq) GetEmployeeId() int64 {
	if m != nil {
		return m.EmployeeId
	}
	return 0
}

func (m *AddEmployeeHealthInfoReq) GetCompanyId() int64 {
	if m != nil {
		return m.CompanyId
	}
	return 0
}

func (m *AddEmployeeHealthInfoReq) GetComeFromWenjiang() string {
	if m != nil {
		return m.ComeFromWenjiang
	}
	return ""
}

func (m *AddEmployeeHealthInfoReq) GetComeFromAddress() string {
	if m != nil {
		return m.ComeFromAddress
	}
	return ""
}

func (m *AddEmployeeHealthInfoReq) GetComeFromDetailedAddress() string {
	if m != nil {
		return m.ComeFromDetailedAddress
	}
	return ""
}

type AddEmployeeHealthInfoRes struct {
	Base *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Id   int64         `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *AddEmployeeHealthInfoRes) Reset()         { *m = AddEmployeeHealthInfoRes{} }
func (m *AddEmployeeHealthInfoRes) String() string { return proto.CompactTextString(m) }
func (*AddEmployeeHealthInfoRes) ProtoMessage()    {}
func (*AddEmployeeHealthInfoRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{18}
}
func (m *AddEmployeeHealthInfoRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddEmployeeHealthInfoRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddEmployeeHealthInfoRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddEmployeeHealthInfoRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddEmployeeHealthInfoRes.Merge(m, src)
}
func (m *AddEmployeeHealthInfoRes) XXX_Size() int {
	return m.Size()
}
func (m *AddEmployeeHealthInfoRes) XXX_DiscardUnknown() {
	xxx_messageInfo_AddEmployeeHealthInfoRes.DiscardUnknown(m)
}

var xxx_messageInfo_AddEmployeeHealthInfoRes proto.InternalMessageInfo

func (m *AddEmployeeHealthInfoRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *AddEmployeeHealthInfoRes) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateEmployeeHealthInfoReq struct {
	Head *base.Head `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// 过去14天到现在，是否有以下症状,","分割
	SymptomWithin14Days string `protobuf:"bytes,2,opt,name=symptom_within14_days,json=symptomWithin14Days,proto3" json:"symptom_within14_days,omitempty"`
	// 是否湖北返蓉人员
	FormHuBei int32 `protobuf:"varint,3,opt,name=form_hu_bei,json=formHuBei,proto3" json:"form_hu_bei,omitempty"`
	// 过去14天内是否有接触过新型冠状病毒的肺炎病例？
	Touch_NCP int32 `protobuf:"varint,4,opt,name=touch_NCP,json=touchNCP,proto3" json:"touch_NCP,omitempty"`
	// 过去14天内是否有过湖北或其他有本地病例持续传播地区的旅居史？
	BeenToHuBei int32 `protobuf:"varint,5,opt,name=been_to_hu_bei,json=beenToHuBei,proto3" json:"been_to_hu_bei,omitempty"`
	// 返蓉时间
	ReturnChengDuTime int64 `protobuf:"varint,6,opt,name=return_cheng_du_time,json=returnChengDuTime,proto3" json:"return_cheng_du_time,omitempty"`
	// 返蓉详细地址
	ReturnChengDuDetailedAddress string `protobuf:"bytes,7,opt,name=return_cheng_du_detailed_address,json=returnChengDuDetailedAddress,proto3" json:"return_cheng_du_detailed_address,omitempty"`
	// 返蓉交通工具，","分割
	ReturnChengDuTransport string `protobuf:"bytes,8,opt,name=return_cheng_du_transport,json=returnChengDuTransport,proto3" json:"return_cheng_du_transport,omitempty"`
	// 交通工具详细信息（例如班次、航班号、车牌号）
	TransportDetailInfo string `protobuf:"bytes,9,opt,name=transport_detail_info,json=transportDetailInfo,proto3" json:"transport_detail_info,omitempty"`
	// 过去14天内是否与湖北等地区人员有接触史？
	TouchHuBeiPeopleWithin14Days int32 `protobuf:"varint,10,opt,name=touch_hu_bei_people_within14_days,json=touchHuBeiPeopleWithin14Days,proto3" json:"touch_hu_bei_people_within14_days,omitempty"`
	// 最后接触时间
	LastTouchTime int64 `protobuf:"varint,11,opt,name=last_touch_time,json=lastTouchTime,proto3" json:"last_touch_time,omitempty"`
	// 是否是2020年2月3日0:00时后从成都市以外区域来温江？
	FromChengDuOutside int32 `protobuf:"varint,12,opt,name=from_cheng_du_outside,json=fromChengDuOutside,proto3" json:"from_cheng_du_outside,omitempty"`
	// 您何时来温江
	ThisPlaceTime int64 `protobuf:"varint,13,opt,name=this_place_time,json=thisPlaceTime,proto3" json:"this_place_time,omitempty"`
	// 乘坐何种交通工具到温江，","分割
	ReturnThisPlaceTransport string `protobuf:"bytes,14,opt,name=return_this_place_transport,json=returnThisPlaceTransport,proto3" json:"return_this_place_transport,omitempty"`
	// 您的职业是
	Profession string `protobuf:"bytes,15,opt,name=profession,proto3" json:"profession,omitempty"`
	// 来温江前14天主要活动轨迹，","分割
	LifeTrace string `protobuf:"bytes,16,opt,name=life_trace,json=lifeTrace,proto3" json:"life_trace,omitempty"`
	// 签名图片地址
	SignImage string `protobuf:"bytes,17,opt,name=sign_image,json=signImage,proto3" json:"sign_image,omitempty"`
	// 员工健康信息id
	Id int64 `protobuf:"varint,18,opt,name=id,proto3" json:"id,omitempty"`
	// 员工id
	EmployeeId int64 `protobuf:"varint,19,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	// 员工所属公司id
	CompanyId int64 `protobuf:"varint,20,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 从何处来温江 市内还是室外
	ComeFromWenjiang string `protobuf:"bytes,21,opt,name=come_from_wenjiang,json=comeFromWenjiang,proto3" json:"come_from_wenjiang,omitempty"`
	// 从何处来 省/市/区
	ComeFromAddress string `protobuf:"bytes,22,opt,name=come_from_address,json=comeFromAddress,proto3" json:"come_from_address,omitempty"`
	// 从何处来详细地址
	ComeFromDetailedAddress string `protobuf:"bytes,23,opt,name=come_from_detailed_address,json=comeFromDetailedAddress,proto3" json:"come_from_detailed_address,omitempty"`
}

func (m *UpdateEmployeeHealthInfoReq) Reset()         { *m = UpdateEmployeeHealthInfoReq{} }
func (m *UpdateEmployeeHealthInfoReq) String() string { return proto.CompactTextString(m) }
func (*UpdateEmployeeHealthInfoReq) ProtoMessage()    {}
func (*UpdateEmployeeHealthInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{19}
}
func (m *UpdateEmployeeHealthInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateEmployeeHealthInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateEmployeeHealthInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateEmployeeHealthInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEmployeeHealthInfoReq.Merge(m, src)
}
func (m *UpdateEmployeeHealthInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateEmployeeHealthInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEmployeeHealthInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEmployeeHealthInfoReq proto.InternalMessageInfo

func (m *UpdateEmployeeHealthInfoReq) GetHead() *base.Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *UpdateEmployeeHealthInfoReq) GetSymptomWithin14Days() string {
	if m != nil {
		return m.SymptomWithin14Days
	}
	return ""
}

func (m *UpdateEmployeeHealthInfoReq) GetFormHuBei() int32 {
	if m != nil {
		return m.FormHuBei
	}
	return 0
}

func (m *UpdateEmployeeHealthInfoReq) GetTouch_NCP() int32 {
	if m != nil {
		return m.Touch_NCP
	}
	return 0
}

func (m *UpdateEmployeeHealthInfoReq) GetBeenToHuBei() int32 {
	if m != nil {
		return m.BeenToHuBei
	}
	return 0
}

func (m *UpdateEmployeeHealthInfoReq) GetReturnChengDuTime() int64 {
	if m != nil {
		return m.ReturnChengDuTime
	}
	return 0
}

func (m *UpdateEmployeeHealthInfoReq) GetReturnChengDuDetailedAddress() string {
	if m != nil {
		return m.ReturnChengDuDetailedAddress
	}
	return ""
}

func (m *UpdateEmployeeHealthInfoReq) GetReturnChengDuTransport() string {
	if m != nil {
		return m.ReturnChengDuTransport
	}
	return ""
}

func (m *UpdateEmployeeHealthInfoReq) GetTransportDetailInfo() string {
	if m != nil {
		return m.TransportDetailInfo
	}
	return ""
}

func (m *UpdateEmployeeHealthInfoReq) GetTouchHuBeiPeopleWithin14Days() int32 {
	if m != nil {
		return m.TouchHuBeiPeopleWithin14Days
	}
	return 0
}

func (m *UpdateEmployeeHealthInfoReq) GetLastTouchTime() int64 {
	if m != nil {
		return m.LastTouchTime
	}
	return 0
}

func (m *UpdateEmployeeHealthInfoReq) GetFromChengDuOutside() int32 {
	if m != nil {
		return m.FromChengDuOutside
	}
	return 0
}

func (m *UpdateEmployeeHealthInfoReq) GetThisPlaceTime() int64 {
	if m != nil {
		return m.ThisPlaceTime
	}
	return 0
}

func (m *UpdateEmployeeHealthInfoReq) GetReturnThisPlaceTransport() string {
	if m != nil {
		return m.ReturnThisPlaceTransport
	}
	return ""
}

func (m *UpdateEmployeeHealthInfoReq) GetProfession() string {
	if m != nil {
		return m.Profession
	}
	return ""
}

func (m *UpdateEmployeeHealthInfoReq) GetLifeTrace() string {
	if m != nil {
		return m.LifeTrace
	}
	return ""
}

func (m *UpdateEmployeeHealthInfoReq) GetSignImage() string {
	if m != nil {
		return m.SignImage
	}
	return ""
}

func (m *UpdateEmployeeHealthInfoReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateEmployeeHealthInfoReq) GetEmployeeId() int64 {
	if m != nil {
		return m.EmployeeId
	}
	return 0
}

func (m *UpdateEmployeeHealthInfoReq) GetCompanyId() int64 {
	if m != nil {
		return m.CompanyId
	}
	return 0
}

func (m *UpdateEmployeeHealthInfoReq) GetComeFromWenjiang() string {
	if m != nil {
		return m.ComeFromWenjiang
	}
	return ""
}

func (m *UpdateEmployeeHealthInfoReq) GetComeFromAddress() string {
	if m != nil {
		return m.ComeFromAddress
	}
	return ""
}

func (m *UpdateEmployeeHealthInfoReq) GetComeFromDetailedAddress() string {
	if m != nil {
		return m.ComeFromDetailedAddress
	}
	return ""
}

type UpdateEmployeeHealthInfoRes struct {
	Base *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (m *UpdateEmployeeHealthInfoRes) Reset()         { *m = UpdateEmployeeHealthInfoRes{} }
func (m *UpdateEmployeeHealthInfoRes) String() string { return proto.CompactTextString(m) }
func (*UpdateEmployeeHealthInfoRes) ProtoMessage()    {}
func (*UpdateEmployeeHealthInfoRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{20}
}
func (m *UpdateEmployeeHealthInfoRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateEmployeeHealthInfoRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateEmployeeHealthInfoRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateEmployeeHealthInfoRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEmployeeHealthInfoRes.Merge(m, src)
}
func (m *UpdateEmployeeHealthInfoRes) XXX_Size() int {
	return m.Size()
}
func (m *UpdateEmployeeHealthInfoRes) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEmployeeHealthInfoRes.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEmployeeHealthInfoRes proto.InternalMessageInfo

func (m *UpdateEmployeeHealthInfoRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

type GetEmployeeHealthInfoReq struct {
	Base *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// 员工id
	EmployeeId int64 `protobuf:"varint,2,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
}

func (m *GetEmployeeHealthInfoReq) Reset()         { *m = GetEmployeeHealthInfoReq{} }
func (m *GetEmployeeHealthInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetEmployeeHealthInfoReq) ProtoMessage()    {}
func (*GetEmployeeHealthInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{21}
}
func (m *GetEmployeeHealthInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEmployeeHealthInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEmployeeHealthInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEmployeeHealthInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEmployeeHealthInfoReq.Merge(m, src)
}
func (m *GetEmployeeHealthInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetEmployeeHealthInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEmployeeHealthInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetEmployeeHealthInfoReq proto.InternalMessageInfo

func (m *GetEmployeeHealthInfoReq) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetEmployeeHealthInfoReq) GetEmployeeId() int64 {
	if m != nil {
		return m.EmployeeId
	}
	return 0
}

type GetEmployeeHealthInfoRes struct {
	Base               *base.BaseRes       `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	EmployeeHealthInfo *EmployeeHealthInfo `protobuf:"bytes,2,opt,name=employee_health_info,json=employeeHealthInfo,proto3" json:"employee_health_info,omitempty"`
}

func (m *GetEmployeeHealthInfoRes) Reset()         { *m = GetEmployeeHealthInfoRes{} }
func (m *GetEmployeeHealthInfoRes) String() string { return proto.CompactTextString(m) }
func (*GetEmployeeHealthInfoRes) ProtoMessage()    {}
func (*GetEmployeeHealthInfoRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{22}
}
func (m *GetEmployeeHealthInfoRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEmployeeHealthInfoRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEmployeeHealthInfoRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEmployeeHealthInfoRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEmployeeHealthInfoRes.Merge(m, src)
}
func (m *GetEmployeeHealthInfoRes) XXX_Size() int {
	return m.Size()
}
func (m *GetEmployeeHealthInfoRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEmployeeHealthInfoRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetEmployeeHealthInfoRes proto.InternalMessageInfo

func (m *GetEmployeeHealthInfoRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetEmployeeHealthInfoRes) GetEmployeeHealthInfo() *EmployeeHealthInfo {
	if m != nil {
		return m.EmployeeHealthInfo
	}
	return nil
}

type EmployeeHealthInfo struct {
	// 过去14天到现在，是否有以下症状,","分割
	SymptomWithin14Days string `protobuf:"bytes,2,opt,name=symptom_within14_days,json=symptomWithin14Days,proto3" json:"symptom_within14_days,omitempty"`
	// 是否湖北返蓉人员
	FormHuBei int32 `protobuf:"varint,3,opt,name=form_hu_bei,json=formHuBei,proto3" json:"form_hu_bei,omitempty"`
	// 过去14天内是否有接触过新型冠状病毒的肺炎病例？
	Touch_NCP int32 `protobuf:"varint,4,opt,name=touch_NCP,json=touchNCP,proto3" json:"touch_NCP,omitempty"`
	// 过去14天内是否有过湖北或其他有本地病例持续传播地区的旅居史？
	BeenToHuBei int32 `protobuf:"varint,5,opt,name=been_to_hu_bei,json=beenToHuBei,proto3" json:"been_to_hu_bei,omitempty"`
	// 返蓉时间
	ReturnChengDuTime int64 `protobuf:"varint,6,opt,name=return_cheng_du_time,json=returnChengDuTime,proto3" json:"return_cheng_du_time,omitempty"`
	// 返蓉详细地址
	ReturnChengDuDetailedAddress string `protobuf:"bytes,7,opt,name=return_cheng_du_detailed_address,json=returnChengDuDetailedAddress,proto3" json:"return_cheng_du_detailed_address,omitempty"`
	// 返蓉交通工具，","分割
	ReturnChengDuTransport string `protobuf:"bytes,8,opt,name=return_cheng_du_transport,json=returnChengDuTransport,proto3" json:"return_cheng_du_transport,omitempty"`
	// 交通工具详细信息（例如班次、航班号、车牌号）
	TransportDetailInfo string `protobuf:"bytes,9,opt,name=transport_detail_info,json=transportDetailInfo,proto3" json:"transport_detail_info,omitempty"`
	// 过去14天内是否与湖北等地区人员有接触史？
	TouchHuBeiPeopleWithin14Days int32 `protobuf:"varint,10,opt,name=touch_hu_bei_people_within14_days,json=touchHuBeiPeopleWithin14Days,proto3" json:"touch_hu_bei_people_within14_days,omitempty"`
	// 最后接触时间
	LastTouchTime int64 `protobuf:"varint,11,opt,name=last_touch_time,json=lastTouchTime,proto3" json:"last_touch_time,omitempty"`
	// 是否是2020年2月3日0:00时后从成都市以外区域来温江？
	FromChengDuOutside int32 `protobuf:"varint,12,opt,name=from_cheng_du_outside,json=fromChengDuOutside,proto3" json:"from_cheng_du_outside,omitempty"`
	// 您何时来温江
	ThisPlaceTime int64 `protobuf:"varint,13,opt,name=this_place_time,json=thisPlaceTime,proto3" json:"this_place_time,omitempty"`
	// 乘坐何种交通工具到温江，","分割
	ReturnThisPlaceTransport string `protobuf:"bytes,14,opt,name=return_this_place_transport,json=returnThisPlaceTransport,proto3" json:"return_this_place_transport,omitempty"`
	// 您的职业是
	Profession string `protobuf:"bytes,15,opt,name=profession,proto3" json:"profession,omitempty"`
	// 来温江前14天主要活动轨迹，","分割
	LifeTrace string `protobuf:"bytes,16,opt,name=life_trace,json=lifeTrace,proto3" json:"life_trace,omitempty"`
	// 签名图片地址
	SignImage string `protobuf:"bytes,17,opt,name=sign_image,json=signImage,proto3" json:"sign_image,omitempty"`
	// 员工健康信息id
	Id int64 `protobuf:"varint,18,opt,name=id,proto3" json:"id,omitempty"`
	// 员工id
	EmployeeId int64 `protobuf:"varint,19,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	// 员工所属公司id
	CompanyId  int64 `protobuf:"varint,20,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	UpdateTime int64 `protobuf:"varint,21,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// 从何处来温江 市内还是室外
	ComeFromWenjiang string `protobuf:"bytes,22,opt,name=come_from_wenjiang,json=comeFromWenjiang,proto3" json:"come_from_wenjiang,omitempty"`
	// 从何处来 省/市/区
	ComeFromAddress string `protobuf:"bytes,23,opt,name=come_from_address,json=comeFromAddress,proto3" json:"come_from_address,omitempty"`
	// 从何处来详细地址
	ComeFromDetailedAddress string `protobuf:"bytes,24,opt,name=come_from_detailed_address,json=comeFromDetailedAddress,proto3" json:"come_from_detailed_address,omitempty"`
}

func (m *EmployeeHealthInfo) Reset()         { *m = EmployeeHealthInfo{} }
func (m *EmployeeHealthInfo) String() string { return proto.CompactTextString(m) }
func (*EmployeeHealthInfo) ProtoMessage()    {}
func (*EmployeeHealthInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{23}
}
func (m *EmployeeHealthInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmployeeHealthInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmployeeHealthInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmployeeHealthInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmployeeHealthInfo.Merge(m, src)
}
func (m *EmployeeHealthInfo) XXX_Size() int {
	return m.Size()
}
func (m *EmployeeHealthInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EmployeeHealthInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EmployeeHealthInfo proto.InternalMessageInfo

func (m *EmployeeHealthInfo) GetSymptomWithin14Days() string {
	if m != nil {
		return m.SymptomWithin14Days
	}
	return ""
}

func (m *EmployeeHealthInfo) GetFormHuBei() int32 {
	if m != nil {
		return m.FormHuBei
	}
	return 0
}

func (m *EmployeeHealthInfo) GetTouch_NCP() int32 {
	if m != nil {
		return m.Touch_NCP
	}
	return 0
}

func (m *EmployeeHealthInfo) GetBeenToHuBei() int32 {
	if m != nil {
		return m.BeenToHuBei
	}
	return 0
}

func (m *EmployeeHealthInfo) GetReturnChengDuTime() int64 {
	if m != nil {
		return m.ReturnChengDuTime
	}
	return 0
}

func (m *EmployeeHealthInfo) GetReturnChengDuDetailedAddress() string {
	if m != nil {
		return m.ReturnChengDuDetailedAddress
	}
	return ""
}

func (m *EmployeeHealthInfo) GetReturnChengDuTransport() string {
	if m != nil {
		return m.ReturnChengDuTransport
	}
	return ""
}

func (m *EmployeeHealthInfo) GetTransportDetailInfo() string {
	if m != nil {
		return m.TransportDetailInfo
	}
	return ""
}

func (m *EmployeeHealthInfo) GetTouchHuBeiPeopleWithin14Days() int32 {
	if m != nil {
		return m.TouchHuBeiPeopleWithin14Days
	}
	return 0
}

func (m *EmployeeHealthInfo) GetLastTouchTime() int64 {
	if m != nil {
		return m.LastTouchTime
	}
	return 0
}

func (m *EmployeeHealthInfo) GetFromChengDuOutside() int32 {
	if m != nil {
		return m.FromChengDuOutside
	}
	return 0
}

func (m *EmployeeHealthInfo) GetThisPlaceTime() int64 {
	if m != nil {
		return m.ThisPlaceTime
	}
	return 0
}

func (m *EmployeeHealthInfo) GetReturnThisPlaceTransport() string {
	if m != nil {
		return m.ReturnThisPlaceTransport
	}
	return ""
}

func (m *EmployeeHealthInfo) GetProfession() string {
	if m != nil {
		return m.Profession
	}
	return ""
}

func (m *EmployeeHealthInfo) GetLifeTrace() string {
	if m != nil {
		return m.LifeTrace
	}
	return ""
}

func (m *EmployeeHealthInfo) GetSignImage() string {
	if m != nil {
		return m.SignImage
	}
	return ""
}

func (m *EmployeeHealthInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EmployeeHealthInfo) GetEmployeeId() int64 {
	if m != nil {
		return m.EmployeeId
	}
	return 0
}

func (m *EmployeeHealthInfo) GetCompanyId() int64 {
	if m != nil {
		return m.CompanyId
	}
	return 0
}

func (m *EmployeeHealthInfo) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *EmployeeHealthInfo) GetComeFromWenjiang() string {
	if m != nil {
		return m.ComeFromWenjiang
	}
	return ""
}

func (m *EmployeeHealthInfo) GetComeFromAddress() string {
	if m != nil {
		return m.ComeFromAddress
	}
	return ""
}

func (m *EmployeeHealthInfo) GetComeFromDetailedAddress() string {
	if m != nil {
		return m.ComeFromDetailedAddress
	}
	return ""
}

type AddEmployeeHealthRecordReq struct {
	Base *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// 员工id
	EmployeeId int64 `protobuf:"varint,2,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	// 所在部门
	Department string `protobuf:"bytes,3,opt,name=department,proto3" json:"department,omitempty"`
	// 今日体温（摄氏度）
	Temperature float32 `protobuf:"fixed32,4,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// 是否出现发热、干咳、乏力、呼吸困难等症状 1:是，2否
	EpidemicSymptom int32 `protobuf:"varint,5,opt,name=epidemic_symptom,json=epidemicSymptom,proto3" json:"epidemic_symptom,omitempty"`
	// 检测结果
	DetectionResult string `protobuf:"bytes,6,opt,name=detection_result,json=detectionResult,proto3" json:"detection_result,omitempty"`
	// 检测人
	DetectionOperator string `protobuf:"bytes,7,opt,name=detection_operator,json=detectionOperator,proto3" json:"detection_operator,omitempty"`
	// 员工所属公司id
	CompanyId int64 `protobuf:"varint,8,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (m *AddEmployeeHealthRecordReq) Reset()         { *m = AddEmployeeHealthRecordReq{} }
func (m *AddEmployeeHealthRecordReq) String() string { return proto.CompactTextString(m) }
func (*AddEmployeeHealthRecordReq) ProtoMessage()    {}
func (*AddEmployeeHealthRecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{24}
}
func (m *AddEmployeeHealthRecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddEmployeeHealthRecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddEmployeeHealthRecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddEmployeeHealthRecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddEmployeeHealthRecordReq.Merge(m, src)
}
func (m *AddEmployeeHealthRecordReq) XXX_Size() int {
	return m.Size()
}
func (m *AddEmployeeHealthRecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddEmployeeHealthRecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddEmployeeHealthRecordReq proto.InternalMessageInfo

func (m *AddEmployeeHealthRecordReq) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *AddEmployeeHealthRecordReq) GetEmployeeId() int64 {
	if m != nil {
		return m.EmployeeId
	}
	return 0
}

func (m *AddEmployeeHealthRecordReq) GetDepartment() string {
	if m != nil {
		return m.Department
	}
	return ""
}

func (m *AddEmployeeHealthRecordReq) GetTemperature() float32 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *AddEmployeeHealthRecordReq) GetEpidemicSymptom() int32 {
	if m != nil {
		return m.EpidemicSymptom
	}
	return 0
}

func (m *AddEmployeeHealthRecordReq) GetDetectionResult() string {
	if m != nil {
		return m.DetectionResult
	}
	return ""
}

func (m *AddEmployeeHealthRecordReq) GetDetectionOperator() string {
	if m != nil {
		return m.DetectionOperator
	}
	return ""
}

func (m *AddEmployeeHealthRecordReq) GetCompanyId() int64 {
	if m != nil {
		return m.CompanyId
	}
	return 0
}

type AddEmployeeHealthRecordRes struct {
	Base *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (m *AddEmployeeHealthRecordRes) Reset()         { *m = AddEmployeeHealthRecordRes{} }
func (m *AddEmployeeHealthRecordRes) String() string { return proto.CompactTextString(m) }
func (*AddEmployeeHealthRecordRes) ProtoMessage()    {}
func (*AddEmployeeHealthRecordRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{25}
}
func (m *AddEmployeeHealthRecordRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddEmployeeHealthRecordRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddEmployeeHealthRecordRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddEmployeeHealthRecordRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddEmployeeHealthRecordRes.Merge(m, src)
}
func (m *AddEmployeeHealthRecordRes) XXX_Size() int {
	return m.Size()
}
func (m *AddEmployeeHealthRecordRes) XXX_DiscardUnknown() {
	xxx_messageInfo_AddEmployeeHealthRecordRes.DiscardUnknown(m)
}

var xxx_messageInfo_AddEmployeeHealthRecordRes proto.InternalMessageInfo

func (m *AddEmployeeHealthRecordRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

type GetEmployeeHealthRecordListByCompanyIdReq struct {
	Base *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// 公司id
	CompanyId int64 `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (m *GetEmployeeHealthRecordListByCompanyIdReq) Reset() {
	*m = GetEmployeeHealthRecordListByCompanyIdReq{}
}
func (m *GetEmployeeHealthRecordListByCompanyIdReq) String() string { return proto.CompactTextString(m) }
func (*GetEmployeeHealthRecordListByCompanyIdReq) ProtoMessage()    {}
func (*GetEmployeeHealthRecordListByCompanyIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{26}
}
func (m *GetEmployeeHealthRecordListByCompanyIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEmployeeHealthRecordListByCompanyIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEmployeeHealthRecordListByCompanyIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEmployeeHealthRecordListByCompanyIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEmployeeHealthRecordListByCompanyIdReq.Merge(m, src)
}
func (m *GetEmployeeHealthRecordListByCompanyIdReq) XXX_Size() int {
	return m.Size()
}
func (m *GetEmployeeHealthRecordListByCompanyIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEmployeeHealthRecordListByCompanyIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetEmployeeHealthRecordListByCompanyIdReq proto.InternalMessageInfo

func (m *GetEmployeeHealthRecordListByCompanyIdReq) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetEmployeeHealthRecordListByCompanyIdReq) GetCompanyId() int64 {
	if m != nil {
		return m.CompanyId
	}
	return 0
}

type GetEmployeeHealthRecordListByCompanyIdRes struct {
	Base                  *base.BaseRes           `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	EmployeeHealthRecords []*EmployeeHealthRecord `protobuf:"bytes,2,rep,name=employee_health_records,json=employeeHealthRecords,proto3" json:"employee_health_records,omitempty"`
}

func (m *GetEmployeeHealthRecordListByCompanyIdRes) Reset() {
	*m = GetEmployeeHealthRecordListByCompanyIdRes{}
}
func (m *GetEmployeeHealthRecordListByCompanyIdRes) String() string { return proto.CompactTextString(m) }
func (*GetEmployeeHealthRecordListByCompanyIdRes) ProtoMessage()    {}
func (*GetEmployeeHealthRecordListByCompanyIdRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{27}
}
func (m *GetEmployeeHealthRecordListByCompanyIdRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEmployeeHealthRecordListByCompanyIdRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEmployeeHealthRecordListByCompanyIdRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEmployeeHealthRecordListByCompanyIdRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEmployeeHealthRecordListByCompanyIdRes.Merge(m, src)
}
func (m *GetEmployeeHealthRecordListByCompanyIdRes) XXX_Size() int {
	return m.Size()
}
func (m *GetEmployeeHealthRecordListByCompanyIdRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEmployeeHealthRecordListByCompanyIdRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetEmployeeHealthRecordListByCompanyIdRes proto.InternalMessageInfo

func (m *GetEmployeeHealthRecordListByCompanyIdRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetEmployeeHealthRecordListByCompanyIdRes) GetEmployeeHealthRecords() []*EmployeeHealthRecord {
	if m != nil {
		return m.EmployeeHealthRecords
	}
	return nil
}

type EmployeeHealthRecord struct {
	// 员工id
	EmployeeId int64 `protobuf:"varint,2,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	// 所在部门
	Department string `protobuf:"bytes,3,opt,name=department,proto3" json:"department,omitempty"`
	// 今日体温（摄氏度）
	Temperature float32 `protobuf:"fixed32,4,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// 是否出现发热、干咳、乏力、呼吸困难等症状 1:是，2否
	EpidemicSymptom int32 `protobuf:"varint,5,opt,name=epidemic_symptom,json=epidemicSymptom,proto3" json:"epidemic_symptom,omitempty"`
	// 检测结果
	DetectionResult string `protobuf:"bytes,6,opt,name=detection_result,json=detectionResult,proto3" json:"detection_result,omitempty"`
	// 检测人
	DetectionOperator string `protobuf:"bytes,7,opt,name=detection_operator,json=detectionOperator,proto3" json:"detection_operator,omitempty"`
	// 员工健康台账记录id
	Id int64 `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
	// 创建时间
	CreatedTime int64 `protobuf:"varint,9,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// 员工所属公司id
	CompanyId   int64 `protobuf:"varint,10,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	UpdatedTime int64 `protobuf:"varint,11,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
}

func (m *EmployeeHealthRecord) Reset()         { *m = EmployeeHealthRecord{} }
func (m *EmployeeHealthRecord) String() string { return proto.CompactTextString(m) }
func (*EmployeeHealthRecord) ProtoMessage()    {}
func (*EmployeeHealthRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{28}
}
func (m *EmployeeHealthRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmployeeHealthRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmployeeHealthRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmployeeHealthRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmployeeHealthRecord.Merge(m, src)
}
func (m *EmployeeHealthRecord) XXX_Size() int {
	return m.Size()
}
func (m *EmployeeHealthRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_EmployeeHealthRecord.DiscardUnknown(m)
}

var xxx_messageInfo_EmployeeHealthRecord proto.InternalMessageInfo

func (m *EmployeeHealthRecord) GetEmployeeId() int64 {
	if m != nil {
		return m.EmployeeId
	}
	return 0
}

func (m *EmployeeHealthRecord) GetDepartment() string {
	if m != nil {
		return m.Department
	}
	return ""
}

func (m *EmployeeHealthRecord) GetTemperature() float32 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *EmployeeHealthRecord) GetEpidemicSymptom() int32 {
	if m != nil {
		return m.EpidemicSymptom
	}
	return 0
}

func (m *EmployeeHealthRecord) GetDetectionResult() string {
	if m != nil {
		return m.DetectionResult
	}
	return ""
}

func (m *EmployeeHealthRecord) GetDetectionOperator() string {
	if m != nil {
		return m.DetectionOperator
	}
	return ""
}

func (m *EmployeeHealthRecord) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EmployeeHealthRecord) GetCreatedTime() int64 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *EmployeeHealthRecord) GetCompanyId() int64 {
	if m != nil {
		return m.CompanyId
	}
	return 0
}

func (m *EmployeeHealthRecord) GetUpdatedTime() int64 {
	if m != nil {
		return m.UpdatedTime
	}
	return 0
}

type GetEmployeeHealthRecordListReq struct {
	Base *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// 员工id
	EmployeeId int64 `protobuf:"varint,2,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	// 页数
	Page int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// 每页显示数量
	Limit int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *GetEmployeeHealthRecordListReq) Reset()         { *m = GetEmployeeHealthRecordListReq{} }
func (m *GetEmployeeHealthRecordListReq) String() string { return proto.CompactTextString(m) }
func (*GetEmployeeHealthRecordListReq) ProtoMessage()    {}
func (*GetEmployeeHealthRecordListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{29}
}
func (m *GetEmployeeHealthRecordListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEmployeeHealthRecordListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEmployeeHealthRecordListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEmployeeHealthRecordListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEmployeeHealthRecordListReq.Merge(m, src)
}
func (m *GetEmployeeHealthRecordListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetEmployeeHealthRecordListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEmployeeHealthRecordListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetEmployeeHealthRecordListReq proto.InternalMessageInfo

func (m *GetEmployeeHealthRecordListReq) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetEmployeeHealthRecordListReq) GetEmployeeId() int64 {
	if m != nil {
		return m.EmployeeId
	}
	return 0
}

func (m *GetEmployeeHealthRecordListReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetEmployeeHealthRecordListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetEmployeeHealthRecordListRes struct {
	Base                     *base.BaseRes                 `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	EmployeeHealthRecordList []*EmployeeHealthRecordListVo `protobuf:"bytes,2,rep,name=employee_health_record_list,json=employeeHealthRecordList,proto3" json:"employee_health_record_list,omitempty"`
	// 数据总数
	Total int32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *GetEmployeeHealthRecordListRes) Reset()         { *m = GetEmployeeHealthRecordListRes{} }
func (m *GetEmployeeHealthRecordListRes) String() string { return proto.CompactTextString(m) }
func (*GetEmployeeHealthRecordListRes) ProtoMessage()    {}
func (*GetEmployeeHealthRecordListRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{30}
}
func (m *GetEmployeeHealthRecordListRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEmployeeHealthRecordListRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEmployeeHealthRecordListRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEmployeeHealthRecordListRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEmployeeHealthRecordListRes.Merge(m, src)
}
func (m *GetEmployeeHealthRecordListRes) XXX_Size() int {
	return m.Size()
}
func (m *GetEmployeeHealthRecordListRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEmployeeHealthRecordListRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetEmployeeHealthRecordListRes proto.InternalMessageInfo

func (m *GetEmployeeHealthRecordListRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetEmployeeHealthRecordListRes) GetEmployeeHealthRecordList() []*EmployeeHealthRecordListVo {
	if m != nil {
		return m.EmployeeHealthRecordList
	}
	return nil
}

func (m *GetEmployeeHealthRecordListRes) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type EmployeeHealthRecordListVo struct {
	// 员工id
	EmployeeId int64 `protobuf:"varint,2,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	// 所在部门
	Department string `protobuf:"bytes,3,opt,name=department,proto3" json:"department,omitempty"`
	// 今日体温（摄氏度）
	Temperature float32 `protobuf:"fixed32,4,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// 是否出现发热、干咳、乏力、呼吸困难等症状 1:是，2否
	EpidemicSymptom int32 `protobuf:"varint,5,opt,name=epidemic_symptom,json=epidemicSymptom,proto3" json:"epidemic_symptom,omitempty"`
	// 检测结果
	DetectionResult string `protobuf:"bytes,6,opt,name=detection_result,json=detectionResult,proto3" json:"detection_result,omitempty"`
	// 检测人
	DetectionOperator string `protobuf:"bytes,7,opt,name=detection_operator,json=detectionOperator,proto3" json:"detection_operator,omitempty"`
	// 员工健康台账记录id
	Id int64 `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
	// 创建时间
	CreatedTime int64 `protobuf:"varint,9,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// 最近更新时间
	UpdatedTime int64 `protobuf:"varint,10,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
}

func (m *EmployeeHealthRecordListVo) Reset()         { *m = EmployeeHealthRecordListVo{} }
func (m *EmployeeHealthRecordListVo) String() string { return proto.CompactTextString(m) }
func (*EmployeeHealthRecordListVo) ProtoMessage()    {}
func (*EmployeeHealthRecordListVo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a064847644c111e, []int{31}
}
func (m *EmployeeHealthRecordListVo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmployeeHealthRecordListVo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmployeeHealthRecordListVo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmployeeHealthRecordListVo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmployeeHealthRecordListVo.Merge(m, src)
}
func (m *EmployeeHealthRecordListVo) XXX_Size() int {
	return m.Size()
}
func (m *EmployeeHealthRecordListVo) XXX_DiscardUnknown() {
	xxx_messageInfo_EmployeeHealthRecordListVo.DiscardUnknown(m)
}

var xxx_messageInfo_EmployeeHealthRecordListVo proto.InternalMessageInfo

func (m *EmployeeHealthRecordListVo) GetEmployeeId() int64 {
	if m != nil {
		return m.EmployeeId
	}
	return 0
}

func (m *EmployeeHealthRecordListVo) GetDepartment() string {
	if m != nil {
		return m.Department
	}
	return ""
}

func (m *EmployeeHealthRecordListVo) GetTemperature() float32 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func (m *EmployeeHealthRecordListVo) GetEpidemicSymptom() int32 {
	if m != nil {
		return m.EpidemicSymptom
	}
	return 0
}

func (m *EmployeeHealthRecordListVo) GetDetectionResult() string {
	if m != nil {
		return m.DetectionResult
	}
	return ""
}

func (m *EmployeeHealthRecordListVo) GetDetectionOperator() string {
	if m != nil {
		return m.DetectionOperator
	}
	return ""
}

func (m *EmployeeHealthRecordListVo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EmployeeHealthRecordListVo) GetCreatedTime() int64 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *EmployeeHealthRecordListVo) GetUpdatedTime() int64 {
	if m != nil {
		return m.UpdatedTime
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryEmployInfoByUserReq)(nil), "apiemployee.QueryEmployInfoByUserReq")
	proto.RegisterType((*DeleteEmployInfoReq)(nil), "apiemployee.DeleteEmployInfoReq")
	proto.RegisterType((*DeleteEmployInfoRes)(nil), "apiemployee.DeleteEmployInfoRes")
	proto.RegisterType((*QueryEmployInfoByUserMode)(nil), "apiemployee.QueryEmployInfoByUserMode")
	proto.RegisterType((*QueryEmployInfoByUserRes)(nil), "apiemployee.QueryEmployInfoByUserRes")
	proto.RegisterType((*GetQiniuTokenReq)(nil), "apiemployee.GetQiniuTokenReq")
	proto.RegisterType((*GetQiniuTokenRes)(nil), "apiemployee.GetQiniuTokenRes")
	proto.RegisterType((*WebLoginReq)(nil), "apiemployee.WebLoginReq")
	proto.RegisterType((*WebLoginInfo)(nil), "apiemployee.WebLoginInfo")
	proto.RegisterType((*WebLoginRes)(nil), "apiemployee.WebLoginRes")
	proto.RegisterType((*AddEmployeeInfoReq)(nil), "apiemployee.AddEmployeeInfoReq")
	proto.RegisterType((*AddEmployeeInfoRes)(nil), "apiemployee.AddEmployeeInfoRes")
	proto.RegisterType((*UpdateEmployeeInfoReq)(nil), "apiemployee.UpdateEmployeeInfoReq")
	proto.RegisterType((*UpdateEmployeeInfoRes)(nil), "apiemployee.UpdateEmployeeInfoRes")
	proto.RegisterType((*GetEmployeeInfoReq)(nil), "apiemployee.GetEmployeeInfoReq")
	proto.RegisterType((*GetEmployeeInfoRes)(nil), "apiemployee.GetEmployeeInfoRes")
	proto.RegisterType((*EmployeeInfo)(nil), "apiemployee.EmployeeInfo")
	proto.RegisterType((*AddEmployeeHealthInfoReq)(nil), "apiemployee.AddEmployeeHealthInfoReq")
	proto.RegisterType((*AddEmployeeHealthInfoRes)(nil), "apiemployee.AddEmployeeHealthInfoRes")
	proto.RegisterType((*UpdateEmployeeHealthInfoReq)(nil), "apiemployee.UpdateEmployeeHealthInfoReq")
	proto.RegisterType((*UpdateEmployeeHealthInfoRes)(nil), "apiemployee.UpdateEmployeeHealthInfoRes")
	proto.RegisterType((*GetEmployeeHealthInfoReq)(nil), "apiemployee.GetEmployeeHealthInfoReq")
	proto.RegisterType((*GetEmployeeHealthInfoRes)(nil), "apiemployee.GetEmployeeHealthInfoRes")
	proto.RegisterType((*EmployeeHealthInfo)(nil), "apiemployee.EmployeeHealthInfo")
	proto.RegisterType((*AddEmployeeHealthRecordReq)(nil), "apiemployee.AddEmployeeHealthRecordReq")
	proto.RegisterType((*AddEmployeeHealthRecordRes)(nil), "apiemployee.AddEmployeeHealthRecordRes")
	proto.RegisterType((*GetEmployeeHealthRecordListByCompanyIdReq)(nil), "apiemployee.GetEmployeeHealthRecordListByCompanyIdReq")
	proto.RegisterType((*GetEmployeeHealthRecordListByCompanyIdRes)(nil), "apiemployee.GetEmployeeHealthRecordListByCompanyIdRes")
	proto.RegisterType((*EmployeeHealthRecord)(nil), "apiemployee.EmployeeHealthRecord")
	proto.RegisterType((*GetEmployeeHealthRecordListReq)(nil), "apiemployee.GetEmployeeHealthRecordListReq")
	proto.RegisterType((*GetEmployeeHealthRecordListRes)(nil), "apiemployee.GetEmployeeHealthRecordListRes")
	proto.RegisterType((*EmployeeHealthRecordListVo)(nil), "apiemployee.EmployeeHealthRecordListVo")
}

func init() { proto.RegisterFile("apiemployee.proto", fileDescriptor_7a064847644c111e) }

var fileDescriptor_7a064847644c111e = []byte{
	// 2482 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5b, 0xcf, 0x6f, 0x1b, 0xc7,
	0xf5, 0x37, 0x29, 0x8a, 0x22, 0x1f, 0xf5, 0x73, 0x24, 0x8a, 0x6b, 0xca, 0xa6, 0xa9, 0x4d, 0x6c,
	0xcb, 0x76, 0x2c, 0x7f, 0xa3, 0x6f, 0x50, 0xb4, 0x69, 0x9b, 0x36, 0x96, 0x12, 0x9b, 0x68, 0xac,
	0xc8, 0x6b, 0x25, 0x46, 0x81, 0xa0, 0x8b, 0x15, 0x67, 0x24, 0x6d, 0xcd, 0xfd, 0xe1, 0x9d, 0x65,
	0x04, 0x9e, 0x8b, 0x9e, 0x0a, 0xb4, 0x39, 0xf6, 0x52, 0xf4, 0xdc, 0x63, 0x6f, 0xbd, 0xf6, 0x52,
	0x14, 0xbd, 0x34, 0xc7, 0xa2, 0xa7, 0xc2, 0xfe, 0x13, 0x7a, 0xe9, 0xb1, 0x98, 0x99, 0xfd, 0xfd,
	0x83, 0x5c, 0xca, 0x39, 0xb4, 0x28, 0x2f, 0x02, 0xf7, 0xcd, 0x9b, 0x37, 0x6f, 0xdf, 0xbc, 0xf9,
	0xcc, 0x67, 0xf6, 0x8d, 0x60, 0x4d, 0xb3, 0x75, 0x62, 0xd8, 0x03, 0x6b, 0x44, 0xc8, 0xae, 0xed,
	0x58, 0xae, 0x85, 0x1a, 0x11, 0x51, 0xfb, 0x9a, 0x31, 0xa2, 0xc4, 0xf9, 0x92, 0x38, 0x0f, 0x34,
	0x5b, 0x7f, 0x70, 0xa2, 0x51, 0xc2, 0xff, 0x08, 0x55, 0xf9, 0x0f, 0x65, 0x90, 0x9e, 0x0e, 0x89,
	0x33, 0xfa, 0x88, 0xeb, 0xf7, 0xcc, 0x53, 0xeb, 0xe1, 0xe8, 0x33, 0x4a, 0x1c, 0x85, 0xbc, 0x44,
	0x1d, 0xa8, 0x9c, 0x13, 0x0d, 0x4b, 0xa5, 0x6e, 0x69, 0xa7, 0xb1, 0x07, 0xbb, 0xbc, 0xdf, 0x63,
	0xa2, 0x61, 0x85, 0xcb, 0xd1, 0x16, 0xd4, 0xa9, 0xeb, 0x10, 0xe2, 0xaa, 0x3a, 0x96, 0xca, 0xdd,
	0xd2, 0xce, 0x9c, 0x52, 0x13, 0x82, 0x1e, 0x46, 0xdb, 0xb0, 0xd8, 0xb7, 0x0c, 0x63, 0x68, 0xea,
	0xee, 0x88, 0xb5, 0xcf, 0xf1, 0xf6, 0x46, 0x20, 0xeb, 0xf1, 0xfe, 0x43, 0x4a, 0x1c, 0xd5, 0x1d,
	0xd9, 0x44, 0xaa, 0x74, 0x4b, 0x3b, 0xf3, 0x4a, 0x8d, 0x09, 0x8e, 0x47, 0x36, 0x41, 0x6f, 0xc3,
	0xf2, 0x40, 0xa3, 0xae, 0xea, 0x90, 0xbe, 0xe5, 0x60, 0x66, 0x61, 0x9e, 0x5b, 0x58, 0x64, 0x52,
	0x85, 0x0b, 0x7b, 0x18, 0x21, 0xa8, 0xd8, 0xda, 0x19, 0x91, 0xaa, 0xbc, 0x37, 0xff, 0x8d, 0x36,
	0x60, 0x7e, 0xa0, 0x1b, 0xba, 0x2b, 0x2d, 0x70, 0xa1, 0x78, 0x60, 0xd2, 0x97, 0xec, 0x45, 0xa5,
	0x5a, 0xb7, 0xb4, 0x53, 0x57, 0xc4, 0x03, 0xda, 0x84, 0xaa, 0x86, 0xfb, 0x16, 0x26, 0x52, 0x9d,
	0x5b, 0xf7, 0x9e, 0xb8, 0xf7, 0x0e, 0xd1, 0x5c, 0x82, 0x55, 0x57, 0x37, 0x88, 0x04, 0x9e, 0xf7,
	0x42, 0x76, 0xac, 0x1b, 0x44, 0x3e, 0x84, 0xf5, 0x03, 0x32, 0x20, 0x2e, 0x09, 0x43, 0x57, 0x24,
	0x68, 0x2d, 0x58, 0x20, 0x86, 0xad, 0xea, 0x98, 0xf2, 0x90, 0xd5, 0x95, 0x2a, 0x31, 0xec, 0x1e,
	0xa6, 0xf2, 0xb7, 0xb3, 0xec, 0x51, 0xb4, 0x0d, 0x15, 0x66, 0xc2, 0xb3, 0xb7, 0x24, 0xec, 0x3d,
	0xd4, 0x28, 0x51, 0x08, 0x55, 0x78, 0x93, 0xfc, 0xfb, 0x15, 0xb8, 0x9a, 0x39, 0x89, 0x4f, 0xd8,
	0xab, 0x20, 0xa8, 0x98, 0x9a, 0x21, 0x0c, 0xd4, 0x15, 0xfe, 0x9b, 0x05, 0xc3, 0x3e, 0xb7, 0x4c,
	0xe2, 0xb9, 0x20, 0x1e, 0x58, 0x30, 0xce, 0x88, 0x89, 0x89, 0xc3, 0x27, 0x6b, 0x5e, 0xf1, 0x9e,
	0xbc, 0xa9, 0xb4, 0x35, 0x73, 0xa4, 0x72, 0x4b, 0x15, 0xde, 0xa9, 0xe1, 0xc9, 0x0e, 0x99, 0xc1,
	0xeb, 0x00, 0xbe, 0x4a, 0x30, 0x53, 0x75, 0x4f, 0xd2, 0xc3, 0x6c, 0x32, 0x75, 0xac, 0xf6, 0x35,
	0x07, 0xab, 0xe6, 0xd0, 0x38, 0x21, 0x0e, 0x9f, 0xb0, 0xba, 0xb2, 0xa8, 0xe3, 0x7d, 0xcd, 0xc1,
	0x87, 0x5c, 0x86, 0xee, 0xc1, 0x9a, 0x6f, 0x24, 0x48, 0x13, 0x3e, 0x89, 0x75, 0x65, 0xd5, 0x6b,
	0xd8, 0xf7, 0xe5, 0xe8, 0xff, 0x60, 0x23, 0xa5, 0xcc, 0xc6, 0xae, 0xf1, 0xb1, 0x51, 0x52, 0xbf,
	0x87, 0xd1, 0xf7, 0xa0, 0xed, 0x10, 0xaa, 0x63, 0x62, 0xf6, 0x89, 0x8a, 0x89, 0xab, 0xe9, 0x03,
	0x82, 0x55, 0x0d, 0x63, 0x87, 0x50, 0xca, 0xe7, 0xbf, 0xae, 0x48, 0x81, 0xc6, 0x81, 0xa7, 0xf0,
	0xa1, 0x68, 0x47, 0x0f, 0x60, 0x3d, 0xec, 0x1d, 0xba, 0x07, 0xbc, 0x1b, 0x0a, 0x9a, 0x42, 0x07,
	0xdf, 0x83, 0xcd, 0x8c, 0x0e, 0xcc, 0xc5, 0x06, 0x77, 0x71, 0x23, 0xdd, 0xc7, 0x5b, 0x36, 0xd1,
	0xc4, 0x5b, 0x4c, 0x25, 0x1e, 0xba, 0x01, 0x8d, 0xa1, 0x8d, 0x35, 0x97, 0x08, 0x8d, 0x25, 0xae,
	0x01, 0x42, 0xc4, 0x15, 0x3a, 0x00, 0x98, 0xd8, 0x9a, 0xe3, 0x1a, 0xc4, 0x74, 0xa5, 0x65, 0xee,
	0x61, 0x44, 0x82, 0xba, 0xd0, 0x70, 0x89, 0x61, 0x13, 0x47, 0x73, 0x87, 0x0e, 0x91, 0x56, 0xba,
	0xa5, 0x9d, 0xb2, 0x12, 0x15, 0xa1, 0x3b, 0xb0, 0x4a, 0x6c, 0x1d, 0x13, 0x43, 0xef, 0xab, 0x74,
	0x64, 0xd8, 0xae, 0x65, 0x48, 0xab, 0x3c, 0x27, 0x56, 0x7c, 0xf9, 0x33, 0x21, 0x66, 0xaa, 0x98,
	0xb8, 0xa4, 0xef, 0xea, 0x96, 0xa9, 0x3a, 0x84, 0x0e, 0x07, 0xae, 0xb4, 0xc6, 0x87, 0x5c, 0x09,
	0xe4, 0x0a, 0x17, 0xa3, 0xfb, 0x80, 0x42, 0x55, 0x8b, 0x0f, 0x66, 0x39, 0x12, 0xe2, 0xca, 0x6b,
	0x41, 0xcb, 0xa7, 0x5e, 0x03, 0xda, 0x83, 0xa6, 0x37, 0xb6, 0x7a, 0xa1, 0xbb, 0xe7, 0xba, 0xf9,
	0xee, 0x7b, 0x2a, 0xd6, 0x46, 0x54, 0x5a, 0xe7, 0x3d, 0xd6, 0xbd, 0xc6, 0xe7, 0x5e, 0xdb, 0x81,
	0x36, 0xa2, 0xa8, 0x03, 0x8d, 0x53, 0xcb, 0x31, 0xd4, 0xf3, 0xa1, 0x7a, 0x42, 0x74, 0x69, 0x83,
	0xfb, 0x5c, 0x67, 0xa2, 0xc7, 0xc3, 0x87, 0x44, 0x67, 0x90, 0xe3, 0x5a, 0xc3, 0xfe, 0xb9, 0x7a,
	0xb8, 0x7f, 0x24, 0x35, 0x05, 0xe4, 0x70, 0xc1, 0xe1, 0xfe, 0x11, 0x7a, 0x0b, 0x96, 0x4f, 0x08,
	0x31, 0x55, 0xd7, 0xf2, 0xfb, 0x6f, 0x72, 0x8d, 0x06, 0x93, 0x1e, 0x5b, 0xc2, 0xc2, 0x03, 0xd8,
	0x70, 0x88, 0x3b, 0x74, 0x4c, 0xb5, 0x7f, 0x4e, 0xcc, 0x33, 0x15, 0x0f, 0xc5, 0x34, 0xb4, 0xf8,
	0x34, 0xac, 0x89, 0xb6, 0x7d, 0xd6, 0x74, 0x30, 0xe4, 0xb3, 0xf1, 0x31, 0x74, 0x93, 0x1d, 0x52,
	0xc9, 0x27, 0xf1, 0x37, 0xba, 0x16, 0xeb, 0x9c, 0x4c, 0xc0, 0xef, 0xc0, 0xd5, 0xd4, 0xc0, 0x8e,
	0x66, 0x52, 0xdb, 0x72, 0x5c, 0xe9, 0x2a, 0x37, 0xb0, 0x19, 0x1f, 0xdd, 0x6f, 0x65, 0x91, 0x0c,
	0x54, 0xbd, 0xc1, 0x55, 0xdd, 0x3c, 0xb5, 0xa4, 0xb6, 0x88, 0x64, 0xd0, 0x28, 0xc6, 0x64, 0x00,
	0x82, 0x1e, 0xc1, 0xb6, 0x88, 0x94, 0x08, 0x85, 0x6a, 0x13, 0xcb, 0x1e, 0x90, 0xc4, 0x4c, 0x6c,
	0xf1, 0xf8, 0x5c, 0xe3, 0x8a, 0x3c, 0x3c, 0x47, 0x5c, 0x2b, 0x36, 0x25, 0xb7, 0x60, 0x85, 0x03,
	0xb9, 0xb0, 0xc6, 0x63, 0x75, 0x8d, 0xc7, 0x6a, 0x89, 0x89, 0x8f, 0x99, 0x94, 0xc7, 0xe9, 0x5d,
	0x68, 0x9e, 0x3a, 0x96, 0x11, 0xbe, 0x9d, 0x35, 0x74, 0xd9, 0x02, 0x91, 0xae, 0xf3, 0x41, 0x10,
	0x6b, 0xf4, 0xde, 0xec, 0x53, 0xd1, 0xc2, 0x4c, 0xbb, 0xe7, 0x3a, 0x55, 0xed, 0x81, 0xd6, 0xf7,
	0x56, 0x43, 0x47, 0x98, 0x66, 0xe2, 0x23, 0x26, 0xe5, 0xa6, 0xbf, 0x0f, 0x5b, 0x5e, 0xe8, 0xa2,
	0xea, 0x41, 0xf0, 0x6e, 0xf8, 0x4b, 0x9f, 0xa9, 0x1c, 0x07, 0x3d, 0x83, 0xf0, 0x75, 0x00, 0x6c,
	0xc7, 0x3a, 0x25, 0x94, 0xea, 0x96, 0x29, 0x75, 0xc5, 0x7a, 0x0a, 0x25, 0x0c, 0xfc, 0x06, 0xfa,
	0x29, 0xb7, 0xd8, 0x27, 0xd2, 0x36, 0x6f, 0xaf, 0x33, 0xc9, 0x31, 0x13, 0xb0, 0x66, 0xaa, 0x9f,
	0x99, 0xaa, 0x6e, 0xb0, 0x9d, 0x4a, 0x16, 0xcd, 0x4c, 0xd2, 0x63, 0x02, 0xb6, 0x9c, 0xfd, 0xcd,
	0x9a, 0x81, 0xc3, 0x5b, 0x62, 0x39, 0xfb, 0xa2, 0x1e, 0xf6, 0x56, 0x58, 0x3c, 0x61, 0xde, 0x0e,
	0x56, 0x58, 0x2c, 0x47, 0xde, 0x01, 0x06, 0x7c, 0x44, 0xe5, 0x81, 0xbc, 0x20, 0xe6, 0x4f, 0x75,
	0xcd, 0x3c, 0x93, 0x6e, 0x06, 0x10, 0x4a, 0x3e, 0x76, 0x2c, 0xe3, 0xb9, 0x27, 0x47, 0x77, 0x39,
	0xde, 0x7a, 0xda, 0xbe, 0xe5, 0x5b, 0xc2, 0xb2, 0xaf, 0xec, 0x5b, 0xfe, 0x2e, 0xb4, 0x43, 0xdd,
	0x94, 0x3b, 0xb7, 0x79, 0xa7, 0x96, 0xdf, 0x29, 0x99, 0xba, 0xab, 0x30, 0xc7, 0x5e, 0x7d, 0x87,
	0x4f, 0x24, 0xfb, 0xc9, 0xde, 0xc9, 0x47, 0x6f, 0xdb, 0xb1, 0xbe, 0xd4, 0xcd, 0x3e, 0x91, 0xee,
	0x04, 0x23, 0x33, 0xf9, 0x91, 0x27, 0x46, 0xbb, 0xb0, 0x9e, 0x54, 0x65, 0x71, 0xba, 0x2b, 0xd6,
	0x5b, 0x42, 0x3b, 0x20, 0x1e, 0x62, 0x63, 0x60, 0x08, 0x7d, 0x2f, 0xb6, 0x5b, 0xed, 0x33, 0x68,
	0xbe, 0x05, 0x2b, 0x51, 0x15, 0x66, 0xee, 0x1d, 0x91, 0x37, 0x11, 0x2d, 0x11, 0x79, 0x5f, 0x0f,
	0xeb, 0xd4, 0x75, 0xf4, 0xbe, 0x2b, 0xdd, 0x8f, 0x79, 0x79, 0xe0, 0x89, 0xa3, 0x5e, 0xfa, 0xaa,
	0xcc, 0xec, 0x6e, 0xcc, 0x4b, 0x5f, 0xbb, 0x87, 0xe5, 0x5f, 0x95, 0x72, 0x89, 0x57, 0x91, 0x3d,
	0x1f, 0xbd, 0x0f, 0x15, 0xbe, 0x82, 0xcb, 0xdd, 0xb9, 0x9d, 0xc6, 0xde, 0xad, 0xdd, 0x28, 0x0b,
	0xcc, 0xe5, 0x02, 0x0a, 0xef, 0xc3, 0x76, 0x7f, 0xd7, 0x72, 0xb5, 0x81, 0xc7, 0xc9, 0xc4, 0x83,
	0xbc, 0x07, 0xab, 0x8f, 0x88, 0xfb, 0x54, 0x37, 0xf5, 0xe1, 0xb1, 0xf5, 0x82, 0x98, 0x05, 0xc8,
	0x8c, 0xfc, 0xa3, 0x54, 0x9f, 0x42, 0xce, 0x73, 0x07, 0x5e, 0x10, 0xd3, 0xa7, 0x1f, 0xfc, 0x41,
	0xfe, 0x02, 0x1a, 0xcf, 0xc9, 0xc9, 0x27, 0xd6, 0x99, 0x6e, 0x16, 0x64, 0x9f, 0x9c, 0x3d, 0x72,
	0x4a, 0x22, 0x0c, 0x71, 0xf6, 0xc8, 0xf9, 0xc8, 0x2a, 0xcc, 0xd9, 0x17, 0x82, 0x74, 0xd6, 0x15,
	0xf6, 0x53, 0xfe, 0x4b, 0x19, 0x16, 0x7d, 0xf3, 0x1c, 0xe0, 0x5a, 0xb0, 0xc0, 0xfb, 0xeb, 0xd8,
	0xa3, 0x46, 0x55, 0xf6, 0xd8, 0x9b, 0x60, 0xf8, 0x2a, 0xf0, 0xdf, 0x6a, 0x68, 0x9d, 0x5b, 0x39,
	0xba, 0x48, 0xd0, 0x61, 0xc1, 0x91, 0xf2, 0xe9, 0xf0, 0x7c, 0x90, 0x95, 0xd9, 0x74, 0xb8, 0x9a,
	0xa0, 0xc3, 0x21, 0x51, 0x5d, 0x18, 0x4b, 0x54, 0x6b, 0x99, 0x7c, 0x21, 0xba, 0x70, 0x04, 0xd1,
	0x05, 0x3b, 0x5c, 0x31, 0x2d, 0x58, 0xf0, 0x97, 0x81, 0xe0, 0xb9, 0xd5, 0xbe, 0xf0, 0xa8, 0x05,
	0x0b, 0x9a, 0x43, 0xb4, 0x90, 0xb3, 0x54, 0xd9, 0x63, 0x0f, 0xcb, 0x6a, 0x74, 0xaa, 0x0a, 0x4d,
	0xf9, 0xfd, 0x20, 0x5f, 0x99, 0xca, 0xd5, 0x58, 0xbe, 0x46, 0xa7, 0x45, 0xa4, 0xa8, 0xfc, 0x1b,
	0x00, 0xf4, 0x21, 0xc6, 0x1f, 0xf9, 0x28, 0x58, 0x90, 0x5c, 0xfb, 0x5c, 0xb7, 0x9c, 0xc5, 0x75,
	0xe7, 0xa2, 0x5c, 0x37, 0x0b, 0x80, 0x2a, 0x53, 0x01, 0xd0, 0x7c, 0x51, 0x00, 0xaa, 0x16, 0x02,
	0xa0, 0x85, 0xa2, 0x00, 0x54, 0x9b, 0x0a, 0x80, 0xea, 0x39, 0x00, 0x84, 0x6e, 0xc2, 0xb2, 0xaf,
	0x2f, 0x92, 0xd4, 0xa3, 0xb2, 0xbe, 0x07, 0xcf, 0xb8, 0xd0, 0xdb, 0x23, 0x22, 0x6a, 0x61, 0x32,
	0xac, 0xc4, 0x34, 0x7b, 0x38, 0x9b, 0xbf, 0x2f, 0x4e, 0xc9, 0xdf, 0x97, 0x72, 0xf9, 0x7b, 0xf2,
	0x18, 0xb2, 0x3c, 0xe9, 0x18, 0xb2, 0x32, 0xf9, 0x18, 0xb2, 0x9a, 0x71, 0x0c, 0x09, 0x8f, 0x41,
	0x6b, 0xb1, 0x63, 0x90, 0xb7, 0x8b, 0xa1, 0x70, 0x17, 0xbb, 0x0f, 0x21, 0xf1, 0x0f, 0xd3, 0x48,
	0xd0, 0xd3, 0xb5, 0xa0, 0x25, 0x48, 0xa4, 0x3d, 0x68, 0xa6, 0xd5, 0x99, 0xa3, 0x1b, 0xdc, 0xd1,
	0xf5, 0x54, 0x0f, 0x31, 0x4d, 0x91, 0x53, 0x04, 0x0b, 0x68, 0x53, 0x4c, 0x53, 0x78, 0x7a, 0x60,
	0xd1, 0xbc, 0x0b, 0x6b, 0x71, 0x35, 0x66, 0x76, 0x53, 0x4c, 0x53, 0x4c, 0xb3, 0x87, 0xe3, 0x5e,
	0x07, 0x69, 0xd5, 0x4a, 0x78, 0x1d, 0x24, 0x56, 0xcc, 0xeb, 0x68, 0x6a, 0x49, 0x09, 0xaf, 0x23,
	0xc9, 0x75, 0x07, 0x56, 0xc3, 0x3e, 0x5e, 0x7a, 0x09, 0x8a, 0x1a, 0x7a, 0xe3, 0x25, 0xd8, 0x6e,
	0xf4, 0x5c, 0x15, 0xa6, 0x58, 0xdb, 0xa7, 0xd3, 0x31, 0xed, 0x1e, 0xce, 0x3b, 0x87, 0x6d, 0x5d,
	0xe2, 0x1c, 0x76, 0x6d, 0xcc, 0x39, 0x6c, 0xfc, 0x61, 0xf1, 0xfa, 0x84, 0xc3, 0x62, 0x12, 0x95,
	0x3b, 0x13, 0x4f, 0x71, 0x37, 0x52, 0xa7, 0xb8, 0x2d, 0xa8, 0xeb, 0x54, 0xc5, 0xfc, 0x93, 0x00,
	0x27, 0x9d, 0xf3, 0x4a, 0x4d, 0xa7, 0xe2, 0x13, 0x81, 0xfc, 0x28, 0x03, 0x1e, 0x0b, 0xe1, 0xf0,
	0x32, 0x94, 0x83, 0x8f, 0x35, 0x65, 0x1d, 0xcb, 0x7f, 0xad, 0x43, 0xf3, 0x33, 0x3e, 0xe8, 0x0c,
	0x6b, 0x67, 0x58, 0x3b, 0xc3, 0xda, 0x19, 0xd6, 0xfe, 0xb7, 0x61, 0xad, 0x40, 0xb4, 0x4e, 0x80,
	0x68, 0xef, 0x67, 0x03, 0x5a, 0xa1, 0x2f, 0xa9, 0x07, 0x80, 0x1e, 0x11, 0x77, 0x5a, 0x24, 0x4c,
	0x62, 0xea, 0x45, 0x86, 0x95, 0x42, 0xe0, 0xfc, 0x01, 0x2c, 0x85, 0x9f, 0x02, 0xf2, 0xd8, 0x72,
	0xcc, 0xee, 0x22, 0x89, 0x3c, 0xc9, 0x3f, 0x07, 0x58, 0x8c, 0x36, 0xcf, 0x30, 0x7a, 0x86, 0xd1,
	0x33, 0x8c, 0x9e, 0x61, 0xf4, 0x7f, 0x1a, 0x46, 0x33, 0xf2, 0x2b, 0xb8, 0x70, 0x8c, 0xfc, 0x0a,
	0x51, 0x16, 0x3b, 0xee, 0x8e, 0x67, 0xc7, 0xdb, 0x09, 0x76, 0xfc, 0xaf, 0x05, 0x90, 0x22, 0xf4,
	0xf8, 0x31, 0xd1, 0x06, 0xee, 0x79, 0x51, 0x34, 0xcf, 0x2d, 0x3b, 0x94, 0x0b, 0x97, 0x1d, 0xe6,
	0xc6, 0x96, 0x1d, 0x2a, 0x13, 0xcb, 0x0e, 0xf3, 0xc5, 0xcb, 0x0e, 0xd5, 0x37, 0x29, 0x3b, 0x2c,
	0xbc, 0x69, 0xd9, 0xa1, 0x76, 0xb9, 0xb2, 0x43, 0xfd, 0x0d, 0xcb, 0x0e, 0x70, 0xb9, 0xb2, 0x43,
	0x63, 0xaa, 0xb2, 0xc3, 0xe2, 0x34, 0x65, 0x87, 0xa5, 0x4b, 0x94, 0x1d, 0x96, 0xa7, 0x2a, 0x3b,
	0xac, 0x4c, 0x28, 0x3b, 0xac, 0x8e, 0x2f, 0x3b, 0xac, 0x4d, 0x28, 0x3b, 0xa0, 0x54, 0xd9, 0x21,
	0xbe, 0x77, 0xac, 0x27, 0xf7, 0x8e, 0xec, 0x52, 0xc3, 0xc6, 0x34, 0xa5, 0x86, 0xe6, 0x65, 0x4a,
	0x0d, 0x9b, 0x63, 0x4b, 0x0d, 0xf2, 0x93, 0xdc, 0x95, 0x7f, 0xa9, 0xe3, 0xf1, 0x2f, 0x6a, 0xb0,
	0x15, 0x67, 0x93, 0x33, 0x30, 0x99, 0x81, 0xc9, 0x0c, 0x4c, 0x12, 0x60, 0x22, 0x96, 0x0d, 0x8a,
	0xee, 0xef, 0x51, 0x70, 0x59, 0x9f, 0x00, 0x2e, 0x1b, 0xc5, 0xc0, 0xa5, 0x39, 0x0d, 0xb8, 0x6c,
	0x5e, 0x06, 0x5c, 0x5a, 0xe3, 0xc1, 0xe5, 0x87, 0xe3, 0xc0, 0xa0, 0xd0, 0x01, 0xf3, 0x27, 0x20,
	0x45, 0x8e, 0x86, 0x71, 0x2c, 0x29, 0x00, 0x4f, 0x89, 0xb8, 0x96, 0x93, 0x71, 0x95, 0xbf, 0x2a,
	0xe5, 0x0e, 0x50, 0x08, 0xff, 0x9e, 0xc2, 0x46, 0x30, 0xc0, 0x39, 0xef, 0x1c, 0x3d, 0x88, 0xde,
	0xc8, 0x3c, 0x88, 0x46, 0x06, 0x41, 0x24, 0x25, 0x93, 0x7f, 0x56, 0x03, 0x94, 0x56, 0x9d, 0x21,
	0xe3, 0x0c, 0x19, 0x67, 0xc8, 0x38, 0x3d, 0x32, 0x26, 0x0e, 0x46, 0xcd, 0xd4, 0xc1, 0x28, 0x1b,
	0x3a, 0x37, 0xa7, 0x81, 0xce, 0xd6, 0x65, 0xa0, 0x53, 0x1a, 0x0f, 0x9d, 0x7f, 0x2a, 0x43, 0x3b,
	0x45, 0xcc, 0xc4, 0x35, 0xce, 0x6f, 0x08, 0xfb, 0x12, 0xd7, 0xde, 0xe6, 0x26, 0x5d, 0x7b, 0xab,
	0x14, 0xbb, 0xf6, 0x36, 0x5f, 0xfc, 0xda, 0x5b, 0x75, 0x9a, 0x6b, 0x6f, 0x0b, 0x79, 0xd7, 0xde,
	0xe2, 0x09, 0x50, 0x4b, 0x24, 0x80, 0xfc, 0x83, 0x31, 0x71, 0x2c, 0xb4, 0x05, 0x19, 0x70, 0x27,
	0xb5, 0x43, 0x08, 0x03, 0x9f, 0xe8, 0xd4, 0x7d, 0x38, 0xda, 0xf7, 0x87, 0x2a, 0x38, 0x2f, 0x71,
	0x7f, 0xcb, 0x49, 0x7f, 0x7f, 0x57, 0x2a, 0x3e, 0x5e, 0xa1, 0x2d, 0xea, 0xc7, 0xd0, 0x4a, 0x6e,
	0x51, 0xe2, 0x8e, 0x30, 0xf5, 0x2e, 0xc3, 0x6c, 0x8f, 0xd9, 0xa5, 0xbc, 0x48, 0x35, 0x49, 0x86,
	0x94, 0xca, 0xff, 0x2c, 0xc3, 0x46, 0x96, 0xfe, 0xff, 0x4c, 0xee, 0x09, 0xb4, 0xaa, 0x05, 0x68,
	0x95, 0xac, 0x63, 0xd6, 0xd3, 0x75, 0xcc, 0xf8, 0xf4, 0x43, 0x12, 0xaf, 0xb6, 0x61, 0x51, 0x80,
	0x13, 0x8e, 0x6e, 0x0e, 0x1e, 0x86, 0x89, 0x8b, 0xd4, 0xbf, 0x2c, 0x41, 0x67, 0x4c, 0x86, 0x7c,
	0x53, 0xf0, 0xe0, 0x5f, 0x15, 0x9f, 0xcb, 0xba, 0x2a, 0x5e, 0x89, 0x5c, 0x15, 0x97, 0xff, 0x38,
	0xc9, 0xa1, 0x42, 0x79, 0x7a, 0x0a, 0x5b, 0xd9, 0x79, 0xaa, 0x0e, 0x74, 0xea, 0x7a, 0xb9, 0x7a,
	0x7b, 0x62, 0xae, 0xb2, 0x11, 0x3f, 0xb7, 0x14, 0x89, 0xe4, 0xb4, 0xc5, 0x6f, 0x73, 0xcd, 0xfb,
	0xb7, 0xb9, 0xfe, 0x5e, 0x86, 0x76, 0xbe, 0xb9, 0x59, 0x42, 0xe7, 0x27, 0x74, 0x32, 0x63, 0x21,
	0x95, 0xb1, 0x7b, 0xbf, 0x05, 0xa8, 0xf9, 0xc1, 0x45, 0x1f, 0x40, 0xcd, 0xbf, 0xc0, 0x84, 0xa4,
	0xcc, 0x7b, 0x4d, 0x0a, 0x79, 0xd9, 0xce, 0x6b, 0xa1, 0xe8, 0x19, 0xac, 0x24, 0x4a, 0xf9, 0x28,
	0xce, 0xb3, 0xd3, 0xf7, 0xa0, 0xda, 0x13, 0x14, 0x28, 0xfa, 0x02, 0x50, 0xba, 0x08, 0x86, 0xe4,
	0x58, 0xb7, 0xcc, 0xb2, 0x7f, 0x7b, 0xb2, 0x0e, 0x77, 0x39, 0x51, 0xe0, 0x4a, 0xb8, 0x9c, 0x2e,
	0xa2, 0xb5, 0x27, 0x28, 0x50, 0x44, 0xa0, 0x99, 0xf9, 0xe5, 0x06, 0xdd, 0xcc, 0x7b, 0xd9, 0xd8,
	0xf1, 0xa9, 0x5d, 0x48, 0x8d, 0x22, 0x13, 0xa4, 0xbc, 0x33, 0x1c, 0xda, 0x19, 0xf3, 0xee, 0xf1,
	0xc1, 0x8a, 0x6a, 0xf2, 0xd7, 0xca, 0x3c, 0x90, 0x25, 0x5e, 0x2b, 0xef, 0x54, 0xd8, 0x2e, 0xa4,
	0x46, 0xd1, 0x0b, 0x68, 0xe5, 0xd0, 0x02, 0x74, 0x7b, 0x7c, 0x60, 0x02, 0x12, 0xd6, 0x2e, 0xa8,
	0x48, 0xd1, 0xaf, 0x4b, 0x70, 0xab, 0xd8, 0x9e, 0x8e, 0xbe, 0x35, 0xde, 0xfd, 0x3c, 0xe2, 0xd1,
	0xbe, 0x5c, 0x3f, 0x8a, 0x9e, 0xc0, 0x52, 0xec, 0x46, 0x2a, 0xba, 0x9e, 0x34, 0x14, 0xbb, 0xe1,
	0xda, 0x1e, 0xdb, 0x4c, 0xd1, 0x05, 0x6c, 0x8d, 0x19, 0x1b, 0xdd, 0x2b, 0xea, 0x25, 0x1b, 0x6a,
	0x0a, 0x65, 0x9e, 0x36, 0x99, 0xd7, 0x78, 0x13, 0x69, 0x93, 0xf7, 0xbf, 0x5b, 0xed, 0x42, 0x6a,
	0x14, 0x7d, 0x0e, 0xab, 0xc9, 0x7f, 0x3a, 0x42, 0xdd, 0x58, 0xd7, 0x8c, 0xff, 0x71, 0x6a, 0x4f,
	0xd2, 0xa0, 0x0f, 0xa5, 0x3f, 0xbf, 0xea, 0x94, 0xbe, 0x7e, 0xd5, 0x29, 0xfd, 0xe3, 0x55, 0xa7,
	0xf4, 0xd5, 0xeb, 0xce, 0x95, 0xaf, 0x5f, 0x77, 0xae, 0xfc, 0xed, 0x75, 0xe7, 0xca, 0x49, 0x95,
	0xff, 0xe3, 0xd9, 0xff, 0xff, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x31, 0x5d, 0xd3, 0xdb, 0xb8, 0x36,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EmployeeClient is the client API for Employee service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EmployeeClient interface {
	WebLogin(ctx context.Context, in *WebLoginReq, opts ...grpc.CallOption) (*WebLoginRes, error)
	// 添加员工基本信息
	AddEmployeeInfo(ctx context.Context, in *AddEmployeeInfoReq, opts ...grpc.CallOption) (*AddEmployeeInfoRes, error)
	// 编辑员工基本信息
	UpdateEmployeeInfo(ctx context.Context, in *UpdateEmployeeInfoReq, opts ...grpc.CallOption) (*UpdateEmployeeInfoRes, error)
	// 获取员工基本信息
	GetEmployeeInfo(ctx context.Context, in *GetEmployeeInfoReq, opts ...grpc.CallOption) (*GetEmployeeInfoRes, error)
	// 添加员工健康信息
	AddEmployeeHealthInfo(ctx context.Context, in *AddEmployeeHealthInfoReq, opts ...grpc.CallOption) (*AddEmployeeHealthInfoRes, error)
	// 修改员工健康信息
	UpdateEmployeeHealthInfo(ctx context.Context, in *UpdateEmployeeHealthInfoReq, opts ...grpc.CallOption) (*UpdateEmployeeHealthInfoRes, error)
	// 获取员工健康信息
	GetEmployeeHealthInfo(ctx context.Context, in *GetEmployeeHealthInfoReq, opts ...grpc.CallOption) (*GetEmployeeHealthInfoRes, error)
	// 添加/更新员工健康台账
	AddEmployeeHealthRecord(ctx context.Context, in *AddEmployeeHealthRecordReq, opts ...grpc.CallOption) (*AddEmployeeHealthRecordRes, error)
	// 根据公司id，获取员工最新健康台账
	GetEmployeeHealthRecordListByCompanyId(ctx context.Context, in *GetEmployeeHealthRecordListByCompanyIdReq, opts ...grpc.CallOption) (*GetEmployeeHealthRecordListByCompanyIdRes, error)
	// 获取七牛云 token
	GetQiniuToken(ctx context.Context, in *GetQiniuTokenReq, opts ...grpc.CallOption) (*GetQiniuTokenRes, error)
	// 获取员工健康台账历史记录
	GetEmployeeHealthRecordList(ctx context.Context, in *GetEmployeeHealthRecordListReq, opts ...grpc.CallOption) (*GetEmployeeHealthRecordListRes, error)
	// web 个人页面查询展示信息
	QueryEmployInfoByUser(ctx context.Context, in *QueryEmployInfoByUserReq, opts ...grpc.CallOption) (*QueryEmployInfoByUserRes, error)
	// 删除个人信息
	DeleteEmployInfo(ctx context.Context, in *DeleteEmployInfoReq, opts ...grpc.CallOption) (*DeleteEmployInfoRes, error)
}

type employeeClient struct {
	cc *grpc.ClientConn
}

func NewEmployeeClient(cc *grpc.ClientConn) EmployeeClient {
	return &employeeClient{cc}
}

func (c *employeeClient) WebLogin(ctx context.Context, in *WebLoginReq, opts ...grpc.CallOption) (*WebLoginRes, error) {
	out := new(WebLoginRes)
	err := c.cc.Invoke(ctx, "/apiemployee.Employee/WebLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeClient) AddEmployeeInfo(ctx context.Context, in *AddEmployeeInfoReq, opts ...grpc.CallOption) (*AddEmployeeInfoRes, error) {
	out := new(AddEmployeeInfoRes)
	err := c.cc.Invoke(ctx, "/apiemployee.Employee/AddEmployeeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeClient) UpdateEmployeeInfo(ctx context.Context, in *UpdateEmployeeInfoReq, opts ...grpc.CallOption) (*UpdateEmployeeInfoRes, error) {
	out := new(UpdateEmployeeInfoRes)
	err := c.cc.Invoke(ctx, "/apiemployee.Employee/UpdateEmployeeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeClient) GetEmployeeInfo(ctx context.Context, in *GetEmployeeInfoReq, opts ...grpc.CallOption) (*GetEmployeeInfoRes, error) {
	out := new(GetEmployeeInfoRes)
	err := c.cc.Invoke(ctx, "/apiemployee.Employee/GetEmployeeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeClient) AddEmployeeHealthInfo(ctx context.Context, in *AddEmployeeHealthInfoReq, opts ...grpc.CallOption) (*AddEmployeeHealthInfoRes, error) {
	out := new(AddEmployeeHealthInfoRes)
	err := c.cc.Invoke(ctx, "/apiemployee.Employee/AddEmployeeHealthInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeClient) UpdateEmployeeHealthInfo(ctx context.Context, in *UpdateEmployeeHealthInfoReq, opts ...grpc.CallOption) (*UpdateEmployeeHealthInfoRes, error) {
	out := new(UpdateEmployeeHealthInfoRes)
	err := c.cc.Invoke(ctx, "/apiemployee.Employee/UpdateEmployeeHealthInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeClient) GetEmployeeHealthInfo(ctx context.Context, in *GetEmployeeHealthInfoReq, opts ...grpc.CallOption) (*GetEmployeeHealthInfoRes, error) {
	out := new(GetEmployeeHealthInfoRes)
	err := c.cc.Invoke(ctx, "/apiemployee.Employee/GetEmployeeHealthInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeClient) AddEmployeeHealthRecord(ctx context.Context, in *AddEmployeeHealthRecordReq, opts ...grpc.CallOption) (*AddEmployeeHealthRecordRes, error) {
	out := new(AddEmployeeHealthRecordRes)
	err := c.cc.Invoke(ctx, "/apiemployee.Employee/AddEmployeeHealthRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeClient) GetEmployeeHealthRecordListByCompanyId(ctx context.Context, in *GetEmployeeHealthRecordListByCompanyIdReq, opts ...grpc.CallOption) (*GetEmployeeHealthRecordListByCompanyIdRes, error) {
	out := new(GetEmployeeHealthRecordListByCompanyIdRes)
	err := c.cc.Invoke(ctx, "/apiemployee.Employee/GetEmployeeHealthRecordListByCompanyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeClient) GetQiniuToken(ctx context.Context, in *GetQiniuTokenReq, opts ...grpc.CallOption) (*GetQiniuTokenRes, error) {
	out := new(GetQiniuTokenRes)
	err := c.cc.Invoke(ctx, "/apiemployee.Employee/GetQiniuToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeClient) GetEmployeeHealthRecordList(ctx context.Context, in *GetEmployeeHealthRecordListReq, opts ...grpc.CallOption) (*GetEmployeeHealthRecordListRes, error) {
	out := new(GetEmployeeHealthRecordListRes)
	err := c.cc.Invoke(ctx, "/apiemployee.Employee/GetEmployeeHealthRecordList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeClient) QueryEmployInfoByUser(ctx context.Context, in *QueryEmployInfoByUserReq, opts ...grpc.CallOption) (*QueryEmployInfoByUserRes, error) {
	out := new(QueryEmployInfoByUserRes)
	err := c.cc.Invoke(ctx, "/apiemployee.Employee/QueryEmployInfoByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeClient) DeleteEmployInfo(ctx context.Context, in *DeleteEmployInfoReq, opts ...grpc.CallOption) (*DeleteEmployInfoRes, error) {
	out := new(DeleteEmployInfoRes)
	err := c.cc.Invoke(ctx, "/apiemployee.Employee/DeleteEmployInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeServer is the server API for Employee service.
type EmployeeServer interface {
	WebLogin(context.Context, *WebLoginReq) (*WebLoginRes, error)
	// 添加员工基本信息
	AddEmployeeInfo(context.Context, *AddEmployeeInfoReq) (*AddEmployeeInfoRes, error)
	// 编辑员工基本信息
	UpdateEmployeeInfo(context.Context, *UpdateEmployeeInfoReq) (*UpdateEmployeeInfoRes, error)
	// 获取员工基本信息
	GetEmployeeInfo(context.Context, *GetEmployeeInfoReq) (*GetEmployeeInfoRes, error)
	// 添加员工健康信息
	AddEmployeeHealthInfo(context.Context, *AddEmployeeHealthInfoReq) (*AddEmployeeHealthInfoRes, error)
	// 修改员工健康信息
	UpdateEmployeeHealthInfo(context.Context, *UpdateEmployeeHealthInfoReq) (*UpdateEmployeeHealthInfoRes, error)
	// 获取员工健康信息
	GetEmployeeHealthInfo(context.Context, *GetEmployeeHealthInfoReq) (*GetEmployeeHealthInfoRes, error)
	// 添加/更新员工健康台账
	AddEmployeeHealthRecord(context.Context, *AddEmployeeHealthRecordReq) (*AddEmployeeHealthRecordRes, error)
	// 根据公司id，获取员工最新健康台账
	GetEmployeeHealthRecordListByCompanyId(context.Context, *GetEmployeeHealthRecordListByCompanyIdReq) (*GetEmployeeHealthRecordListByCompanyIdRes, error)
	// 获取七牛云 token
	GetQiniuToken(context.Context, *GetQiniuTokenReq) (*GetQiniuTokenRes, error)
	// 获取员工健康台账历史记录
	GetEmployeeHealthRecordList(context.Context, *GetEmployeeHealthRecordListReq) (*GetEmployeeHealthRecordListRes, error)
	// web 个人页面查询展示信息
	QueryEmployInfoByUser(context.Context, *QueryEmployInfoByUserReq) (*QueryEmployInfoByUserRes, error)
	// 删除个人信息
	DeleteEmployInfo(context.Context, *DeleteEmployInfoReq) (*DeleteEmployInfoRes, error)
}

// UnimplementedEmployeeServer can be embedded to have forward compatible implementations.
type UnimplementedEmployeeServer struct {
}

func (*UnimplementedEmployeeServer) WebLogin(ctx context.Context, req *WebLoginReq) (*WebLoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebLogin not implemented")
}
func (*UnimplementedEmployeeServer) AddEmployeeInfo(ctx context.Context, req *AddEmployeeInfoReq) (*AddEmployeeInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmployeeInfo not implemented")
}
func (*UnimplementedEmployeeServer) UpdateEmployeeInfo(ctx context.Context, req *UpdateEmployeeInfoReq) (*UpdateEmployeeInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployeeInfo not implemented")
}
func (*UnimplementedEmployeeServer) GetEmployeeInfo(ctx context.Context, req *GetEmployeeInfoReq) (*GetEmployeeInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeInfo not implemented")
}
func (*UnimplementedEmployeeServer) AddEmployeeHealthInfo(ctx context.Context, req *AddEmployeeHealthInfoReq) (*AddEmployeeHealthInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmployeeHealthInfo not implemented")
}
func (*UnimplementedEmployeeServer) UpdateEmployeeHealthInfo(ctx context.Context, req *UpdateEmployeeHealthInfoReq) (*UpdateEmployeeHealthInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployeeHealthInfo not implemented")
}
func (*UnimplementedEmployeeServer) GetEmployeeHealthInfo(ctx context.Context, req *GetEmployeeHealthInfoReq) (*GetEmployeeHealthInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeHealthInfo not implemented")
}
func (*UnimplementedEmployeeServer) AddEmployeeHealthRecord(ctx context.Context, req *AddEmployeeHealthRecordReq) (*AddEmployeeHealthRecordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmployeeHealthRecord not implemented")
}
func (*UnimplementedEmployeeServer) GetEmployeeHealthRecordListByCompanyId(ctx context.Context, req *GetEmployeeHealthRecordListByCompanyIdReq) (*GetEmployeeHealthRecordListByCompanyIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeHealthRecordListByCompanyId not implemented")
}
func (*UnimplementedEmployeeServer) GetQiniuToken(ctx context.Context, req *GetQiniuTokenReq) (*GetQiniuTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQiniuToken not implemented")
}
func (*UnimplementedEmployeeServer) GetEmployeeHealthRecordList(ctx context.Context, req *GetEmployeeHealthRecordListReq) (*GetEmployeeHealthRecordListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeHealthRecordList not implemented")
}
func (*UnimplementedEmployeeServer) QueryEmployInfoByUser(ctx context.Context, req *QueryEmployInfoByUserReq) (*QueryEmployInfoByUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEmployInfoByUser not implemented")
}
func (*UnimplementedEmployeeServer) DeleteEmployInfo(ctx context.Context, req *DeleteEmployInfoReq) (*DeleteEmployInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmployInfo not implemented")
}

func RegisterEmployeeServer(s *grpc.Server, srv EmployeeServer) {
	s.RegisterService(&_Employee_serviceDesc, srv)
}

func _Employee_WebLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServer).WebLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiemployee.Employee/WebLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServer).WebLogin(ctx, req.(*WebLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Employee_AddEmployeeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEmployeeInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServer).AddEmployeeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiemployee.Employee/AddEmployeeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServer).AddEmployeeInfo(ctx, req.(*AddEmployeeInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Employee_UpdateEmployeeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmployeeInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServer).UpdateEmployeeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiemployee.Employee/UpdateEmployeeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServer).UpdateEmployeeInfo(ctx, req.(*UpdateEmployeeInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Employee_GetEmployeeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServer).GetEmployeeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiemployee.Employee/GetEmployeeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServer).GetEmployeeInfo(ctx, req.(*GetEmployeeInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Employee_AddEmployeeHealthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEmployeeHealthInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServer).AddEmployeeHealthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiemployee.Employee/AddEmployeeHealthInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServer).AddEmployeeHealthInfo(ctx, req.(*AddEmployeeHealthInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Employee_UpdateEmployeeHealthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmployeeHealthInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServer).UpdateEmployeeHealthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiemployee.Employee/UpdateEmployeeHealthInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServer).UpdateEmployeeHealthInfo(ctx, req.(*UpdateEmployeeHealthInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Employee_GetEmployeeHealthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeHealthInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServer).GetEmployeeHealthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiemployee.Employee/GetEmployeeHealthInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServer).GetEmployeeHealthInfo(ctx, req.(*GetEmployeeHealthInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Employee_AddEmployeeHealthRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEmployeeHealthRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServer).AddEmployeeHealthRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiemployee.Employee/AddEmployeeHealthRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServer).AddEmployeeHealthRecord(ctx, req.(*AddEmployeeHealthRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Employee_GetEmployeeHealthRecordListByCompanyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeHealthRecordListByCompanyIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServer).GetEmployeeHealthRecordListByCompanyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiemployee.Employee/GetEmployeeHealthRecordListByCompanyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServer).GetEmployeeHealthRecordListByCompanyId(ctx, req.(*GetEmployeeHealthRecordListByCompanyIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Employee_GetQiniuToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQiniuTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServer).GetQiniuToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiemployee.Employee/GetQiniuToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServer).GetQiniuToken(ctx, req.(*GetQiniuTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Employee_GetEmployeeHealthRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeHealthRecordListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServer).GetEmployeeHealthRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiemployee.Employee/GetEmployeeHealthRecordList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServer).GetEmployeeHealthRecordList(ctx, req.(*GetEmployeeHealthRecordListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Employee_QueryEmployInfoByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEmployInfoByUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServer).QueryEmployInfoByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiemployee.Employee/QueryEmployInfoByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServer).QueryEmployInfoByUser(ctx, req.(*QueryEmployInfoByUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Employee_DeleteEmployInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmployInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServer).DeleteEmployInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiemployee.Employee/DeleteEmployInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServer).DeleteEmployInfo(ctx, req.(*DeleteEmployInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Employee_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apiemployee.Employee",
	HandlerType: (*EmployeeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WebLogin",
			Handler:    _Employee_WebLogin_Handler,
		},
		{
			MethodName: "AddEmployeeInfo",
			Handler:    _Employee_AddEmployeeInfo_Handler,
		},
		{
			MethodName: "UpdateEmployeeInfo",
			Handler:    _Employee_UpdateEmployeeInfo_Handler,
		},
		{
			MethodName: "GetEmployeeInfo",
			Handler:    _Employee_GetEmployeeInfo_Handler,
		},
		{
			MethodName: "AddEmployeeHealthInfo",
			Handler:    _Employee_AddEmployeeHealthInfo_Handler,
		},
		{
			MethodName: "UpdateEmployeeHealthInfo",
			Handler:    _Employee_UpdateEmployeeHealthInfo_Handler,
		},
		{
			MethodName: "GetEmployeeHealthInfo",
			Handler:    _Employee_GetEmployeeHealthInfo_Handler,
		},
		{
			MethodName: "AddEmployeeHealthRecord",
			Handler:    _Employee_AddEmployeeHealthRecord_Handler,
		},
		{
			MethodName: "GetEmployeeHealthRecordListByCompanyId",
			Handler:    _Employee_GetEmployeeHealthRecordListByCompanyId_Handler,
		},
		{
			MethodName: "GetQiniuToken",
			Handler:    _Employee_GetQiniuToken_Handler,
		},
		{
			MethodName: "GetEmployeeHealthRecordList",
			Handler:    _Employee_GetEmployeeHealthRecordList_Handler,
		},
		{
			MethodName: "QueryEmployInfoByUser",
			Handler:    _Employee_QueryEmployInfoByUser_Handler,
		},
		{
			MethodName: "DeleteEmployInfo",
			Handler:    _Employee_DeleteEmployInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apiemployee.proto",
}

func (m *QueryEmployInfoByUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEmployInfoByUserReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEmployInfoByUserReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CreatedTime))
		i--
		dAtA[i] = 0x50
	}
	if m.Adcode != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Adcode))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x42
	}
	if m.Limit != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x38
	}
	if m.Page != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x30
	}
	if m.LastRecordId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.LastRecordId))
		i--
		dAtA[i] = 0x28
	}
	if m.UserType != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x20
	}
	if m.CommunityId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CommunityId))
		i--
		dAtA[i] = 0x18
	}
	if m.StreetId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.StreetId))
		i--
		dAtA[i] = 0x10
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteEmployInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteEmployInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteEmployInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EmpIds) > 0 {
		i -= len(m.EmpIds)
		copy(dAtA[i:], m.EmpIds)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.EmpIds)))
		i--
		dAtA[i] = 0x12
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteEmployInfoRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteEmployInfoRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteEmployInfoRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEmployInfoByUserMode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEmployInfoByUserMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEmployInfoByUserMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompanyDistrictId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyDistrictId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf0
	}
	if len(m.CompanyDistrict) > 0 {
		i -= len(m.CompanyDistrict)
		copy(dAtA[i:], m.CompanyDistrict)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyDistrict)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if m.CompanyCityId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyCityId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe0
	}
	if len(m.CompanyCity) > 0 {
		i -= len(m.CompanyCity)
		copy(dAtA[i:], m.CompanyCity)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyCity)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	if m.CompanyProvinceId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyProvinceId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if len(m.CompanyProvince) > 0 {
		i -= len(m.CompanyProvince)
		copy(dAtA[i:], m.CompanyProvince)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyProvince)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	if m.Age != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Age))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if len(m.ComeFromDetailedAddress) > 0 {
		i -= len(m.ComeFromDetailedAddress)
		copy(dAtA[i:], m.ComeFromDetailedAddress)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ComeFromDetailedAddress)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	if len(m.ComeFromAddress) > 0 {
		i -= len(m.ComeFromAddress)
		copy(dAtA[i:], m.ComeFromAddress)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ComeFromAddress)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	if len(m.ComeFromWenjiang) > 0 {
		i -= len(m.ComeFromWenjiang)
		copy(dAtA[i:], m.ComeFromWenjiang)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ComeFromWenjiang)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	if len(m.DetailedAddress) > 0 {
		i -= len(m.DetailedAddress)
		copy(dAtA[i:], m.DetailedAddress)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.DetailedAddress)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if m.EmployeeId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.EmployeeId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if len(m.SignImage) > 0 {
		i -= len(m.SignImage)
		copy(dAtA[i:], m.SignImage)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.SignImage)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if len(m.LifeTrace) > 0 {
		i -= len(m.LifeTrace)
		copy(dAtA[i:], m.LifeTrace)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.LifeTrace)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Profession) > 0 {
		i -= len(m.Profession)
		copy(dAtA[i:], m.Profession)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.Profession)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if len(m.ReturnThisPlaceTransport) > 0 {
		i -= len(m.ReturnThisPlaceTransport)
		copy(dAtA[i:], m.ReturnThisPlaceTransport)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ReturnThisPlaceTransport)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.ThisPlaceTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ThisPlaceTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.FromChengDuOutside != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.FromChengDuOutside))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.LastTouchTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.LastTouchTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.TouchHuBeiPeopleWithin14Days != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.TouchHuBeiPeopleWithin14Days))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if len(m.TransportDetailInfo) > 0 {
		i -= len(m.TransportDetailInfo)
		copy(dAtA[i:], m.TransportDetailInfo)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.TransportDetailInfo)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.ReturnChengDuTransport) > 0 {
		i -= len(m.ReturnChengDuTransport)
		copy(dAtA[i:], m.ReturnChengDuTransport)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ReturnChengDuTransport)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.ReturnChengDuDetailedAddress) > 0 {
		i -= len(m.ReturnChengDuDetailedAddress)
		copy(dAtA[i:], m.ReturnChengDuDetailedAddress)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ReturnChengDuDetailedAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.ReturnChengDuTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ReturnChengDuTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.BeenToHuBei != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.BeenToHuBei))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.Touch_NCP != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Touch_NCP))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.FormHuBei != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.FormHuBei))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.SymptomWithin14Days) > 0 {
		i -= len(m.SymptomWithin14Days)
		copy(dAtA[i:], m.SymptomWithin14Days)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.SymptomWithin14Days)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.DetectionOperator) > 0 {
		i -= len(m.DetectionOperator)
		copy(dAtA[i:], m.DetectionOperator)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.DetectionOperator)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.DetectionResult) > 0 {
		i -= len(m.DetectionResult)
		copy(dAtA[i:], m.DetectionResult)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.DetectionResult)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.EpidemicSymptom != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.EpidemicSymptom))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Temperature != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Temperature))))
		i--
		dAtA[i] = 0x7d
	}
	if len(m.Department) > 0 {
		i -= len(m.Department)
		copy(dAtA[i:], m.Department)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.Department)))
		i--
		dAtA[i] = 0x72
	}
	if m.UpdateTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x68
	}
	if m.CreatedTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CreatedTime))
		i--
		dAtA[i] = 0x60
	}
	if m.ResidenceCommunityId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ResidenceCommunityId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.ResidenceCommunity) > 0 {
		i -= len(m.ResidenceCommunity)
		copy(dAtA[i:], m.ResidenceCommunity)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ResidenceCommunity)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ResidenceDetailedAddress) > 0 {
		i -= len(m.ResidenceDetailedAddress)
		copy(dAtA[i:], m.ResidenceDetailedAddress)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ResidenceDetailedAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if m.CompanyCommunityId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyCommunityId))
		i--
		dAtA[i] = 0x40
	}
	if len(m.CompanyCommunity) > 0 {
		i -= len(m.CompanyCommunity)
		copy(dAtA[i:], m.CompanyCommunity)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyCommunity)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.IdCardNumber) > 0 {
		i -= len(m.IdCardNumber)
		copy(dAtA[i:], m.IdCardNumber)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.IdCardNumber)))
		i--
		dAtA[i] = 0x32
	}
	if m.CompanyId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CompanyName) > 0 {
		i -= len(m.CompanyName)
		copy(dAtA[i:], m.CompanyName)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyName)))
		i--
		dAtA[i] = 0x22
	}
	if m.Gender != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEmployInfoByUserRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEmployInfoByUserRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEmployInfoByUserRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Info) > 0 {
		for iNdEx := len(m.Info) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Info[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiemployee(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetQiniuTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetQiniuTokenReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetQiniuTokenReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetQiniuTokenRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetQiniuTokenRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetQiniuTokenRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WebLoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebLoginReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebLoginReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pwd) > 0 {
		i -= len(m.Pwd)
		copy(dAtA[i:], m.Pwd)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.Pwd)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WebLoginInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebLoginInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebLoginInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AreaId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.AreaId))
		i--
		dAtA[i] = 0x58
	}
	if m.CityId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CityId))
		i--
		dAtA[i] = 0x50
	}
	if m.ProvinceId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ProvinceId))
		i--
		dAtA[i] = 0x48
	}
	if m.CreatedTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CreatedTime))
		i--
		dAtA[i] = 0x40
	}
	if m.Adcode != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Adcode))
		i--
		dAtA[i] = 0x38
	}
	if m.UserType != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CommunityId) > 0 {
		i -= len(m.CommunityId)
		copy(dAtA[i:], m.CommunityId)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CommunityId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StreetId) > 0 {
		i -= len(m.StreetId)
		copy(dAtA[i:], m.StreetId)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.StreetId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserPwd) > 0 {
		i -= len(m.UserPwd)
		copy(dAtA[i:], m.UserPwd)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.UserPwd)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WebLoginRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebLoginRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebLoginRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddEmployeeInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddEmployeeInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddEmployeeInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsDelete != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.IsDelete))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.UpdateTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.CreatedTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CreatedTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if len(m.ResidenceDetailedAddress) > 0 {
		i -= len(m.ResidenceDetailedAddress)
		copy(dAtA[i:], m.ResidenceDetailedAddress)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ResidenceDetailedAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.ResidenceCommunityId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ResidenceCommunityId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if len(m.ResidenceCommunity) > 0 {
		i -= len(m.ResidenceCommunity)
		copy(dAtA[i:], m.ResidenceCommunity)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ResidenceCommunity)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.ResidenceStreetId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ResidenceStreetId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if len(m.ResidenceStreet) > 0 {
		i -= len(m.ResidenceStreet)
		copy(dAtA[i:], m.ResidenceStreet)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ResidenceStreet)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.ResidenceDistrictId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ResidenceDistrictId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if len(m.ResidenceDistrict) > 0 {
		i -= len(m.ResidenceDistrict)
		copy(dAtA[i:], m.ResidenceDistrict)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ResidenceDistrict)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.ResidenceCityId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ResidenceCityId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if len(m.ResidenceCity) > 0 {
		i -= len(m.ResidenceCity)
		copy(dAtA[i:], m.ResidenceCity)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ResidenceCity)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.ResidenceProvinceId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ResidenceProvinceId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.ResidenceProvince) > 0 {
		i -= len(m.ResidenceProvince)
		copy(dAtA[i:], m.ResidenceProvince)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ResidenceProvince)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Age != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Age))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Gender != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.IdCardNumber) > 0 {
		i -= len(m.IdCardNumber)
		copy(dAtA[i:], m.IdCardNumber)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.IdCardNumber)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.CompanyId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyId))
		i--
		dAtA[i] = 0x78
	}
	if len(m.CompanyName) > 0 {
		i -= len(m.CompanyName)
		copy(dAtA[i:], m.CompanyName)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyName)))
		i--
		dAtA[i] = 0x72
	}
	if m.CompanyCommunityId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyCommunityId))
		i--
		dAtA[i] = 0x68
	}
	if len(m.CompanyCommunity) > 0 {
		i -= len(m.CompanyCommunity)
		copy(dAtA[i:], m.CompanyCommunity)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyCommunity)))
		i--
		dAtA[i] = 0x62
	}
	if m.CompanyStreetId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyStreetId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.CompanyStreet) > 0 {
		i -= len(m.CompanyStreet)
		copy(dAtA[i:], m.CompanyStreet)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyStreet)))
		i--
		dAtA[i] = 0x52
	}
	if m.CompanyDistrictId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyDistrictId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.CompanyDistrict) > 0 {
		i -= len(m.CompanyDistrict)
		copy(dAtA[i:], m.CompanyDistrict)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyDistrict)))
		i--
		dAtA[i] = 0x42
	}
	if m.CompanyCityId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyCityId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.CompanyCity) > 0 {
		i -= len(m.CompanyCity)
		copy(dAtA[i:], m.CompanyCity)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyCity)))
		i--
		dAtA[i] = 0x32
	}
	if m.CompanyProvinceId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyProvinceId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CompanyProvince) > 0 {
		i -= len(m.CompanyProvince)
		copy(dAtA[i:], m.CompanyProvince)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyProvince)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddEmployeeInfoRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddEmployeeInfoRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddEmployeeInfoRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateEmployeeInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEmployeeInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateEmployeeInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if len(m.ResidenceDetailedAddress) > 0 {
		i -= len(m.ResidenceDetailedAddress)
		copy(dAtA[i:], m.ResidenceDetailedAddress)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ResidenceDetailedAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.ResidenceCommunityId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ResidenceCommunityId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if len(m.ResidenceCommunity) > 0 {
		i -= len(m.ResidenceCommunity)
		copy(dAtA[i:], m.ResidenceCommunity)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ResidenceCommunity)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.ResidenceStreetId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ResidenceStreetId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if len(m.ResidenceStreet) > 0 {
		i -= len(m.ResidenceStreet)
		copy(dAtA[i:], m.ResidenceStreet)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ResidenceStreet)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.ResidenceDistrictId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ResidenceDistrictId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if len(m.ResidenceDistrict) > 0 {
		i -= len(m.ResidenceDistrict)
		copy(dAtA[i:], m.ResidenceDistrict)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ResidenceDistrict)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.ResidenceCityId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ResidenceCityId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if len(m.ResidenceCity) > 0 {
		i -= len(m.ResidenceCity)
		copy(dAtA[i:], m.ResidenceCity)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ResidenceCity)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.ResidenceProvinceId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ResidenceProvinceId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.ResidenceProvince) > 0 {
		i -= len(m.ResidenceProvince)
		copy(dAtA[i:], m.ResidenceProvince)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ResidenceProvince)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Age != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Age))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Gender != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.IdCardNumber) > 0 {
		i -= len(m.IdCardNumber)
		copy(dAtA[i:], m.IdCardNumber)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.IdCardNumber)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.CompanyId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyId))
		i--
		dAtA[i] = 0x78
	}
	if len(m.CompanyName) > 0 {
		i -= len(m.CompanyName)
		copy(dAtA[i:], m.CompanyName)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyName)))
		i--
		dAtA[i] = 0x72
	}
	if m.CompanyCommunityId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyCommunityId))
		i--
		dAtA[i] = 0x68
	}
	if len(m.CompanyCommunity) > 0 {
		i -= len(m.CompanyCommunity)
		copy(dAtA[i:], m.CompanyCommunity)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyCommunity)))
		i--
		dAtA[i] = 0x62
	}
	if m.CompanyStreetId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyStreetId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.CompanyStreet) > 0 {
		i -= len(m.CompanyStreet)
		copy(dAtA[i:], m.CompanyStreet)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyStreet)))
		i--
		dAtA[i] = 0x52
	}
	if m.CompanyDistrictId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyDistrictId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.CompanyDistrict) > 0 {
		i -= len(m.CompanyDistrict)
		copy(dAtA[i:], m.CompanyDistrict)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyDistrict)))
		i--
		dAtA[i] = 0x42
	}
	if m.CompanyCityId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyCityId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.CompanyCity) > 0 {
		i -= len(m.CompanyCity)
		copy(dAtA[i:], m.CompanyCity)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyCity)))
		i--
		dAtA[i] = 0x32
	}
	if m.CompanyProvinceId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyProvinceId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CompanyProvince) > 0 {
		i -= len(m.CompanyProvince)
		copy(dAtA[i:], m.CompanyProvince)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyProvince)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateEmployeeInfoRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEmployeeInfoRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateEmployeeInfoRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetEmployeeInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEmployeeInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEmployeeInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetEmployeeInfoRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEmployeeInfoRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEmployeeInfoRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EmployeeInfo != nil {
		{
			size, err := m.EmployeeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EmployeeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmployeeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmployeeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsDelete != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.IsDelete))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.UpdateTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.CreateTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.Id != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if len(m.ResidenceDetailedAddress) > 0 {
		i -= len(m.ResidenceDetailedAddress)
		copy(dAtA[i:], m.ResidenceDetailedAddress)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ResidenceDetailedAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.ResidenceCommunityId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ResidenceCommunityId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if len(m.ResidenceCommunity) > 0 {
		i -= len(m.ResidenceCommunity)
		copy(dAtA[i:], m.ResidenceCommunity)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ResidenceCommunity)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.ResidenceStreetId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ResidenceStreetId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if len(m.ResidenceStreet) > 0 {
		i -= len(m.ResidenceStreet)
		copy(dAtA[i:], m.ResidenceStreet)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ResidenceStreet)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.ResidenceDistrictId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ResidenceDistrictId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if len(m.ResidenceDistrict) > 0 {
		i -= len(m.ResidenceDistrict)
		copy(dAtA[i:], m.ResidenceDistrict)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ResidenceDistrict)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.ResidenceCityId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ResidenceCityId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if len(m.ResidenceCity) > 0 {
		i -= len(m.ResidenceCity)
		copy(dAtA[i:], m.ResidenceCity)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ResidenceCity)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.ResidenceProvinceId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ResidenceProvinceId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.ResidenceProvince) > 0 {
		i -= len(m.ResidenceProvince)
		copy(dAtA[i:], m.ResidenceProvince)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ResidenceProvince)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Age != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Age))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.Gender != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.IdCardNumber) > 0 {
		i -= len(m.IdCardNumber)
		copy(dAtA[i:], m.IdCardNumber)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.IdCardNumber)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.CompanyId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyId))
		i--
		dAtA[i] = 0x78
	}
	if len(m.CompanyName) > 0 {
		i -= len(m.CompanyName)
		copy(dAtA[i:], m.CompanyName)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyName)))
		i--
		dAtA[i] = 0x72
	}
	if m.CompanyCommunityId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyCommunityId))
		i--
		dAtA[i] = 0x68
	}
	if len(m.CompanyCommunity) > 0 {
		i -= len(m.CompanyCommunity)
		copy(dAtA[i:], m.CompanyCommunity)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyCommunity)))
		i--
		dAtA[i] = 0x62
	}
	if m.CompanyStreetId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyStreetId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.CompanyStreet) > 0 {
		i -= len(m.CompanyStreet)
		copy(dAtA[i:], m.CompanyStreet)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyStreet)))
		i--
		dAtA[i] = 0x52
	}
	if m.CompanyDistrictId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyDistrictId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.CompanyDistrict) > 0 {
		i -= len(m.CompanyDistrict)
		copy(dAtA[i:], m.CompanyDistrict)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyDistrict)))
		i--
		dAtA[i] = 0x42
	}
	if m.CompanyCityId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyCityId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.CompanyCity) > 0 {
		i -= len(m.CompanyCity)
		copy(dAtA[i:], m.CompanyCity)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyCity)))
		i--
		dAtA[i] = 0x32
	}
	if m.CompanyProvinceId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyProvinceId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CompanyProvince) > 0 {
		i -= len(m.CompanyProvince)
		copy(dAtA[i:], m.CompanyProvince)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.CompanyProvince)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *AddEmployeeHealthInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddEmployeeHealthInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddEmployeeHealthInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ComeFromDetailedAddress) > 0 {
		i -= len(m.ComeFromDetailedAddress)
		copy(dAtA[i:], m.ComeFromDetailedAddress)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ComeFromDetailedAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.ComeFromAddress) > 0 {
		i -= len(m.ComeFromAddress)
		copy(dAtA[i:], m.ComeFromAddress)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ComeFromAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.ComeFromWenjiang) > 0 {
		i -= len(m.ComeFromWenjiang)
		copy(dAtA[i:], m.ComeFromWenjiang)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ComeFromWenjiang)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.CompanyId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.EmployeeId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.EmployeeId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.SignImage) > 0 {
		i -= len(m.SignImage)
		copy(dAtA[i:], m.SignImage)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.SignImage)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.LifeTrace) > 0 {
		i -= len(m.LifeTrace)
		copy(dAtA[i:], m.LifeTrace)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.LifeTrace)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Profession) > 0 {
		i -= len(m.Profession)
		copy(dAtA[i:], m.Profession)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.Profession)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ReturnThisPlaceTransport) > 0 {
		i -= len(m.ReturnThisPlaceTransport)
		copy(dAtA[i:], m.ReturnThisPlaceTransport)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ReturnThisPlaceTransport)))
		i--
		dAtA[i] = 0x72
	}
	if m.ThisPlaceTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ThisPlaceTime))
		i--
		dAtA[i] = 0x68
	}
	if m.FromChengDuOutside != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.FromChengDuOutside))
		i--
		dAtA[i] = 0x60
	}
	if m.LastTouchTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.LastTouchTime))
		i--
		dAtA[i] = 0x58
	}
	if m.TouchHuBeiPeopleWithin14Days != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.TouchHuBeiPeopleWithin14Days))
		i--
		dAtA[i] = 0x50
	}
	if len(m.TransportDetailInfo) > 0 {
		i -= len(m.TransportDetailInfo)
		copy(dAtA[i:], m.TransportDetailInfo)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.TransportDetailInfo)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ReturnChengDuTransport) > 0 {
		i -= len(m.ReturnChengDuTransport)
		copy(dAtA[i:], m.ReturnChengDuTransport)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ReturnChengDuTransport)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ReturnChengDuDetailedAddress) > 0 {
		i -= len(m.ReturnChengDuDetailedAddress)
		copy(dAtA[i:], m.ReturnChengDuDetailedAddress)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ReturnChengDuDetailedAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ReturnChengDuTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ReturnChengDuTime))
		i--
		dAtA[i] = 0x30
	}
	if m.BeenToHuBei != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.BeenToHuBei))
		i--
		dAtA[i] = 0x28
	}
	if m.Touch_NCP != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Touch_NCP))
		i--
		dAtA[i] = 0x20
	}
	if m.FormHuBei != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.FormHuBei))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SymptomWithin14Days) > 0 {
		i -= len(m.SymptomWithin14Days)
		copy(dAtA[i:], m.SymptomWithin14Days)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.SymptomWithin14Days)))
		i--
		dAtA[i] = 0x12
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddEmployeeHealthInfoRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddEmployeeHealthInfoRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddEmployeeHealthInfoRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateEmployeeHealthInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEmployeeHealthInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateEmployeeHealthInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ComeFromDetailedAddress) > 0 {
		i -= len(m.ComeFromDetailedAddress)
		copy(dAtA[i:], m.ComeFromDetailedAddress)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ComeFromDetailedAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.ComeFromAddress) > 0 {
		i -= len(m.ComeFromAddress)
		copy(dAtA[i:], m.ComeFromAddress)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ComeFromAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.ComeFromWenjiang) > 0 {
		i -= len(m.ComeFromWenjiang)
		copy(dAtA[i:], m.ComeFromWenjiang)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ComeFromWenjiang)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.CompanyId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.EmployeeId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.EmployeeId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Id != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.SignImage) > 0 {
		i -= len(m.SignImage)
		copy(dAtA[i:], m.SignImage)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.SignImage)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.LifeTrace) > 0 {
		i -= len(m.LifeTrace)
		copy(dAtA[i:], m.LifeTrace)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.LifeTrace)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Profession) > 0 {
		i -= len(m.Profession)
		copy(dAtA[i:], m.Profession)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.Profession)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ReturnThisPlaceTransport) > 0 {
		i -= len(m.ReturnThisPlaceTransport)
		copy(dAtA[i:], m.ReturnThisPlaceTransport)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ReturnThisPlaceTransport)))
		i--
		dAtA[i] = 0x72
	}
	if m.ThisPlaceTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ThisPlaceTime))
		i--
		dAtA[i] = 0x68
	}
	if m.FromChengDuOutside != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.FromChengDuOutside))
		i--
		dAtA[i] = 0x60
	}
	if m.LastTouchTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.LastTouchTime))
		i--
		dAtA[i] = 0x58
	}
	if m.TouchHuBeiPeopleWithin14Days != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.TouchHuBeiPeopleWithin14Days))
		i--
		dAtA[i] = 0x50
	}
	if len(m.TransportDetailInfo) > 0 {
		i -= len(m.TransportDetailInfo)
		copy(dAtA[i:], m.TransportDetailInfo)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.TransportDetailInfo)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ReturnChengDuTransport) > 0 {
		i -= len(m.ReturnChengDuTransport)
		copy(dAtA[i:], m.ReturnChengDuTransport)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ReturnChengDuTransport)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ReturnChengDuDetailedAddress) > 0 {
		i -= len(m.ReturnChengDuDetailedAddress)
		copy(dAtA[i:], m.ReturnChengDuDetailedAddress)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ReturnChengDuDetailedAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ReturnChengDuTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ReturnChengDuTime))
		i--
		dAtA[i] = 0x30
	}
	if m.BeenToHuBei != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.BeenToHuBei))
		i--
		dAtA[i] = 0x28
	}
	if m.Touch_NCP != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Touch_NCP))
		i--
		dAtA[i] = 0x20
	}
	if m.FormHuBei != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.FormHuBei))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SymptomWithin14Days) > 0 {
		i -= len(m.SymptomWithin14Days)
		copy(dAtA[i:], m.SymptomWithin14Days)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.SymptomWithin14Days)))
		i--
		dAtA[i] = 0x12
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateEmployeeHealthInfoRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEmployeeHealthInfoRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateEmployeeHealthInfoRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetEmployeeHealthInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEmployeeHealthInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEmployeeHealthInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EmployeeId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.EmployeeId))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetEmployeeHealthInfoRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEmployeeHealthInfoRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEmployeeHealthInfoRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EmployeeHealthInfo != nil {
		{
			size, err := m.EmployeeHealthInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EmployeeHealthInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmployeeHealthInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmployeeHealthInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ComeFromDetailedAddress) > 0 {
		i -= len(m.ComeFromDetailedAddress)
		copy(dAtA[i:], m.ComeFromDetailedAddress)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ComeFromDetailedAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.ComeFromAddress) > 0 {
		i -= len(m.ComeFromAddress)
		copy(dAtA[i:], m.ComeFromAddress)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ComeFromAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.ComeFromWenjiang) > 0 {
		i -= len(m.ComeFromWenjiang)
		copy(dAtA[i:], m.ComeFromWenjiang)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ComeFromWenjiang)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.UpdateTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.CompanyId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.EmployeeId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.EmployeeId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Id != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.SignImage) > 0 {
		i -= len(m.SignImage)
		copy(dAtA[i:], m.SignImage)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.SignImage)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.LifeTrace) > 0 {
		i -= len(m.LifeTrace)
		copy(dAtA[i:], m.LifeTrace)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.LifeTrace)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Profession) > 0 {
		i -= len(m.Profession)
		copy(dAtA[i:], m.Profession)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.Profession)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ReturnThisPlaceTransport) > 0 {
		i -= len(m.ReturnThisPlaceTransport)
		copy(dAtA[i:], m.ReturnThisPlaceTransport)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ReturnThisPlaceTransport)))
		i--
		dAtA[i] = 0x72
	}
	if m.ThisPlaceTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ThisPlaceTime))
		i--
		dAtA[i] = 0x68
	}
	if m.FromChengDuOutside != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.FromChengDuOutside))
		i--
		dAtA[i] = 0x60
	}
	if m.LastTouchTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.LastTouchTime))
		i--
		dAtA[i] = 0x58
	}
	if m.TouchHuBeiPeopleWithin14Days != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.TouchHuBeiPeopleWithin14Days))
		i--
		dAtA[i] = 0x50
	}
	if len(m.TransportDetailInfo) > 0 {
		i -= len(m.TransportDetailInfo)
		copy(dAtA[i:], m.TransportDetailInfo)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.TransportDetailInfo)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ReturnChengDuTransport) > 0 {
		i -= len(m.ReturnChengDuTransport)
		copy(dAtA[i:], m.ReturnChengDuTransport)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ReturnChengDuTransport)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ReturnChengDuDetailedAddress) > 0 {
		i -= len(m.ReturnChengDuDetailedAddress)
		copy(dAtA[i:], m.ReturnChengDuDetailedAddress)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.ReturnChengDuDetailedAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ReturnChengDuTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.ReturnChengDuTime))
		i--
		dAtA[i] = 0x30
	}
	if m.BeenToHuBei != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.BeenToHuBei))
		i--
		dAtA[i] = 0x28
	}
	if m.Touch_NCP != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Touch_NCP))
		i--
		dAtA[i] = 0x20
	}
	if m.FormHuBei != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.FormHuBei))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SymptomWithin14Days) > 0 {
		i -= len(m.SymptomWithin14Days)
		copy(dAtA[i:], m.SymptomWithin14Days)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.SymptomWithin14Days)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *AddEmployeeHealthRecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddEmployeeHealthRecordReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddEmployeeHealthRecordReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompanyId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyId))
		i--
		dAtA[i] = 0x40
	}
	if len(m.DetectionOperator) > 0 {
		i -= len(m.DetectionOperator)
		copy(dAtA[i:], m.DetectionOperator)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.DetectionOperator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DetectionResult) > 0 {
		i -= len(m.DetectionResult)
		copy(dAtA[i:], m.DetectionResult)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.DetectionResult)))
		i--
		dAtA[i] = 0x32
	}
	if m.EpidemicSymptom != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.EpidemicSymptom))
		i--
		dAtA[i] = 0x28
	}
	if m.Temperature != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Temperature))))
		i--
		dAtA[i] = 0x25
	}
	if len(m.Department) > 0 {
		i -= len(m.Department)
		copy(dAtA[i:], m.Department)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.Department)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EmployeeId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.EmployeeId))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddEmployeeHealthRecordRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddEmployeeHealthRecordRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddEmployeeHealthRecordRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetEmployeeHealthRecordListByCompanyIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEmployeeHealthRecordListByCompanyIdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEmployeeHealthRecordListByCompanyIdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompanyId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetEmployeeHealthRecordListByCompanyIdRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEmployeeHealthRecordListByCompanyIdRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEmployeeHealthRecordListByCompanyIdRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EmployeeHealthRecords) > 0 {
		for iNdEx := len(m.EmployeeHealthRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EmployeeHealthRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiemployee(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EmployeeHealthRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmployeeHealthRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmployeeHealthRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.UpdatedTime))
		i--
		dAtA[i] = 0x58
	}
	if m.CompanyId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CompanyId))
		i--
		dAtA[i] = 0x50
	}
	if m.CreatedTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CreatedTime))
		i--
		dAtA[i] = 0x48
	}
	if m.Id != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x40
	}
	if len(m.DetectionOperator) > 0 {
		i -= len(m.DetectionOperator)
		copy(dAtA[i:], m.DetectionOperator)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.DetectionOperator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DetectionResult) > 0 {
		i -= len(m.DetectionResult)
		copy(dAtA[i:], m.DetectionResult)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.DetectionResult)))
		i--
		dAtA[i] = 0x32
	}
	if m.EpidemicSymptom != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.EpidemicSymptom))
		i--
		dAtA[i] = 0x28
	}
	if m.Temperature != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Temperature))))
		i--
		dAtA[i] = 0x25
	}
	if len(m.Department) > 0 {
		i -= len(m.Department)
		copy(dAtA[i:], m.Department)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.Department)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EmployeeId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.EmployeeId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *GetEmployeeHealthRecordListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEmployeeHealthRecordListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEmployeeHealthRecordListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Page != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if m.EmployeeId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.EmployeeId))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetEmployeeHealthRecordListRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEmployeeHealthRecordListRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEmployeeHealthRecordListRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.EmployeeHealthRecordList) > 0 {
		for iNdEx := len(m.EmployeeHealthRecordList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EmployeeHealthRecordList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiemployee(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiemployee(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EmployeeHealthRecordListVo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmployeeHealthRecordListVo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmployeeHealthRecordListVo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.UpdatedTime))
		i--
		dAtA[i] = 0x50
	}
	if m.CreatedTime != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.CreatedTime))
		i--
		dAtA[i] = 0x48
	}
	if m.Id != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x40
	}
	if len(m.DetectionOperator) > 0 {
		i -= len(m.DetectionOperator)
		copy(dAtA[i:], m.DetectionOperator)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.DetectionOperator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DetectionResult) > 0 {
		i -= len(m.DetectionResult)
		copy(dAtA[i:], m.DetectionResult)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.DetectionResult)))
		i--
		dAtA[i] = 0x32
	}
	if m.EpidemicSymptom != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.EpidemicSymptom))
		i--
		dAtA[i] = 0x28
	}
	if m.Temperature != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Temperature))))
		i--
		dAtA[i] = 0x25
	}
	if len(m.Department) > 0 {
		i -= len(m.Department)
		copy(dAtA[i:], m.Department)
		i = encodeVarintApiemployee(dAtA, i, uint64(len(m.Department)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EmployeeId != 0 {
		i = encodeVarintApiemployee(dAtA, i, uint64(m.EmployeeId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func encodeVarintApiemployee(dAtA []byte, offset int, v uint64) int {
	offset -= sovApiemployee(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryEmployInfoByUserReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.StreetId != 0 {
		n += 1 + sovApiemployee(uint64(m.StreetId))
	}
	if m.CommunityId != 0 {
		n += 1 + sovApiemployee(uint64(m.CommunityId))
	}
	if m.UserType != 0 {
		n += 1 + sovApiemployee(uint64(m.UserType))
	}
	if m.LastRecordId != 0 {
		n += 1 + sovApiemployee(uint64(m.LastRecordId))
	}
	if m.Page != 0 {
		n += 1 + sovApiemployee(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovApiemployee(uint64(m.Limit))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.Adcode != 0 {
		n += 1 + sovApiemployee(uint64(m.Adcode))
	}
	if m.CreatedTime != 0 {
		n += 1 + sovApiemployee(uint64(m.CreatedTime))
	}
	return n
}

func (m *DeleteEmployInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.EmpIds)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	return n
}

func (m *DeleteEmployInfoRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	return n
}

func (m *QueryEmployInfoByUserMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovApiemployee(uint64(m.Gender))
	}
	l = len(m.CompanyName)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyId))
	}
	l = len(m.IdCardNumber)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.CompanyCommunity)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyCommunityId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyCommunityId))
	}
	l = len(m.ResidenceDetailedAddress)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.ResidenceCommunity)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.ResidenceCommunityId != 0 {
		n += 1 + sovApiemployee(uint64(m.ResidenceCommunityId))
	}
	if m.CreatedTime != 0 {
		n += 1 + sovApiemployee(uint64(m.CreatedTime))
	}
	if m.UpdateTime != 0 {
		n += 1 + sovApiemployee(uint64(m.UpdateTime))
	}
	l = len(m.Department)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.Temperature != 0 {
		n += 5
	}
	if m.EpidemicSymptom != 0 {
		n += 2 + sovApiemployee(uint64(m.EpidemicSymptom))
	}
	l = len(m.DetectionResult)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	l = len(m.DetectionOperator)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	l = len(m.SymptomWithin14Days)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.FormHuBei != 0 {
		n += 2 + sovApiemployee(uint64(m.FormHuBei))
	}
	if m.Touch_NCP != 0 {
		n += 2 + sovApiemployee(uint64(m.Touch_NCP))
	}
	if m.BeenToHuBei != 0 {
		n += 2 + sovApiemployee(uint64(m.BeenToHuBei))
	}
	if m.ReturnChengDuTime != 0 {
		n += 2 + sovApiemployee(uint64(m.ReturnChengDuTime))
	}
	l = len(m.ReturnChengDuDetailedAddress)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	l = len(m.ReturnChengDuTransport)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	l = len(m.TransportDetailInfo)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.TouchHuBeiPeopleWithin14Days != 0 {
		n += 2 + sovApiemployee(uint64(m.TouchHuBeiPeopleWithin14Days))
	}
	if m.LastTouchTime != 0 {
		n += 2 + sovApiemployee(uint64(m.LastTouchTime))
	}
	if m.FromChengDuOutside != 0 {
		n += 2 + sovApiemployee(uint64(m.FromChengDuOutside))
	}
	if m.ThisPlaceTime != 0 {
		n += 2 + sovApiemployee(uint64(m.ThisPlaceTime))
	}
	l = len(m.ReturnThisPlaceTransport)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	l = len(m.Profession)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	l = len(m.LifeTrace)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	l = len(m.SignImage)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.EmployeeId != 0 {
		n += 2 + sovApiemployee(uint64(m.EmployeeId))
	}
	l = len(m.DetailedAddress)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	l = len(m.ComeFromWenjiang)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	l = len(m.ComeFromAddress)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	l = len(m.ComeFromDetailedAddress)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.Age != 0 {
		n += 2 + sovApiemployee(uint64(m.Age))
	}
	l = len(m.CompanyProvince)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyProvinceId != 0 {
		n += 2 + sovApiemployee(uint64(m.CompanyProvinceId))
	}
	l = len(m.CompanyCity)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyCityId != 0 {
		n += 2 + sovApiemployee(uint64(m.CompanyCityId))
	}
	l = len(m.CompanyDistrict)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyDistrictId != 0 {
		n += 2 + sovApiemployee(uint64(m.CompanyDistrictId))
	}
	return n
}

func (m *QueryEmployInfoByUserRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovApiemployee(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovApiemployee(uint64(m.Total))
	}
	return n
}

func (m *GetQiniuTokenReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	return n
}

func (m *GetQiniuTokenRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	return n
}

func (m *WebLoginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.Pwd)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	return n
}

func (m *WebLoginInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.UserPwd)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.StreetId)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.CommunityId)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.UserType != 0 {
		n += 1 + sovApiemployee(uint64(m.UserType))
	}
	if m.Adcode != 0 {
		n += 1 + sovApiemployee(uint64(m.Adcode))
	}
	if m.CreatedTime != 0 {
		n += 1 + sovApiemployee(uint64(m.CreatedTime))
	}
	if m.ProvinceId != 0 {
		n += 1 + sovApiemployee(uint64(m.ProvinceId))
	}
	if m.CityId != 0 {
		n += 1 + sovApiemployee(uint64(m.CityId))
	}
	if m.AreaId != 0 {
		n += 1 + sovApiemployee(uint64(m.AreaId))
	}
	return n
}

func (m *WebLoginRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	return n
}

func (m *AddEmployeeInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.CompanyProvince)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyProvinceId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyProvinceId))
	}
	l = len(m.CompanyCity)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyCityId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyCityId))
	}
	l = len(m.CompanyDistrict)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyDistrictId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyDistrictId))
	}
	l = len(m.CompanyStreet)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyStreetId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyStreetId))
	}
	l = len(m.CompanyCommunity)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyCommunityId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyCommunityId))
	}
	l = len(m.CompanyName)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyId))
	}
	l = len(m.IdCardNumber)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.Gender != 0 {
		n += 2 + sovApiemployee(uint64(m.Gender))
	}
	if m.Age != 0 {
		n += 2 + sovApiemployee(uint64(m.Age))
	}
	l = len(m.ResidenceProvince)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.ResidenceProvinceId != 0 {
		n += 2 + sovApiemployee(uint64(m.ResidenceProvinceId))
	}
	l = len(m.ResidenceCity)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.ResidenceCityId != 0 {
		n += 2 + sovApiemployee(uint64(m.ResidenceCityId))
	}
	l = len(m.ResidenceDistrict)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.ResidenceDistrictId != 0 {
		n += 2 + sovApiemployee(uint64(m.ResidenceDistrictId))
	}
	l = len(m.ResidenceStreet)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.ResidenceStreetId != 0 {
		n += 2 + sovApiemployee(uint64(m.ResidenceStreetId))
	}
	l = len(m.ResidenceCommunity)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.ResidenceCommunityId != 0 {
		n += 2 + sovApiemployee(uint64(m.ResidenceCommunityId))
	}
	l = len(m.ResidenceDetailedAddress)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.CreatedTime != 0 {
		n += 2 + sovApiemployee(uint64(m.CreatedTime))
	}
	if m.UpdateTime != 0 {
		n += 2 + sovApiemployee(uint64(m.UpdateTime))
	}
	if m.IsDelete != 0 {
		n += 2 + sovApiemployee(uint64(m.IsDelete))
	}
	return n
}

func (m *AddEmployeeInfoRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovApiemployee(uint64(m.Id))
	}
	return n
}

func (m *UpdateEmployeeInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.CompanyProvince)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyProvinceId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyProvinceId))
	}
	l = len(m.CompanyCity)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyCityId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyCityId))
	}
	l = len(m.CompanyDistrict)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyDistrictId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyDistrictId))
	}
	l = len(m.CompanyStreet)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyStreetId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyStreetId))
	}
	l = len(m.CompanyCommunity)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyCommunityId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyCommunityId))
	}
	l = len(m.CompanyName)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyId))
	}
	l = len(m.IdCardNumber)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.Gender != 0 {
		n += 2 + sovApiemployee(uint64(m.Gender))
	}
	if m.Age != 0 {
		n += 2 + sovApiemployee(uint64(m.Age))
	}
	l = len(m.ResidenceProvince)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.ResidenceProvinceId != 0 {
		n += 2 + sovApiemployee(uint64(m.ResidenceProvinceId))
	}
	l = len(m.ResidenceCity)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.ResidenceCityId != 0 {
		n += 2 + sovApiemployee(uint64(m.ResidenceCityId))
	}
	l = len(m.ResidenceDistrict)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.ResidenceDistrictId != 0 {
		n += 2 + sovApiemployee(uint64(m.ResidenceDistrictId))
	}
	l = len(m.ResidenceStreet)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.ResidenceStreetId != 0 {
		n += 2 + sovApiemployee(uint64(m.ResidenceStreetId))
	}
	l = len(m.ResidenceCommunity)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.ResidenceCommunityId != 0 {
		n += 2 + sovApiemployee(uint64(m.ResidenceCommunityId))
	}
	l = len(m.ResidenceDetailedAddress)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.Id != 0 {
		n += 2 + sovApiemployee(uint64(m.Id))
	}
	return n
}

func (m *UpdateEmployeeInfoRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	return n
}

func (m *GetEmployeeInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovApiemployee(uint64(m.Id))
	}
	return n
}

func (m *GetEmployeeInfoRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.EmployeeInfo != nil {
		l = m.EmployeeInfo.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	return n
}

func (m *EmployeeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.CompanyProvince)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyProvinceId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyProvinceId))
	}
	l = len(m.CompanyCity)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyCityId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyCityId))
	}
	l = len(m.CompanyDistrict)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyDistrictId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyDistrictId))
	}
	l = len(m.CompanyStreet)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyStreetId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyStreetId))
	}
	l = len(m.CompanyCommunity)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyCommunityId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyCommunityId))
	}
	l = len(m.CompanyName)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyId))
	}
	l = len(m.IdCardNumber)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.Gender != 0 {
		n += 2 + sovApiemployee(uint64(m.Gender))
	}
	if m.Age != 0 {
		n += 2 + sovApiemployee(uint64(m.Age))
	}
	l = len(m.ResidenceProvince)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.ResidenceProvinceId != 0 {
		n += 2 + sovApiemployee(uint64(m.ResidenceProvinceId))
	}
	l = len(m.ResidenceCity)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.ResidenceCityId != 0 {
		n += 2 + sovApiemployee(uint64(m.ResidenceCityId))
	}
	l = len(m.ResidenceDistrict)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.ResidenceDistrictId != 0 {
		n += 2 + sovApiemployee(uint64(m.ResidenceDistrictId))
	}
	l = len(m.ResidenceStreet)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.ResidenceStreetId != 0 {
		n += 2 + sovApiemployee(uint64(m.ResidenceStreetId))
	}
	l = len(m.ResidenceCommunity)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.ResidenceCommunityId != 0 {
		n += 2 + sovApiemployee(uint64(m.ResidenceCommunityId))
	}
	l = len(m.ResidenceDetailedAddress)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.Id != 0 {
		n += 2 + sovApiemployee(uint64(m.Id))
	}
	if m.CreateTime != 0 {
		n += 2 + sovApiemployee(uint64(m.CreateTime))
	}
	if m.UpdateTime != 0 {
		n += 2 + sovApiemployee(uint64(m.UpdateTime))
	}
	if m.IsDelete != 0 {
		n += 2 + sovApiemployee(uint64(m.IsDelete))
	}
	return n
}

func (m *AddEmployeeHealthInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.SymptomWithin14Days)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.FormHuBei != 0 {
		n += 1 + sovApiemployee(uint64(m.FormHuBei))
	}
	if m.Touch_NCP != 0 {
		n += 1 + sovApiemployee(uint64(m.Touch_NCP))
	}
	if m.BeenToHuBei != 0 {
		n += 1 + sovApiemployee(uint64(m.BeenToHuBei))
	}
	if m.ReturnChengDuTime != 0 {
		n += 1 + sovApiemployee(uint64(m.ReturnChengDuTime))
	}
	l = len(m.ReturnChengDuDetailedAddress)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.ReturnChengDuTransport)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.TransportDetailInfo)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.TouchHuBeiPeopleWithin14Days != 0 {
		n += 1 + sovApiemployee(uint64(m.TouchHuBeiPeopleWithin14Days))
	}
	if m.LastTouchTime != 0 {
		n += 1 + sovApiemployee(uint64(m.LastTouchTime))
	}
	if m.FromChengDuOutside != 0 {
		n += 1 + sovApiemployee(uint64(m.FromChengDuOutside))
	}
	if m.ThisPlaceTime != 0 {
		n += 1 + sovApiemployee(uint64(m.ThisPlaceTime))
	}
	l = len(m.ReturnThisPlaceTransport)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.Profession)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.LifeTrace)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	l = len(m.SignImage)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.EmployeeId != 0 {
		n += 2 + sovApiemployee(uint64(m.EmployeeId))
	}
	if m.CompanyId != 0 {
		n += 2 + sovApiemployee(uint64(m.CompanyId))
	}
	l = len(m.ComeFromWenjiang)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	l = len(m.ComeFromAddress)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	l = len(m.ComeFromDetailedAddress)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	return n
}

func (m *AddEmployeeHealthInfoRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovApiemployee(uint64(m.Id))
	}
	return n
}

func (m *UpdateEmployeeHealthInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.SymptomWithin14Days)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.FormHuBei != 0 {
		n += 1 + sovApiemployee(uint64(m.FormHuBei))
	}
	if m.Touch_NCP != 0 {
		n += 1 + sovApiemployee(uint64(m.Touch_NCP))
	}
	if m.BeenToHuBei != 0 {
		n += 1 + sovApiemployee(uint64(m.BeenToHuBei))
	}
	if m.ReturnChengDuTime != 0 {
		n += 1 + sovApiemployee(uint64(m.ReturnChengDuTime))
	}
	l = len(m.ReturnChengDuDetailedAddress)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.ReturnChengDuTransport)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.TransportDetailInfo)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.TouchHuBeiPeopleWithin14Days != 0 {
		n += 1 + sovApiemployee(uint64(m.TouchHuBeiPeopleWithin14Days))
	}
	if m.LastTouchTime != 0 {
		n += 1 + sovApiemployee(uint64(m.LastTouchTime))
	}
	if m.FromChengDuOutside != 0 {
		n += 1 + sovApiemployee(uint64(m.FromChengDuOutside))
	}
	if m.ThisPlaceTime != 0 {
		n += 1 + sovApiemployee(uint64(m.ThisPlaceTime))
	}
	l = len(m.ReturnThisPlaceTransport)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.Profession)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.LifeTrace)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	l = len(m.SignImage)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.Id != 0 {
		n += 2 + sovApiemployee(uint64(m.Id))
	}
	if m.EmployeeId != 0 {
		n += 2 + sovApiemployee(uint64(m.EmployeeId))
	}
	if m.CompanyId != 0 {
		n += 2 + sovApiemployee(uint64(m.CompanyId))
	}
	l = len(m.ComeFromWenjiang)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	l = len(m.ComeFromAddress)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	l = len(m.ComeFromDetailedAddress)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	return n
}

func (m *UpdateEmployeeHealthInfoRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	return n
}

func (m *GetEmployeeHealthInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.EmployeeId != 0 {
		n += 1 + sovApiemployee(uint64(m.EmployeeId))
	}
	return n
}

func (m *GetEmployeeHealthInfoRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.EmployeeHealthInfo != nil {
		l = m.EmployeeHealthInfo.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	return n
}

func (m *EmployeeHealthInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SymptomWithin14Days)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.FormHuBei != 0 {
		n += 1 + sovApiemployee(uint64(m.FormHuBei))
	}
	if m.Touch_NCP != 0 {
		n += 1 + sovApiemployee(uint64(m.Touch_NCP))
	}
	if m.BeenToHuBei != 0 {
		n += 1 + sovApiemployee(uint64(m.BeenToHuBei))
	}
	if m.ReturnChengDuTime != 0 {
		n += 1 + sovApiemployee(uint64(m.ReturnChengDuTime))
	}
	l = len(m.ReturnChengDuDetailedAddress)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.ReturnChengDuTransport)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.TransportDetailInfo)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.TouchHuBeiPeopleWithin14Days != 0 {
		n += 1 + sovApiemployee(uint64(m.TouchHuBeiPeopleWithin14Days))
	}
	if m.LastTouchTime != 0 {
		n += 1 + sovApiemployee(uint64(m.LastTouchTime))
	}
	if m.FromChengDuOutside != 0 {
		n += 1 + sovApiemployee(uint64(m.FromChengDuOutside))
	}
	if m.ThisPlaceTime != 0 {
		n += 1 + sovApiemployee(uint64(m.ThisPlaceTime))
	}
	l = len(m.ReturnThisPlaceTransport)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.Profession)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.LifeTrace)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	l = len(m.SignImage)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	if m.Id != 0 {
		n += 2 + sovApiemployee(uint64(m.Id))
	}
	if m.EmployeeId != 0 {
		n += 2 + sovApiemployee(uint64(m.EmployeeId))
	}
	if m.CompanyId != 0 {
		n += 2 + sovApiemployee(uint64(m.CompanyId))
	}
	if m.UpdateTime != 0 {
		n += 2 + sovApiemployee(uint64(m.UpdateTime))
	}
	l = len(m.ComeFromWenjiang)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	l = len(m.ComeFromAddress)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	l = len(m.ComeFromDetailedAddress)
	if l > 0 {
		n += 2 + l + sovApiemployee(uint64(l))
	}
	return n
}

func (m *AddEmployeeHealthRecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.EmployeeId != 0 {
		n += 1 + sovApiemployee(uint64(m.EmployeeId))
	}
	l = len(m.Department)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.Temperature != 0 {
		n += 5
	}
	if m.EpidemicSymptom != 0 {
		n += 1 + sovApiemployee(uint64(m.EpidemicSymptom))
	}
	l = len(m.DetectionResult)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.DetectionOperator)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyId))
	}
	return n
}

func (m *AddEmployeeHealthRecordRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	return n
}

func (m *GetEmployeeHealthRecordListByCompanyIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.CompanyId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyId))
	}
	return n
}

func (m *GetEmployeeHealthRecordListByCompanyIdRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if len(m.EmployeeHealthRecords) > 0 {
		for _, e := range m.EmployeeHealthRecords {
			l = e.Size()
			n += 1 + l + sovApiemployee(uint64(l))
		}
	}
	return n
}

func (m *EmployeeHealthRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EmployeeId != 0 {
		n += 1 + sovApiemployee(uint64(m.EmployeeId))
	}
	l = len(m.Department)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.Temperature != 0 {
		n += 5
	}
	if m.EpidemicSymptom != 0 {
		n += 1 + sovApiemployee(uint64(m.EpidemicSymptom))
	}
	l = len(m.DetectionResult)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.DetectionOperator)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovApiemployee(uint64(m.Id))
	}
	if m.CreatedTime != 0 {
		n += 1 + sovApiemployee(uint64(m.CreatedTime))
	}
	if m.CompanyId != 0 {
		n += 1 + sovApiemployee(uint64(m.CompanyId))
	}
	if m.UpdatedTime != 0 {
		n += 1 + sovApiemployee(uint64(m.UpdatedTime))
	}
	return n
}

func (m *GetEmployeeHealthRecordListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.EmployeeId != 0 {
		n += 1 + sovApiemployee(uint64(m.EmployeeId))
	}
	if m.Page != 0 {
		n += 1 + sovApiemployee(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovApiemployee(uint64(m.Limit))
	}
	return n
}

func (m *GetEmployeeHealthRecordListRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if len(m.EmployeeHealthRecordList) > 0 {
		for _, e := range m.EmployeeHealthRecordList {
			l = e.Size()
			n += 1 + l + sovApiemployee(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovApiemployee(uint64(m.Total))
	}
	return n
}

func (m *EmployeeHealthRecordListVo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EmployeeId != 0 {
		n += 1 + sovApiemployee(uint64(m.EmployeeId))
	}
	l = len(m.Department)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.Temperature != 0 {
		n += 5
	}
	if m.EpidemicSymptom != 0 {
		n += 1 + sovApiemployee(uint64(m.EpidemicSymptom))
	}
	l = len(m.DetectionResult)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	l = len(m.DetectionOperator)
	if l > 0 {
		n += 1 + l + sovApiemployee(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovApiemployee(uint64(m.Id))
	}
	if m.CreatedTime != 0 {
		n += 1 + sovApiemployee(uint64(m.CreatedTime))
	}
	if m.UpdatedTime != 0 {
		n += 1 + sovApiemployee(uint64(m.UpdatedTime))
	}
	return n
}

func sovApiemployee(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApiemployee(x uint64) (n int) {
	return sovApiemployee(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryEmployInfoByUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEmployInfoByUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEmployInfoByUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &base.Head{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetId", wireType)
			}
			m.StreetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityId", wireType)
			}
			m.CommunityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommunityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRecordId", wireType)
			}
			m.LastRecordId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRecordId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adcode", wireType)
			}
			m.Adcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Adcode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			m.CreatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteEmployInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteEmployInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteEmployInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &base.Head{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmpIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmpIds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteEmployInfoRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteEmployInfoRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteEmployInfoRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEmployInfoByUserMode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEmployInfoByUserMode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEmployInfoByUserMode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			m.CompanyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdCardNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdCardNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyCommunity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyCommunity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyCommunityId", wireType)
			}
			m.CompanyCommunityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyCommunityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceDetailedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidenceDetailedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceCommunity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidenceCommunity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceCommunityId", wireType)
			}
			m.ResidenceCommunityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResidenceCommunityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			m.CreatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Department", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Department = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Temperature", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Temperature = float32(math.Float32frombits(v))
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpidemicSymptom", wireType)
			}
			m.EpidemicSymptom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpidemicSymptom |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetectionResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionOperator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetectionOperator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymptomWithin14Days", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SymptomWithin14Days = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormHuBei", wireType)
			}
			m.FormHuBei = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FormHuBei |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Touch_NCP", wireType)
			}
			m.Touch_NCP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Touch_NCP |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeenToHuBei", wireType)
			}
			m.BeenToHuBei = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeenToHuBei |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnChengDuTime", wireType)
			}
			m.ReturnChengDuTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturnChengDuTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnChengDuDetailedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnChengDuDetailedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnChengDuTransport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnChengDuTransport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportDetailInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransportDetailInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TouchHuBeiPeopleWithin14Days", wireType)
			}
			m.TouchHuBeiPeopleWithin14Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TouchHuBeiPeopleWithin14Days |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTouchTime", wireType)
			}
			m.LastTouchTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTouchTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromChengDuOutside", wireType)
			}
			m.FromChengDuOutside = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromChengDuOutside |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisPlaceTime", wireType)
			}
			m.ThisPlaceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThisPlaceTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnThisPlaceTransport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnThisPlaceTransport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profession", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profession = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifeTrace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LifeTrace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmployeeId", wireType)
			}
			m.EmployeeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EmployeeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetailedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComeFromWenjiang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComeFromWenjiang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComeFromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComeFromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComeFromDetailedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComeFromDetailedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyProvince", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyProvince = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyProvinceId", wireType)
			}
			m.CompanyProvinceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyProvinceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyCity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyCity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyCityId", wireType)
			}
			m.CompanyCityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyCityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyDistrict", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyDistrict = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyDistrictId", wireType)
			}
			m.CompanyDistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyDistrictId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEmployInfoByUserRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEmployInfoByUserRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEmployInfoByUserRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &QueryEmployInfoByUserMode{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetQiniuTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetQiniuTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetQiniuTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &base.Head{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetQiniuTokenRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetQiniuTokenRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetQiniuTokenRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebLoginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebLoginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebLoginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &base.Head{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebLoginInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebLoginInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebLoginInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommunityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adcode", wireType)
			}
			m.Adcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Adcode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			m.CreatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvinceId", wireType)
			}
			m.ProvinceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProvinceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaId", wireType)
			}
			m.AreaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebLoginRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebLoginRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebLoginRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &WebLoginInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddEmployeeInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddEmployeeInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddEmployeeInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &base.Head{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyProvince", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyProvince = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyProvinceId", wireType)
			}
			m.CompanyProvinceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyProvinceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyCity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyCity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyCityId", wireType)
			}
			m.CompanyCityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyCityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyDistrict", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyDistrict = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyDistrictId", wireType)
			}
			m.CompanyDistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyDistrictId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyStreet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyStreet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyStreetId", wireType)
			}
			m.CompanyStreetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyStreetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyCommunity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyCommunity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyCommunityId", wireType)
			}
			m.CompanyCommunityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyCommunityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			m.CompanyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdCardNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdCardNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceProvince", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidenceProvince = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceProvinceId", wireType)
			}
			m.ResidenceProvinceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResidenceProvinceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceCity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidenceCity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceCityId", wireType)
			}
			m.ResidenceCityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResidenceCityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceDistrict", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidenceDistrict = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceDistrictId", wireType)
			}
			m.ResidenceDistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResidenceDistrictId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceStreet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidenceStreet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceStreetId", wireType)
			}
			m.ResidenceStreetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResidenceStreetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceCommunity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidenceCommunity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceCommunityId", wireType)
			}
			m.ResidenceCommunityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResidenceCommunityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceDetailedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidenceDetailedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			m.CreatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDelete", wireType)
			}
			m.IsDelete = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsDelete |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddEmployeeInfoRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddEmployeeInfoRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddEmployeeInfoRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEmployeeInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEmployeeInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEmployeeInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &base.Head{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyProvince", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyProvince = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyProvinceId", wireType)
			}
			m.CompanyProvinceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyProvinceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyCity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyCity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyCityId", wireType)
			}
			m.CompanyCityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyCityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyDistrict", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyDistrict = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyDistrictId", wireType)
			}
			m.CompanyDistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyDistrictId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyStreet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyStreet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyStreetId", wireType)
			}
			m.CompanyStreetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyStreetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyCommunity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyCommunity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyCommunityId", wireType)
			}
			m.CompanyCommunityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyCommunityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			m.CompanyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdCardNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdCardNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceProvince", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidenceProvince = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceProvinceId", wireType)
			}
			m.ResidenceProvinceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResidenceProvinceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceCity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidenceCity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceCityId", wireType)
			}
			m.ResidenceCityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResidenceCityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceDistrict", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidenceDistrict = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceDistrictId", wireType)
			}
			m.ResidenceDistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResidenceDistrictId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceStreet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidenceStreet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceStreetId", wireType)
			}
			m.ResidenceStreetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResidenceStreetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceCommunity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidenceCommunity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceCommunityId", wireType)
			}
			m.ResidenceCommunityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResidenceCommunityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceDetailedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidenceDetailedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEmployeeInfoRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEmployeeInfoRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEmployeeInfoRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEmployeeInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEmployeeInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEmployeeInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &base.Head{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEmployeeInfoRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEmployeeInfoRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEmployeeInfoRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmployeeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EmployeeInfo == nil {
				m.EmployeeInfo = &EmployeeInfo{}
			}
			if err := m.EmployeeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmployeeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmployeeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmployeeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyProvince", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyProvince = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyProvinceId", wireType)
			}
			m.CompanyProvinceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyProvinceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyCity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyCity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyCityId", wireType)
			}
			m.CompanyCityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyCityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyDistrict", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyDistrict = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyDistrictId", wireType)
			}
			m.CompanyDistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyDistrictId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyStreet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyStreet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyStreetId", wireType)
			}
			m.CompanyStreetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyStreetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyCommunity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyCommunity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyCommunityId", wireType)
			}
			m.CompanyCommunityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyCommunityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			m.CompanyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdCardNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdCardNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceProvince", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidenceProvince = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceProvinceId", wireType)
			}
			m.ResidenceProvinceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResidenceProvinceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceCity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidenceCity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceCityId", wireType)
			}
			m.ResidenceCityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResidenceCityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceDistrict", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidenceDistrict = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceDistrictId", wireType)
			}
			m.ResidenceDistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResidenceDistrictId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceStreet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidenceStreet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceStreetId", wireType)
			}
			m.ResidenceStreetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResidenceStreetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceCommunity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidenceCommunity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceCommunityId", wireType)
			}
			m.ResidenceCommunityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResidenceCommunityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceDetailedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResidenceDetailedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDelete", wireType)
			}
			m.IsDelete = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsDelete |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddEmployeeHealthInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddEmployeeHealthInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddEmployeeHealthInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &base.Head{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymptomWithin14Days", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SymptomWithin14Days = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormHuBei", wireType)
			}
			m.FormHuBei = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FormHuBei |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Touch_NCP", wireType)
			}
			m.Touch_NCP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Touch_NCP |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeenToHuBei", wireType)
			}
			m.BeenToHuBei = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeenToHuBei |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnChengDuTime", wireType)
			}
			m.ReturnChengDuTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturnChengDuTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnChengDuDetailedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnChengDuDetailedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnChengDuTransport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnChengDuTransport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportDetailInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransportDetailInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TouchHuBeiPeopleWithin14Days", wireType)
			}
			m.TouchHuBeiPeopleWithin14Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TouchHuBeiPeopleWithin14Days |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTouchTime", wireType)
			}
			m.LastTouchTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTouchTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromChengDuOutside", wireType)
			}
			m.FromChengDuOutside = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromChengDuOutside |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisPlaceTime", wireType)
			}
			m.ThisPlaceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThisPlaceTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnThisPlaceTransport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnThisPlaceTransport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profession", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profession = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifeTrace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LifeTrace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmployeeId", wireType)
			}
			m.EmployeeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EmployeeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			m.CompanyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComeFromWenjiang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComeFromWenjiang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComeFromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComeFromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComeFromDetailedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComeFromDetailedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddEmployeeHealthInfoRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddEmployeeHealthInfoRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddEmployeeHealthInfoRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEmployeeHealthInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEmployeeHealthInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEmployeeHealthInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &base.Head{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymptomWithin14Days", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SymptomWithin14Days = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormHuBei", wireType)
			}
			m.FormHuBei = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FormHuBei |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Touch_NCP", wireType)
			}
			m.Touch_NCP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Touch_NCP |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeenToHuBei", wireType)
			}
			m.BeenToHuBei = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeenToHuBei |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnChengDuTime", wireType)
			}
			m.ReturnChengDuTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturnChengDuTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnChengDuDetailedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnChengDuDetailedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnChengDuTransport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnChengDuTransport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportDetailInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransportDetailInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TouchHuBeiPeopleWithin14Days", wireType)
			}
			m.TouchHuBeiPeopleWithin14Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TouchHuBeiPeopleWithin14Days |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTouchTime", wireType)
			}
			m.LastTouchTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTouchTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromChengDuOutside", wireType)
			}
			m.FromChengDuOutside = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromChengDuOutside |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisPlaceTime", wireType)
			}
			m.ThisPlaceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThisPlaceTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnThisPlaceTransport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnThisPlaceTransport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profession", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profession = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifeTrace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LifeTrace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmployeeId", wireType)
			}
			m.EmployeeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EmployeeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			m.CompanyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComeFromWenjiang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComeFromWenjiang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComeFromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComeFromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComeFromDetailedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComeFromDetailedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEmployeeHealthInfoRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEmployeeHealthInfoRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEmployeeHealthInfoRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEmployeeHealthInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEmployeeHealthInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEmployeeHealthInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmployeeId", wireType)
			}
			m.EmployeeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EmployeeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEmployeeHealthInfoRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEmployeeHealthInfoRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEmployeeHealthInfoRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmployeeHealthInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EmployeeHealthInfo == nil {
				m.EmployeeHealthInfo = &EmployeeHealthInfo{}
			}
			if err := m.EmployeeHealthInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmployeeHealthInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmployeeHealthInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmployeeHealthInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymptomWithin14Days", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SymptomWithin14Days = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormHuBei", wireType)
			}
			m.FormHuBei = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FormHuBei |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Touch_NCP", wireType)
			}
			m.Touch_NCP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Touch_NCP |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeenToHuBei", wireType)
			}
			m.BeenToHuBei = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeenToHuBei |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnChengDuTime", wireType)
			}
			m.ReturnChengDuTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturnChengDuTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnChengDuDetailedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnChengDuDetailedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnChengDuTransport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnChengDuTransport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportDetailInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransportDetailInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TouchHuBeiPeopleWithin14Days", wireType)
			}
			m.TouchHuBeiPeopleWithin14Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TouchHuBeiPeopleWithin14Days |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTouchTime", wireType)
			}
			m.LastTouchTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTouchTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromChengDuOutside", wireType)
			}
			m.FromChengDuOutside = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromChengDuOutside |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisPlaceTime", wireType)
			}
			m.ThisPlaceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThisPlaceTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnThisPlaceTransport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnThisPlaceTransport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profession", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profession = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifeTrace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LifeTrace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmployeeId", wireType)
			}
			m.EmployeeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EmployeeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			m.CompanyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComeFromWenjiang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComeFromWenjiang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComeFromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComeFromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComeFromDetailedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComeFromDetailedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddEmployeeHealthRecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddEmployeeHealthRecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddEmployeeHealthRecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmployeeId", wireType)
			}
			m.EmployeeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EmployeeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Department", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Department = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Temperature", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Temperature = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpidemicSymptom", wireType)
			}
			m.EpidemicSymptom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpidemicSymptom |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetectionResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionOperator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetectionOperator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			m.CompanyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddEmployeeHealthRecordRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddEmployeeHealthRecordRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddEmployeeHealthRecordRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEmployeeHealthRecordListByCompanyIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEmployeeHealthRecordListByCompanyIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEmployeeHealthRecordListByCompanyIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			m.CompanyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEmployeeHealthRecordListByCompanyIdRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEmployeeHealthRecordListByCompanyIdRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEmployeeHealthRecordListByCompanyIdRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmployeeHealthRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmployeeHealthRecords = append(m.EmployeeHealthRecords, &EmployeeHealthRecord{})
			if err := m.EmployeeHealthRecords[len(m.EmployeeHealthRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmployeeHealthRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmployeeHealthRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmployeeHealthRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmployeeId", wireType)
			}
			m.EmployeeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EmployeeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Department", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Department = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Temperature", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Temperature = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpidemicSymptom", wireType)
			}
			m.EpidemicSymptom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpidemicSymptom |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetectionResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionOperator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetectionOperator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			m.CreatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			m.CompanyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedTime", wireType)
			}
			m.UpdatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEmployeeHealthRecordListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEmployeeHealthRecordListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEmployeeHealthRecordListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmployeeId", wireType)
			}
			m.EmployeeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EmployeeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEmployeeHealthRecordListRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEmployeeHealthRecordListRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEmployeeHealthRecordListRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmployeeHealthRecordList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmployeeHealthRecordList = append(m.EmployeeHealthRecordList, &EmployeeHealthRecordListVo{})
			if err := m.EmployeeHealthRecordList[len(m.EmployeeHealthRecordList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmployeeHealthRecordListVo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmployeeHealthRecordListVo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmployeeHealthRecordListVo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmployeeId", wireType)
			}
			m.EmployeeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EmployeeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Department", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Department = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Temperature", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Temperature = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpidemicSymptom", wireType)
			}
			m.EpidemicSymptom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpidemicSymptom |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetectionResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectionOperator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiemployee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiemployee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetectionOperator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			m.CreatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedTime", wireType)
			}
			m.UpdatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiemployee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiemployee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApiemployee(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApiemployee
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiemployee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApiemployee
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApiemployee
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApiemployee
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApiemployee        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApiemployee          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApiemployee = fmt.Errorf("proto: unexpected end of group")
)
