// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: apicompany.proto

package apicompany

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	base "robot-server/api/base"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AddCompanyInfoReq struct {
	Head *base.Head `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// 企业名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 联系电话
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	// 公司归属省
	Province string `protobuf:"bytes,4,opt,name=province,proto3" json:"province,omitempty"`
	// 公司归属省id
	ProvinceId int64 `protobuf:"varint,5,opt,name=province_id,json=provinceId,proto3" json:"province_id,omitempty"`
	// 公司归属市
	City string `protobuf:"bytes,6,opt,name=city,proto3" json:"city,omitempty"`
	// 公司归属市id
	CityId int64 `protobuf:"varint,7,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	// 公司归属县/区
	District string `protobuf:"bytes,8,opt,name=district,proto3" json:"district,omitempty"`
	// 公司归属县/区id
	DistrictId int64 `protobuf:"varint,9,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
	// 公司归属街道
	Street string `protobuf:"bytes,10,opt,name=street,proto3" json:"street,omitempty"`
	// 公司归属街道id
	StreetId int64 `protobuf:"varint,11,opt,name=street_id,json=streetId,proto3" json:"street_id,omitempty"`
	// 公司归属社区
	Community string `protobuf:"bytes,12,opt,name=community,proto3" json:"community,omitempty"`
	// 公司归属社区id
	CommunityId int64 `protobuf:"varint,13,opt,name=community_id,json=communityId,proto3" json:"community_id,omitempty"`
	// 详细地址
	DetailedAddress string `protobuf:"bytes,14,opt,name=detailed_address,json=detailedAddress,proto3" json:"detailed_address,omitempty"`
	// 行政区划代码
	Adcode string `protobuf:"bytes,15,opt,name=adcode,proto3" json:"adcode,omitempty"`
	// 企业编码
	Identity string `protobuf:"bytes,16,opt,name=identity,proto3" json:"identity,omitempty"`
	// 行业
	Industry string `protobuf:"bytes,17,opt,name=industry,proto3" json:"industry,omitempty"`
}

func (m *AddCompanyInfoReq) Reset()         { *m = AddCompanyInfoReq{} }
func (m *AddCompanyInfoReq) String() string { return proto.CompactTextString(m) }
func (*AddCompanyInfoReq) ProtoMessage()    {}
func (*AddCompanyInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{0}
}
func (m *AddCompanyInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddCompanyInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddCompanyInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddCompanyInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCompanyInfoReq.Merge(m, src)
}
func (m *AddCompanyInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *AddCompanyInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCompanyInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddCompanyInfoReq proto.InternalMessageInfo

func (m *AddCompanyInfoReq) GetHead() *base.Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *AddCompanyInfoReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddCompanyInfoReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *AddCompanyInfoReq) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *AddCompanyInfoReq) GetProvinceId() int64 {
	if m != nil {
		return m.ProvinceId
	}
	return 0
}

func (m *AddCompanyInfoReq) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *AddCompanyInfoReq) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *AddCompanyInfoReq) GetDistrict() string {
	if m != nil {
		return m.District
	}
	return ""
}

func (m *AddCompanyInfoReq) GetDistrictId() int64 {
	if m != nil {
		return m.DistrictId
	}
	return 0
}

func (m *AddCompanyInfoReq) GetStreet() string {
	if m != nil {
		return m.Street
	}
	return ""
}

func (m *AddCompanyInfoReq) GetStreetId() int64 {
	if m != nil {
		return m.StreetId
	}
	return 0
}

func (m *AddCompanyInfoReq) GetCommunity() string {
	if m != nil {
		return m.Community
	}
	return ""
}

func (m *AddCompanyInfoReq) GetCommunityId() int64 {
	if m != nil {
		return m.CommunityId
	}
	return 0
}

func (m *AddCompanyInfoReq) GetDetailedAddress() string {
	if m != nil {
		return m.DetailedAddress
	}
	return ""
}

func (m *AddCompanyInfoReq) GetAdcode() string {
	if m != nil {
		return m.Adcode
	}
	return ""
}

func (m *AddCompanyInfoReq) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *AddCompanyInfoReq) GetIndustry() string {
	if m != nil {
		return m.Industry
	}
	return ""
}

type AddCompanyInfoRes struct {
	Base *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// 新增公司id
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *AddCompanyInfoRes) Reset()         { *m = AddCompanyInfoRes{} }
func (m *AddCompanyInfoRes) String() string { return proto.CompactTextString(m) }
func (*AddCompanyInfoRes) ProtoMessage()    {}
func (*AddCompanyInfoRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{1}
}
func (m *AddCompanyInfoRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddCompanyInfoRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddCompanyInfoRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddCompanyInfoRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCompanyInfoRes.Merge(m, src)
}
func (m *AddCompanyInfoRes) XXX_Size() int {
	return m.Size()
}
func (m *AddCompanyInfoRes) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCompanyInfoRes.DiscardUnknown(m)
}

var xxx_messageInfo_AddCompanyInfoRes proto.InternalMessageInfo

func (m *AddCompanyInfoRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *AddCompanyInfoRes) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateCompanyInfoReq struct {
	Head *base.Head `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// 企业名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 联系电话
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	// 公司归属省
	Province string `protobuf:"bytes,4,opt,name=province,proto3" json:"province,omitempty"`
	// 公司归属省id
	ProvinceId int64 `protobuf:"varint,5,opt,name=province_id,json=provinceId,proto3" json:"province_id,omitempty"`
	// 公司归属市
	City string `protobuf:"bytes,6,opt,name=city,proto3" json:"city,omitempty"`
	// 公司归属市id
	CityId int64 `protobuf:"varint,7,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	// 公司归属县/区
	District string `protobuf:"bytes,8,opt,name=district,proto3" json:"district,omitempty"`
	// 公司归属县/区id
	DistrictId int64 `protobuf:"varint,9,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
	// 公司归属街道
	Street string `protobuf:"bytes,10,opt,name=street,proto3" json:"street,omitempty"`
	// 公司归属街道id
	StreetId int64 `protobuf:"varint,11,opt,name=street_id,json=streetId,proto3" json:"street_id,omitempty"`
	// 公司归属社区
	Community string `protobuf:"bytes,12,opt,name=community,proto3" json:"community,omitempty"`
	// 公司归属社区id
	CommunityId int64 `protobuf:"varint,13,opt,name=community_id,json=communityId,proto3" json:"community_id,omitempty"`
	// 详细地址
	DetailedAddress string `protobuf:"bytes,14,opt,name=detailed_address,json=detailedAddress,proto3" json:"detailed_address,omitempty"`
	// 公司id
	Id int64 `protobuf:"varint,15,opt,name=id,proto3" json:"id,omitempty"`
	// 行政区划代码
	Adcode string `protobuf:"bytes,16,opt,name=adcode,proto3" json:"adcode,omitempty"`
	// 企业编码
	Identity string `protobuf:"bytes,17,opt,name=identity,proto3" json:"identity,omitempty"`
	// 行业
	Industry string `protobuf:"bytes,18,opt,name=industry,proto3" json:"industry,omitempty"`
}

func (m *UpdateCompanyInfoReq) Reset()         { *m = UpdateCompanyInfoReq{} }
func (m *UpdateCompanyInfoReq) String() string { return proto.CompactTextString(m) }
func (*UpdateCompanyInfoReq) ProtoMessage()    {}
func (*UpdateCompanyInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{2}
}
func (m *UpdateCompanyInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCompanyInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCompanyInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCompanyInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCompanyInfoReq.Merge(m, src)
}
func (m *UpdateCompanyInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCompanyInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCompanyInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCompanyInfoReq proto.InternalMessageInfo

func (m *UpdateCompanyInfoReq) GetHead() *base.Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *UpdateCompanyInfoReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateCompanyInfoReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UpdateCompanyInfoReq) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *UpdateCompanyInfoReq) GetProvinceId() int64 {
	if m != nil {
		return m.ProvinceId
	}
	return 0
}

func (m *UpdateCompanyInfoReq) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *UpdateCompanyInfoReq) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *UpdateCompanyInfoReq) GetDistrict() string {
	if m != nil {
		return m.District
	}
	return ""
}

func (m *UpdateCompanyInfoReq) GetDistrictId() int64 {
	if m != nil {
		return m.DistrictId
	}
	return 0
}

func (m *UpdateCompanyInfoReq) GetStreet() string {
	if m != nil {
		return m.Street
	}
	return ""
}

func (m *UpdateCompanyInfoReq) GetStreetId() int64 {
	if m != nil {
		return m.StreetId
	}
	return 0
}

func (m *UpdateCompanyInfoReq) GetCommunity() string {
	if m != nil {
		return m.Community
	}
	return ""
}

func (m *UpdateCompanyInfoReq) GetCommunityId() int64 {
	if m != nil {
		return m.CommunityId
	}
	return 0
}

func (m *UpdateCompanyInfoReq) GetDetailedAddress() string {
	if m != nil {
		return m.DetailedAddress
	}
	return ""
}

func (m *UpdateCompanyInfoReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateCompanyInfoReq) GetAdcode() string {
	if m != nil {
		return m.Adcode
	}
	return ""
}

func (m *UpdateCompanyInfoReq) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *UpdateCompanyInfoReq) GetIndustry() string {
	if m != nil {
		return m.Industry
	}
	return ""
}

type UpdateCompanyInfoRes struct {
	Base *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (m *UpdateCompanyInfoRes) Reset()         { *m = UpdateCompanyInfoRes{} }
func (m *UpdateCompanyInfoRes) String() string { return proto.CompactTextString(m) }
func (*UpdateCompanyInfoRes) ProtoMessage()    {}
func (*UpdateCompanyInfoRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{3}
}
func (m *UpdateCompanyInfoRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCompanyInfoRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCompanyInfoRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCompanyInfoRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCompanyInfoRes.Merge(m, src)
}
func (m *UpdateCompanyInfoRes) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCompanyInfoRes) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCompanyInfoRes.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCompanyInfoRes proto.InternalMessageInfo

func (m *UpdateCompanyInfoRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

type GetCompanyInfoReq struct {
	Head *base.Head `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// 公司id
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// 公司电话
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (m *GetCompanyInfoReq) Reset()         { *m = GetCompanyInfoReq{} }
func (m *GetCompanyInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetCompanyInfoReq) ProtoMessage()    {}
func (*GetCompanyInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{4}
}
func (m *GetCompanyInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCompanyInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCompanyInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCompanyInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCompanyInfoReq.Merge(m, src)
}
func (m *GetCompanyInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetCompanyInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCompanyInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetCompanyInfoReq proto.InternalMessageInfo

func (m *GetCompanyInfoReq) GetHead() *base.Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *GetCompanyInfoReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetCompanyInfoReq) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type GetCompanyInfoRes struct {
	Base        *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CompanyInfo *CompanyInfo  `protobuf:"bytes,2,opt,name=company_info,json=companyInfo,proto3" json:"company_info,omitempty"`
}

func (m *GetCompanyInfoRes) Reset()         { *m = GetCompanyInfoRes{} }
func (m *GetCompanyInfoRes) String() string { return proto.CompactTextString(m) }
func (*GetCompanyInfoRes) ProtoMessage()    {}
func (*GetCompanyInfoRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{5}
}
func (m *GetCompanyInfoRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCompanyInfoRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCompanyInfoRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCompanyInfoRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCompanyInfoRes.Merge(m, src)
}
func (m *GetCompanyInfoRes) XXX_Size() int {
	return m.Size()
}
func (m *GetCompanyInfoRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCompanyInfoRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetCompanyInfoRes proto.InternalMessageInfo

func (m *GetCompanyInfoRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetCompanyInfoRes) GetCompanyInfo() *CompanyInfo {
	if m != nil {
		return m.CompanyInfo
	}
	return nil
}

type CompanyInfo struct {
	// 企业id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 企业名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 联系电话
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	// 公司归属省
	Province string `protobuf:"bytes,4,opt,name=province,proto3" json:"province,omitempty"`
	// 公司归属省id
	ProvinceId int64 `protobuf:"varint,5,opt,name=province_id,json=provinceId,proto3" json:"province_id,omitempty"`
	// 公司归属市
	City string `protobuf:"bytes,6,opt,name=city,proto3" json:"city,omitempty"`
	// 公司归属市id
	CityId int64 `protobuf:"varint,7,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	// 公司归属县/区
	District string `protobuf:"bytes,8,opt,name=district,proto3" json:"district,omitempty"`
	// 公司归属县/区id
	DistrictId int64 `protobuf:"varint,9,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
	// 街道
	Street string `protobuf:"bytes,10,opt,name=street,proto3" json:"street,omitempty"`
	// 街道id
	StreetId int64 `protobuf:"varint,11,opt,name=street_id,json=streetId,proto3" json:"street_id,omitempty"`
	// 社区
	Community string `protobuf:"bytes,12,opt,name=community,proto3" json:"community,omitempty"`
	// 社区id
	CommunityId int64 `protobuf:"varint,13,opt,name=community_id,json=communityId,proto3" json:"community_id,omitempty"`
	// 详细地址
	DetailedAddress string `protobuf:"bytes,14,opt,name=detailed_address,json=detailedAddress,proto3" json:"detailed_address,omitempty"`
	// 行政区划代码
	Adcode string `protobuf:"bytes,15,opt,name=adcode,proto3" json:"adcode,omitempty"`
	// 企业编码
	Identity string `protobuf:"bytes,16,opt,name=identity,proto3" json:"identity,omitempty"`
	// 行业
	Industry string `protobuf:"bytes,17,opt,name=industry,proto3" json:"industry,omitempty"`
	// 删除标识, 1 未删除；2已删除
	IsDelete int32 `protobuf:"varint,18,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	// 创建时间
	CreateTime int64 `protobuf:"varint,19,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// 修改时间
	UpdateTime int64 `protobuf:"varint,20,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (m *CompanyInfo) Reset()         { *m = CompanyInfo{} }
func (m *CompanyInfo) String() string { return proto.CompactTextString(m) }
func (*CompanyInfo) ProtoMessage()    {}
func (*CompanyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{6}
}
func (m *CompanyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompanyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompanyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompanyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompanyInfo.Merge(m, src)
}
func (m *CompanyInfo) XXX_Size() int {
	return m.Size()
}
func (m *CompanyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CompanyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CompanyInfo proto.InternalMessageInfo

func (m *CompanyInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CompanyInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CompanyInfo) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *CompanyInfo) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *CompanyInfo) GetProvinceId() int64 {
	if m != nil {
		return m.ProvinceId
	}
	return 0
}

func (m *CompanyInfo) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *CompanyInfo) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *CompanyInfo) GetDistrict() string {
	if m != nil {
		return m.District
	}
	return ""
}

func (m *CompanyInfo) GetDistrictId() int64 {
	if m != nil {
		return m.DistrictId
	}
	return 0
}

func (m *CompanyInfo) GetStreet() string {
	if m != nil {
		return m.Street
	}
	return ""
}

func (m *CompanyInfo) GetStreetId() int64 {
	if m != nil {
		return m.StreetId
	}
	return 0
}

func (m *CompanyInfo) GetCommunity() string {
	if m != nil {
		return m.Community
	}
	return ""
}

func (m *CompanyInfo) GetCommunityId() int64 {
	if m != nil {
		return m.CommunityId
	}
	return 0
}

func (m *CompanyInfo) GetDetailedAddress() string {
	if m != nil {
		return m.DetailedAddress
	}
	return ""
}

func (m *CompanyInfo) GetAdcode() string {
	if m != nil {
		return m.Adcode
	}
	return ""
}

func (m *CompanyInfo) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *CompanyInfo) GetIndustry() string {
	if m != nil {
		return m.Industry
	}
	return ""
}

func (m *CompanyInfo) GetIsDelete() int32 {
	if m != nil {
		return m.IsDelete
	}
	return 0
}

func (m *CompanyInfo) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *CompanyInfo) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

type AddPreventionRecordReq struct {
	Head *base.Head `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// 公司id
	CompanyId int64 `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 返岗人数
	ReturneeNum int32 `protobuf:"varint,3,opt,name=returnee_num,json=returneeNum,proto3" json:"returnee_num,omitempty"`
	// 防控物资准备情况现场图片路径，以","分割
	MaterialImage string `protobuf:"bytes,4,opt,name=material_image,json=materialImage,proto3" json:"material_image,omitempty"`
	// 防控消毒及废弃口罩手套回收现场图片路径,以","分割
	DisinfectionImage string `protobuf:"bytes,5,opt,name=disinfection_image,json=disinfectionImage,proto3" json:"disinfection_image,omitempty"`
	// 消杀时间
	DisinfectionTime int64 `protobuf:"varint,6,opt,name=disinfection_time,json=disinfectionTime,proto3" json:"disinfection_time,omitempty"`
	// 消杀防疫地点
	DisinfectionRange string `protobuf:"bytes,7,opt,name=disinfection_range,json=disinfectionRange,proto3" json:"disinfection_range,omitempty"`
	// 消杀防疫人员
	DisinfectionOperator string `protobuf:"bytes,8,opt,name=disinfection_operator,json=disinfectionOperator,proto3" json:"disinfection_operator,omitempty"`
}

func (m *AddPreventionRecordReq) Reset()         { *m = AddPreventionRecordReq{} }
func (m *AddPreventionRecordReq) String() string { return proto.CompactTextString(m) }
func (*AddPreventionRecordReq) ProtoMessage()    {}
func (*AddPreventionRecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{7}
}
func (m *AddPreventionRecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPreventionRecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPreventionRecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPreventionRecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPreventionRecordReq.Merge(m, src)
}
func (m *AddPreventionRecordReq) XXX_Size() int {
	return m.Size()
}
func (m *AddPreventionRecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPreventionRecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddPreventionRecordReq proto.InternalMessageInfo

func (m *AddPreventionRecordReq) GetHead() *base.Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *AddPreventionRecordReq) GetCompanyId() int64 {
	if m != nil {
		return m.CompanyId
	}
	return 0
}

func (m *AddPreventionRecordReq) GetReturneeNum() int32 {
	if m != nil {
		return m.ReturneeNum
	}
	return 0
}

func (m *AddPreventionRecordReq) GetMaterialImage() string {
	if m != nil {
		return m.MaterialImage
	}
	return ""
}

func (m *AddPreventionRecordReq) GetDisinfectionImage() string {
	if m != nil {
		return m.DisinfectionImage
	}
	return ""
}

func (m *AddPreventionRecordReq) GetDisinfectionTime() int64 {
	if m != nil {
		return m.DisinfectionTime
	}
	return 0
}

func (m *AddPreventionRecordReq) GetDisinfectionRange() string {
	if m != nil {
		return m.DisinfectionRange
	}
	return ""
}

func (m *AddPreventionRecordReq) GetDisinfectionOperator() string {
	if m != nil {
		return m.DisinfectionOperator
	}
	return ""
}

type AddPreventionRecordRes struct {
	Base *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Id   int64         `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *AddPreventionRecordRes) Reset()         { *m = AddPreventionRecordRes{} }
func (m *AddPreventionRecordRes) String() string { return proto.CompactTextString(m) }
func (*AddPreventionRecordRes) ProtoMessage()    {}
func (*AddPreventionRecordRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{8}
}
func (m *AddPreventionRecordRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPreventionRecordRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPreventionRecordRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPreventionRecordRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPreventionRecordRes.Merge(m, src)
}
func (m *AddPreventionRecordRes) XXX_Size() int {
	return m.Size()
}
func (m *AddPreventionRecordRes) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPreventionRecordRes.DiscardUnknown(m)
}

var xxx_messageInfo_AddPreventionRecordRes proto.InternalMessageInfo

func (m *AddPreventionRecordRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *AddPreventionRecordRes) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdatePreventionRecordReq struct {
	Head *base.Head `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// 公司id
	CompanyId int64 `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 返岗人数
	ReturneeNum int32 `protobuf:"varint,3,opt,name=returnee_num,json=returneeNum,proto3" json:"returnee_num,omitempty"`
	// 防控物资准备情况现场图片路径，以","分割
	MaterialImage string `protobuf:"bytes,4,opt,name=material_image,json=materialImage,proto3" json:"material_image,omitempty"`
	// 防控消毒及废弃口罩手套回收现场图片路径,以","分割
	DisinfectionImage string `protobuf:"bytes,5,opt,name=disinfection_image,json=disinfectionImage,proto3" json:"disinfection_image,omitempty"`
	// 消杀时间
	DisinfectionTime int64 `protobuf:"varint,6,opt,name=disinfection_time,json=disinfectionTime,proto3" json:"disinfection_time,omitempty"`
	// 消杀防疫地点
	DisinfectionRange string `protobuf:"bytes,7,opt,name=disinfection_range,json=disinfectionRange,proto3" json:"disinfection_range,omitempty"`
	// 消杀防疫人员
	DisinfectionOperator string `protobuf:"bytes,8,opt,name=disinfection_operator,json=disinfectionOperator,proto3" json:"disinfection_operator,omitempty"`
	// 企业防控信息id
	Id int64 `protobuf:"varint,9,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *UpdatePreventionRecordReq) Reset()         { *m = UpdatePreventionRecordReq{} }
func (m *UpdatePreventionRecordReq) String() string { return proto.CompactTextString(m) }
func (*UpdatePreventionRecordReq) ProtoMessage()    {}
func (*UpdatePreventionRecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{9}
}
func (m *UpdatePreventionRecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePreventionRecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePreventionRecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePreventionRecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePreventionRecordReq.Merge(m, src)
}
func (m *UpdatePreventionRecordReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePreventionRecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePreventionRecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePreventionRecordReq proto.InternalMessageInfo

func (m *UpdatePreventionRecordReq) GetHead() *base.Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *UpdatePreventionRecordReq) GetCompanyId() int64 {
	if m != nil {
		return m.CompanyId
	}
	return 0
}

func (m *UpdatePreventionRecordReq) GetReturneeNum() int32 {
	if m != nil {
		return m.ReturneeNum
	}
	return 0
}

func (m *UpdatePreventionRecordReq) GetMaterialImage() string {
	if m != nil {
		return m.MaterialImage
	}
	return ""
}

func (m *UpdatePreventionRecordReq) GetDisinfectionImage() string {
	if m != nil {
		return m.DisinfectionImage
	}
	return ""
}

func (m *UpdatePreventionRecordReq) GetDisinfectionTime() int64 {
	if m != nil {
		return m.DisinfectionTime
	}
	return 0
}

func (m *UpdatePreventionRecordReq) GetDisinfectionRange() string {
	if m != nil {
		return m.DisinfectionRange
	}
	return ""
}

func (m *UpdatePreventionRecordReq) GetDisinfectionOperator() string {
	if m != nil {
		return m.DisinfectionOperator
	}
	return ""
}

func (m *UpdatePreventionRecordReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdatePreventionRecordRes struct {
	Base *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (m *UpdatePreventionRecordRes) Reset()         { *m = UpdatePreventionRecordRes{} }
func (m *UpdatePreventionRecordRes) String() string { return proto.CompactTextString(m) }
func (*UpdatePreventionRecordRes) ProtoMessage()    {}
func (*UpdatePreventionRecordRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{10}
}
func (m *UpdatePreventionRecordRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePreventionRecordRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePreventionRecordRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePreventionRecordRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePreventionRecordRes.Merge(m, src)
}
func (m *UpdatePreventionRecordRes) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePreventionRecordRes) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePreventionRecordRes.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePreventionRecordRes proto.InternalMessageInfo

func (m *UpdatePreventionRecordRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

type GetPreventionRecordReq struct {
	Head *base.Head `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// 公司id
	CompanyId int64 `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (m *GetPreventionRecordReq) Reset()         { *m = GetPreventionRecordReq{} }
func (m *GetPreventionRecordReq) String() string { return proto.CompactTextString(m) }
func (*GetPreventionRecordReq) ProtoMessage()    {}
func (*GetPreventionRecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{11}
}
func (m *GetPreventionRecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPreventionRecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPreventionRecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPreventionRecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreventionRecordReq.Merge(m, src)
}
func (m *GetPreventionRecordReq) XXX_Size() int {
	return m.Size()
}
func (m *GetPreventionRecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreventionRecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreventionRecordReq proto.InternalMessageInfo

func (m *GetPreventionRecordReq) GetHead() *base.Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *GetPreventionRecordReq) GetCompanyId() int64 {
	if m != nil {
		return m.CompanyId
	}
	return 0
}

type GetPreventionRecordRes struct {
	Base             *base.BaseRes     `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	PreventionRecord *PreventionRecord `protobuf:"bytes,2,opt,name=prevention_record,json=preventionRecord,proto3" json:"prevention_record,omitempty"`
}

func (m *GetPreventionRecordRes) Reset()         { *m = GetPreventionRecordRes{} }
func (m *GetPreventionRecordRes) String() string { return proto.CompactTextString(m) }
func (*GetPreventionRecordRes) ProtoMessage()    {}
func (*GetPreventionRecordRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{12}
}
func (m *GetPreventionRecordRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPreventionRecordRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPreventionRecordRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPreventionRecordRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreventionRecordRes.Merge(m, src)
}
func (m *GetPreventionRecordRes) XXX_Size() int {
	return m.Size()
}
func (m *GetPreventionRecordRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreventionRecordRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreventionRecordRes proto.InternalMessageInfo

func (m *GetPreventionRecordRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetPreventionRecordRes) GetPreventionRecord() *PreventionRecord {
	if m != nil {
		return m.PreventionRecord
	}
	return nil
}

type PreventionRecord struct {
	// 公司id
	CompanyId int64 `protobuf:"varint,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 返岗人数
	ReturneeNum int32 `protobuf:"varint,2,opt,name=returnee_num,json=returneeNum,proto3" json:"returnee_num,omitempty"`
	// 防控物资准备情况现场图片路径，以","分割
	MaterialImage string `protobuf:"bytes,3,opt,name=material_image,json=materialImage,proto3" json:"material_image,omitempty"`
	// 防控消毒及废弃口罩手套回收现场图片路径,以","分割
	DisinfectionImage string `protobuf:"bytes,4,opt,name=disinfection_image,json=disinfectionImage,proto3" json:"disinfection_image,omitempty"`
	// 消杀时间
	DisinfectionTime int64 `protobuf:"varint,5,opt,name=disinfection_time,json=disinfectionTime,proto3" json:"disinfection_time,omitempty"`
	// 消杀防疫地点
	DisinfectionRange string `protobuf:"bytes,6,opt,name=disinfection_range,json=disinfectionRange,proto3" json:"disinfection_range,omitempty"`
	// 消杀防疫人员
	DisinfectionOperator string `protobuf:"bytes,7,opt,name=disinfection_operator,json=disinfectionOperator,proto3" json:"disinfection_operator,omitempty"`
	// 企业防控信息id
	Id int64 `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
	// 已填报员工数
	ReportEmployeeNum int32 `protobuf:"varint,9,opt,name=report_employee_num,json=reportEmployeeNum,proto3" json:"report_employee_num,omitempty"`
	// 创建时间
	CreateTime int64 `protobuf:"varint,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// 修改时间
	UpdateTime int64 `protobuf:"varint,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (m *PreventionRecord) Reset()         { *m = PreventionRecord{} }
func (m *PreventionRecord) String() string { return proto.CompactTextString(m) }
func (*PreventionRecord) ProtoMessage()    {}
func (*PreventionRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{13}
}
func (m *PreventionRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreventionRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreventionRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreventionRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreventionRecord.Merge(m, src)
}
func (m *PreventionRecord) XXX_Size() int {
	return m.Size()
}
func (m *PreventionRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_PreventionRecord.DiscardUnknown(m)
}

var xxx_messageInfo_PreventionRecord proto.InternalMessageInfo

func (m *PreventionRecord) GetCompanyId() int64 {
	if m != nil {
		return m.CompanyId
	}
	return 0
}

func (m *PreventionRecord) GetReturneeNum() int32 {
	if m != nil {
		return m.ReturneeNum
	}
	return 0
}

func (m *PreventionRecord) GetMaterialImage() string {
	if m != nil {
		return m.MaterialImage
	}
	return ""
}

func (m *PreventionRecord) GetDisinfectionImage() string {
	if m != nil {
		return m.DisinfectionImage
	}
	return ""
}

func (m *PreventionRecord) GetDisinfectionTime() int64 {
	if m != nil {
		return m.DisinfectionTime
	}
	return 0
}

func (m *PreventionRecord) GetDisinfectionRange() string {
	if m != nil {
		return m.DisinfectionRange
	}
	return ""
}

func (m *PreventionRecord) GetDisinfectionOperator() string {
	if m != nil {
		return m.DisinfectionOperator
	}
	return ""
}

func (m *PreventionRecord) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PreventionRecord) GetReportEmployeeNum() int32 {
	if m != nil {
		return m.ReportEmployeeNum
	}
	return 0
}

func (m *PreventionRecord) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *PreventionRecord) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

type GetCompanyInfoListReq struct {
	Head *base.Head `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// 行政区划代码
	Adcode string `protobuf:"bytes,2,opt,name=adcode,proto3" json:"adcode,omitempty"`
	// 街道id
	StreetId int64 `protobuf:"varint,3,opt,name=street_id,json=streetId,proto3" json:"street_id,omitempty"`
	// 社区id
	CommunityId int64 `protobuf:"varint,4,opt,name=community_id,json=communityId,proto3" json:"community_id,omitempty"`
	// 页数
	Page int32 `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	// 每页显示数量
	Limit int32 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	// 查询字段
	Query string `protobuf:"bytes,7,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *GetCompanyInfoListReq) Reset()         { *m = GetCompanyInfoListReq{} }
func (m *GetCompanyInfoListReq) String() string { return proto.CompactTextString(m) }
func (*GetCompanyInfoListReq) ProtoMessage()    {}
func (*GetCompanyInfoListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{14}
}
func (m *GetCompanyInfoListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCompanyInfoListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCompanyInfoListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCompanyInfoListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCompanyInfoListReq.Merge(m, src)
}
func (m *GetCompanyInfoListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetCompanyInfoListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCompanyInfoListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetCompanyInfoListReq proto.InternalMessageInfo

func (m *GetCompanyInfoListReq) GetHead() *base.Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *GetCompanyInfoListReq) GetAdcode() string {
	if m != nil {
		return m.Adcode
	}
	return ""
}

func (m *GetCompanyInfoListReq) GetStreetId() int64 {
	if m != nil {
		return m.StreetId
	}
	return 0
}

func (m *GetCompanyInfoListReq) GetCommunityId() int64 {
	if m != nil {
		return m.CommunityId
	}
	return 0
}

func (m *GetCompanyInfoListReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetCompanyInfoListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetCompanyInfoListReq) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type GetCompanyInfoListRes struct {
	Base            *base.BaseRes        `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CompanyInfoList []*CompanyInfoListVo `protobuf:"bytes,2,rep,name=company_info_list,json=companyInfoList,proto3" json:"company_info_list,omitempty"`
	Total           int32                `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *GetCompanyInfoListRes) Reset()         { *m = GetCompanyInfoListRes{} }
func (m *GetCompanyInfoListRes) String() string { return proto.CompactTextString(m) }
func (*GetCompanyInfoListRes) ProtoMessage()    {}
func (*GetCompanyInfoListRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{15}
}
func (m *GetCompanyInfoListRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCompanyInfoListRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCompanyInfoListRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCompanyInfoListRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCompanyInfoListRes.Merge(m, src)
}
func (m *GetCompanyInfoListRes) XXX_Size() int {
	return m.Size()
}
func (m *GetCompanyInfoListRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCompanyInfoListRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetCompanyInfoListRes proto.InternalMessageInfo

func (m *GetCompanyInfoListRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetCompanyInfoListRes) GetCompanyInfoList() []*CompanyInfoListVo {
	if m != nil {
		return m.CompanyInfoList
	}
	return nil
}

func (m *GetCompanyInfoListRes) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type CompanyInfoListVo struct {
	// 企业id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 企业名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 联系电话
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	// 公司归属省
	Province string `protobuf:"bytes,4,opt,name=province,proto3" json:"province,omitempty"`
	// 公司归属省id
	ProvinceId int64 `protobuf:"varint,5,opt,name=province_id,json=provinceId,proto3" json:"province_id,omitempty"`
	// 公司归属市
	City string `protobuf:"bytes,6,opt,name=city,proto3" json:"city,omitempty"`
	// 公司归属市id
	CityId int64 `protobuf:"varint,7,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	// 公司归属县/区
	District string `protobuf:"bytes,8,opt,name=district,proto3" json:"district,omitempty"`
	// 公司归属县/区id
	DistrictId int64 `protobuf:"varint,9,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
	// 社区
	Community string `protobuf:"bytes,10,opt,name=community,proto3" json:"community,omitempty"`
	// 详细地址
	DetailedAddress string `protobuf:"bytes,11,opt,name=detailed_address,json=detailedAddress,proto3" json:"detailed_address,omitempty"`
	// 企业编码
	Identity string `protobuf:"bytes,14,opt,name=identity,proto3" json:"identity,omitempty"`
	// 行业
	IsDelete int32 `protobuf:"varint,16,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	// 创建时间
	CreateTime int64 `protobuf:"varint,17,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// 修改时间
	UpdateTime int64 `protobuf:"varint,18,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// 返岗人数
	ReturneeNum int32 `protobuf:"varint,19,opt,name=returnee_num,json=returneeNum,proto3" json:"returnee_num,omitempty"`
	// 防控物资准备情况现场图片路径，以","分割
	MaterialImage string `protobuf:"bytes,20,opt,name=material_image,json=materialImage,proto3" json:"material_image,omitempty"`
	// 防控消毒及废弃口罩手套回收现场图片路径,以","分割
	DisinfectionImage string `protobuf:"bytes,21,opt,name=disinfection_image,json=disinfectionImage,proto3" json:"disinfection_image,omitempty"`
	// 消杀时间
	DisinfectionTime int64 `protobuf:"varint,22,opt,name=disinfection_time,json=disinfectionTime,proto3" json:"disinfection_time,omitempty"`
	// 消杀防疫地点
	DisinfectionRange string `protobuf:"bytes,23,opt,name=disinfection_range,json=disinfectionRange,proto3" json:"disinfection_range,omitempty"`
	// 消杀防疫人员
	DisinfectionOperator string `protobuf:"bytes,24,opt,name=disinfection_operator,json=disinfectionOperator,proto3" json:"disinfection_operator,omitempty"`
	// 已填报员工数
	ReportEmployeeNum int32 `protobuf:"varint,25,opt,name=report_employee_num,json=reportEmployeeNum,proto3" json:"report_employee_num,omitempty"`
}

func (m *CompanyInfoListVo) Reset()         { *m = CompanyInfoListVo{} }
func (m *CompanyInfoListVo) String() string { return proto.CompactTextString(m) }
func (*CompanyInfoListVo) ProtoMessage()    {}
func (*CompanyInfoListVo) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{16}
}
func (m *CompanyInfoListVo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompanyInfoListVo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompanyInfoListVo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompanyInfoListVo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompanyInfoListVo.Merge(m, src)
}
func (m *CompanyInfoListVo) XXX_Size() int {
	return m.Size()
}
func (m *CompanyInfoListVo) XXX_DiscardUnknown() {
	xxx_messageInfo_CompanyInfoListVo.DiscardUnknown(m)
}

var xxx_messageInfo_CompanyInfoListVo proto.InternalMessageInfo

func (m *CompanyInfoListVo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CompanyInfoListVo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CompanyInfoListVo) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *CompanyInfoListVo) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *CompanyInfoListVo) GetProvinceId() int64 {
	if m != nil {
		return m.ProvinceId
	}
	return 0
}

func (m *CompanyInfoListVo) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *CompanyInfoListVo) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *CompanyInfoListVo) GetDistrict() string {
	if m != nil {
		return m.District
	}
	return ""
}

func (m *CompanyInfoListVo) GetDistrictId() int64 {
	if m != nil {
		return m.DistrictId
	}
	return 0
}

func (m *CompanyInfoListVo) GetCommunity() string {
	if m != nil {
		return m.Community
	}
	return ""
}

func (m *CompanyInfoListVo) GetDetailedAddress() string {
	if m != nil {
		return m.DetailedAddress
	}
	return ""
}

func (m *CompanyInfoListVo) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *CompanyInfoListVo) GetIsDelete() int32 {
	if m != nil {
		return m.IsDelete
	}
	return 0
}

func (m *CompanyInfoListVo) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *CompanyInfoListVo) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *CompanyInfoListVo) GetReturneeNum() int32 {
	if m != nil {
		return m.ReturneeNum
	}
	return 0
}

func (m *CompanyInfoListVo) GetMaterialImage() string {
	if m != nil {
		return m.MaterialImage
	}
	return ""
}

func (m *CompanyInfoListVo) GetDisinfectionImage() string {
	if m != nil {
		return m.DisinfectionImage
	}
	return ""
}

func (m *CompanyInfoListVo) GetDisinfectionTime() int64 {
	if m != nil {
		return m.DisinfectionTime
	}
	return 0
}

func (m *CompanyInfoListVo) GetDisinfectionRange() string {
	if m != nil {
		return m.DisinfectionRange
	}
	return ""
}

func (m *CompanyInfoListVo) GetDisinfectionOperator() string {
	if m != nil {
		return m.DisinfectionOperator
	}
	return ""
}

func (m *CompanyInfoListVo) GetReportEmployeeNum() int32 {
	if m != nil {
		return m.ReportEmployeeNum
	}
	return 0
}

type DeleteCompanyInfoReq struct {
	Head *base.Head `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// 公司id
	Ids string `protobuf:"bytes,2,opt,name=ids,proto3" json:"ids,omitempty"`
}

func (m *DeleteCompanyInfoReq) Reset()         { *m = DeleteCompanyInfoReq{} }
func (m *DeleteCompanyInfoReq) String() string { return proto.CompactTextString(m) }
func (*DeleteCompanyInfoReq) ProtoMessage()    {}
func (*DeleteCompanyInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{17}
}
func (m *DeleteCompanyInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCompanyInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCompanyInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteCompanyInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCompanyInfoReq.Merge(m, src)
}
func (m *DeleteCompanyInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCompanyInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCompanyInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCompanyInfoReq proto.InternalMessageInfo

func (m *DeleteCompanyInfoReq) GetHead() *base.Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *DeleteCompanyInfoReq) GetIds() string {
	if m != nil {
		return m.Ids
	}
	return ""
}

type DeleteCompanyInfoRes struct {
	Base *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (m *DeleteCompanyInfoRes) Reset()         { *m = DeleteCompanyInfoRes{} }
func (m *DeleteCompanyInfoRes) String() string { return proto.CompactTextString(m) }
func (*DeleteCompanyInfoRes) ProtoMessage()    {}
func (*DeleteCompanyInfoRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{18}
}
func (m *DeleteCompanyInfoRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCompanyInfoRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCompanyInfoRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteCompanyInfoRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCompanyInfoRes.Merge(m, src)
}
func (m *DeleteCompanyInfoRes) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCompanyInfoRes) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCompanyInfoRes.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCompanyInfoRes proto.InternalMessageInfo

func (m *DeleteCompanyInfoRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

type GetPreventionRecordListReq struct {
	Head *base.Head `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// 企业id
	CompanyId int64 `protobuf:"varint,4,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 页数
	Page int32 `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	// 每页显示数量
	Limit int32 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *GetPreventionRecordListReq) Reset()         { *m = GetPreventionRecordListReq{} }
func (m *GetPreventionRecordListReq) String() string { return proto.CompactTextString(m) }
func (*GetPreventionRecordListReq) ProtoMessage()    {}
func (*GetPreventionRecordListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{19}
}
func (m *GetPreventionRecordListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPreventionRecordListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPreventionRecordListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPreventionRecordListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreventionRecordListReq.Merge(m, src)
}
func (m *GetPreventionRecordListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetPreventionRecordListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreventionRecordListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreventionRecordListReq proto.InternalMessageInfo

func (m *GetPreventionRecordListReq) GetHead() *base.Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *GetPreventionRecordListReq) GetCompanyId() int64 {
	if m != nil {
		return m.CompanyId
	}
	return 0
}

func (m *GetPreventionRecordListReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetPreventionRecordListReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetPreventionRecordListRes struct {
	Base                 *base.BaseRes             `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	PreventionRecordList []*PreventionRecordListVo `protobuf:"bytes,2,rep,name=prevention_record_list,json=preventionRecordList,proto3" json:"prevention_record_list,omitempty"`
	Total                int32                     `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *GetPreventionRecordListRes) Reset()         { *m = GetPreventionRecordListRes{} }
func (m *GetPreventionRecordListRes) String() string { return proto.CompactTextString(m) }
func (*GetPreventionRecordListRes) ProtoMessage()    {}
func (*GetPreventionRecordListRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{20}
}
func (m *GetPreventionRecordListRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPreventionRecordListRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPreventionRecordListRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPreventionRecordListRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreventionRecordListRes.Merge(m, src)
}
func (m *GetPreventionRecordListRes) XXX_Size() int {
	return m.Size()
}
func (m *GetPreventionRecordListRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreventionRecordListRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreventionRecordListRes proto.InternalMessageInfo

func (m *GetPreventionRecordListRes) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *GetPreventionRecordListRes) GetPreventionRecordList() []*PreventionRecordListVo {
	if m != nil {
		return m.PreventionRecordList
	}
	return nil
}

func (m *GetPreventionRecordListRes) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type PreventionRecordListVo struct {
	// 公司id
	CompanyId int64 `protobuf:"varint,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 返岗人数
	ReturneeNum int32 `protobuf:"varint,2,opt,name=returnee_num,json=returneeNum,proto3" json:"returnee_num,omitempty"`
	// 防控物资准备情况现场图片路径，以","分割
	MaterialImage string `protobuf:"bytes,3,opt,name=material_image,json=materialImage,proto3" json:"material_image,omitempty"`
	// 防控消毒及废弃口罩手套回收现场图片路径,以","分割
	DisinfectionImage string `protobuf:"bytes,4,opt,name=disinfection_image,json=disinfectionImage,proto3" json:"disinfection_image,omitempty"`
	// 消杀时间
	DisinfectionTime int64 `protobuf:"varint,5,opt,name=disinfection_time,json=disinfectionTime,proto3" json:"disinfection_time,omitempty"`
	// 消杀防疫地点
	DisinfectionRange string `protobuf:"bytes,6,opt,name=disinfection_range,json=disinfectionRange,proto3" json:"disinfection_range,omitempty"`
	// 消杀防疫人员
	DisinfectionOperator string `protobuf:"bytes,7,opt,name=disinfection_operator,json=disinfectionOperator,proto3" json:"disinfection_operator,omitempty"`
	// 企业防控信息id
	Id int64 `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
	// 已填报员工数
	ReportEmployeeNum int32 `protobuf:"varint,9,opt,name=report_employee_num,json=reportEmployeeNum,proto3" json:"report_employee_num,omitempty"`
	// 创建时间
	CreateTime int64 `protobuf:"varint,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// 修改时间
	UpdateTime int64 `protobuf:"varint,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (m *PreventionRecordListVo) Reset()         { *m = PreventionRecordListVo{} }
func (m *PreventionRecordListVo) String() string { return proto.CompactTextString(m) }
func (*PreventionRecordListVo) ProtoMessage()    {}
func (*PreventionRecordListVo) Descriptor() ([]byte, []int) {
	return fileDescriptor_52199c5fa0cf5318, []int{21}
}
func (m *PreventionRecordListVo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreventionRecordListVo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreventionRecordListVo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreventionRecordListVo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreventionRecordListVo.Merge(m, src)
}
func (m *PreventionRecordListVo) XXX_Size() int {
	return m.Size()
}
func (m *PreventionRecordListVo) XXX_DiscardUnknown() {
	xxx_messageInfo_PreventionRecordListVo.DiscardUnknown(m)
}

var xxx_messageInfo_PreventionRecordListVo proto.InternalMessageInfo

func (m *PreventionRecordListVo) GetCompanyId() int64 {
	if m != nil {
		return m.CompanyId
	}
	return 0
}

func (m *PreventionRecordListVo) GetReturneeNum() int32 {
	if m != nil {
		return m.ReturneeNum
	}
	return 0
}

func (m *PreventionRecordListVo) GetMaterialImage() string {
	if m != nil {
		return m.MaterialImage
	}
	return ""
}

func (m *PreventionRecordListVo) GetDisinfectionImage() string {
	if m != nil {
		return m.DisinfectionImage
	}
	return ""
}

func (m *PreventionRecordListVo) GetDisinfectionTime() int64 {
	if m != nil {
		return m.DisinfectionTime
	}
	return 0
}

func (m *PreventionRecordListVo) GetDisinfectionRange() string {
	if m != nil {
		return m.DisinfectionRange
	}
	return ""
}

func (m *PreventionRecordListVo) GetDisinfectionOperator() string {
	if m != nil {
		return m.DisinfectionOperator
	}
	return ""
}

func (m *PreventionRecordListVo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PreventionRecordListVo) GetReportEmployeeNum() int32 {
	if m != nil {
		return m.ReportEmployeeNum
	}
	return 0
}

func (m *PreventionRecordListVo) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *PreventionRecordListVo) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func init() {
	proto.RegisterType((*AddCompanyInfoReq)(nil), "apicompany.AddCompanyInfoReq")
	proto.RegisterType((*AddCompanyInfoRes)(nil), "apicompany.AddCompanyInfoRes")
	proto.RegisterType((*UpdateCompanyInfoReq)(nil), "apicompany.UpdateCompanyInfoReq")
	proto.RegisterType((*UpdateCompanyInfoRes)(nil), "apicompany.UpdateCompanyInfoRes")
	proto.RegisterType((*GetCompanyInfoReq)(nil), "apicompany.GetCompanyInfoReq")
	proto.RegisterType((*GetCompanyInfoRes)(nil), "apicompany.GetCompanyInfoRes")
	proto.RegisterType((*CompanyInfo)(nil), "apicompany.CompanyInfo")
	proto.RegisterType((*AddPreventionRecordReq)(nil), "apicompany.AddPreventionRecordReq")
	proto.RegisterType((*AddPreventionRecordRes)(nil), "apicompany.AddPreventionRecordRes")
	proto.RegisterType((*UpdatePreventionRecordReq)(nil), "apicompany.UpdatePreventionRecordReq")
	proto.RegisterType((*UpdatePreventionRecordRes)(nil), "apicompany.UpdatePreventionRecordRes")
	proto.RegisterType((*GetPreventionRecordReq)(nil), "apicompany.GetPreventionRecordReq")
	proto.RegisterType((*GetPreventionRecordRes)(nil), "apicompany.GetPreventionRecordRes")
	proto.RegisterType((*PreventionRecord)(nil), "apicompany.PreventionRecord")
	proto.RegisterType((*GetCompanyInfoListReq)(nil), "apicompany.GetCompanyInfoListReq")
	proto.RegisterType((*GetCompanyInfoListRes)(nil), "apicompany.GetCompanyInfoListRes")
	proto.RegisterType((*CompanyInfoListVo)(nil), "apicompany.CompanyInfoListVo")
	proto.RegisterType((*DeleteCompanyInfoReq)(nil), "apicompany.DeleteCompanyInfoReq")
	proto.RegisterType((*DeleteCompanyInfoRes)(nil), "apicompany.DeleteCompanyInfoRes")
	proto.RegisterType((*GetPreventionRecordListReq)(nil), "apicompany.GetPreventionRecordListReq")
	proto.RegisterType((*GetPreventionRecordListRes)(nil), "apicompany.GetPreventionRecordListRes")
	proto.RegisterType((*PreventionRecordListVo)(nil), "apicompany.PreventionRecordListVo")
}

func init() { proto.RegisterFile("apicompany.proto", fileDescriptor_52199c5fa0cf5318) }

var fileDescriptor_52199c5fa0cf5318 = []byte{
	// 1266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0x4b, 0x6f, 0x5b, 0xc5,
	0x17, 0xef, 0xf5, 0x2b, 0xf1, 0x71, 0x93, 0xd8, 0x13, 0xc7, 0xb9, 0xf5, 0xbf, 0xf5, 0xdf, 0xb9,
	0x52, 0x51, 0x10, 0x6a, 0x2a, 0xa5, 0x2b, 0x58, 0x20, 0xa5, 0x3c, 0x5a, 0x0b, 0x54, 0xd0, 0x15,
	0x50, 0x40, 0x42, 0xd6, 0x8d, 0x67, 0xd2, 0x8e, 0xe4, 0xfb, 0xe8, 0xcc, 0x38, 0x52, 0x3e, 0x00,
	0x88, 0x25, 0x7b, 0x3e, 0x04, 0x9f, 0x00, 0x36, 0x6c, 0xba, 0xa3, 0x4b, 0x96, 0x90, 0x7c, 0x03,
	0x04, 0x7b, 0x34, 0x33, 0xf7, 0x3a, 0xf7, 0x69, 0x5f, 0x23, 0x90, 0x28, 0xca, 0x26, 0x99, 0xf3,
	0x9a, 0x39, 0x73, 0xe6, 0x37, 0xe7, 0x9c, 0x3b, 0x86, 0xb6, 0x13, 0xd0, 0x89, 0xef, 0x06, 0x8e,
	0x77, 0x76, 0x10, 0x30, 0x5f, 0xf8, 0x08, 0x2e, 0x39, 0xfd, 0x21, 0xf3, 0x8f, 0x7d, 0x71, 0x87,
	0x13, 0x76, 0x4a, 0xd8, 0x5d, 0x27, 0xa0, 0x77, 0x8f, 0x1d, 0x4e, 0xd4, 0x1f, 0xad, 0x6d, 0xfd,
	0x51, 0x85, 0xce, 0x11, 0xc6, 0x6f, 0x69, 0x83, 0x91, 0x77, 0xe2, 0xdb, 0xe4, 0x19, 0x1a, 0x40,
	0xed, 0x29, 0x71, 0xb0, 0x69, 0x0c, 0x8d, 0xfd, 0xd6, 0x21, 0x1c, 0x28, 0x83, 0x87, 0xc4, 0xc1,
	0xb6, 0xe2, 0x23, 0x04, 0x35, 0xcf, 0x71, 0x89, 0x59, 0x19, 0x1a, 0xfb, 0x4d, 0x5b, 0x8d, 0x51,
	0x17, 0xea, 0xc1, 0x53, 0xdf, 0x23, 0x66, 0x55, 0x31, 0x35, 0x81, 0xfa, 0xb0, 0x1e, 0x30, 0xff,
	0x94, 0x7a, 0x13, 0x62, 0xd6, 0x94, 0x60, 0x4e, 0xa3, 0xff, 0x43, 0x2b, 0x1a, 0x8f, 0x29, 0x36,
	0xeb, 0x43, 0x63, 0xbf, 0x6a, 0x43, 0xc4, 0x1a, 0xa9, 0x65, 0x26, 0x54, 0x9c, 0x99, 0x0d, 0xbd,
	0x8c, 0x1c, 0xa3, 0x5d, 0x58, 0x93, 0xff, 0xa5, 0xc1, 0x9a, 0x32, 0x68, 0x48, 0x72, 0x84, 0xe5,
	0x4a, 0x98, 0x72, 0xc1, 0xe8, 0x44, 0x98, 0xeb, 0x7a, 0xa5, 0x88, 0x96, 0x2b, 0x45, 0x63, 0x69,
	0xd8, 0xd4, 0x2b, 0x45, 0xac, 0x11, 0x46, 0x3d, 0x68, 0x70, 0xc1, 0x08, 0x11, 0x26, 0x28, 0xd3,
	0x90, 0x42, 0xff, 0x83, 0xa6, 0x1e, 0x49, 0xb3, 0x96, 0x32, 0x5b, 0xd7, 0x8c, 0x11, 0x46, 0x37,
	0xa1, 0x39, 0xf1, 0x5d, 0x77, 0xe6, 0x49, 0x1f, 0xaf, 0x2b, 0xbb, 0x4b, 0x06, 0xda, 0x83, 0xeb,
	0x73, 0x42, 0x5a, 0x6f, 0x28, 0xeb, 0xd6, 0x9c, 0x37, 0xc2, 0xe8, 0x55, 0x68, 0x63, 0x22, 0x1c,
	0x3a, 0x25, 0x78, 0xec, 0x60, 0xcc, 0x08, 0xe7, 0xe6, 0xa6, 0x9a, 0x67, 0x2b, 0xe2, 0x1f, 0x69,
	0xb6, 0x74, 0xd0, 0xc1, 0x13, 0x1f, 0x13, 0x73, 0x4b, 0x3b, 0xa8, 0x29, 0xb9, 0x6b, 0x8a, 0x89,
	0x27, 0xa4, 0x0b, 0x6d, 0xbd, 0xeb, 0x88, 0x56, 0x32, 0x0f, 0xcf, 0xb8, 0x60, 0x67, 0x66, 0x27,
	0x94, 0x85, 0xb4, 0xf5, 0x6e, 0xf6, 0xd8, 0x39, 0xda, 0x83, 0x9a, 0x3c, 0xe9, 0xf0, 0xd8, 0x37,
	0xf4, 0xb1, 0xdf, 0x77, 0x38, 0xb1, 0x09, 0xb7, 0x95, 0x08, 0x6d, 0x42, 0x85, 0x62, 0x75, 0xee,
	0x55, 0xbb, 0x42, 0xb1, 0xf5, 0x75, 0x0d, 0xba, 0x1f, 0x07, 0xd8, 0x11, 0xe4, 0x0a, 0x42, 0xff,
	0x72, 0x08, 0xe9, 0xa3, 0xdb, 0x8a, 0x8e, 0x2e, 0x06, 0xa9, 0x76, 0x21, 0xa4, 0x3a, 0x0b, 0x20,
	0x85, 0x52, 0x90, 0x7a, 0x3d, 0x17, 0x09, 0x65, 0x50, 0x65, 0x7d, 0x06, 0x9d, 0x07, 0x44, 0xac,
	0x88, 0xa0, 0x14, 0x14, 0xf3, 0xd1, 0x63, 0xb1, 0xec, 0xd4, 0xa5, 0x80, 0xfe, 0x86, 0x8a, 0xbd,
	0x34, 0x1a, 0x53, 0xef, 0xc4, 0x57, 0xeb, 0xb4, 0x0e, 0x77, 0x0f, 0x62, 0xf9, 0x36, 0x3e, 0x69,
	0x6b, 0x72, 0x49, 0x58, 0x3f, 0xd4, 0xa0, 0x15, 0x13, 0x86, 0x9e, 0x1a, 0x73, 0x4f, 0xaf, 0xb0,
	0xff, 0x92, 0xa7, 0x4f, 0xb9, 0x31, 0xca, 0xc7, 0x98, 0x4c, 0x89, 0x20, 0xea, 0x22, 0xd4, 0xed,
	0x75, 0xca, 0xdf, 0x56, 0xb4, 0x0c, 0xd7, 0x84, 0x11, 0x47, 0x90, 0xb1, 0xa0, 0x2e, 0x31, 0xb7,
	0x75, 0xb8, 0x34, 0xeb, 0x23, 0xea, 0x2a, 0x85, 0x99, 0xba, 0x29, 0x5a, 0xa1, 0xab, 0x15, 0x34,
	0x4b, 0x2a, 0x58, 0xbf, 0x56, 0xa0, 0x77, 0x84, 0xf1, 0x87, 0x8c, 0x9c, 0x4a, 0x67, 0x7c, 0xcf,
	0x26, 0x13, 0x9f, 0xe1, 0x32, 0xb7, 0xe2, 0x16, 0xc0, 0x1c, 0xb7, 0xd1, 0xed, 0x68, 0x46, 0xe0,
	0xc4, 0x32, 0xac, 0x8c, 0x88, 0x19, 0xf3, 0x08, 0x19, 0x7b, 0x33, 0x57, 0xa1, 0xad, 0x6e, 0xb7,
	0x22, 0xde, 0xa3, 0x99, 0x8b, 0x6e, 0xc3, 0xa6, 0xeb, 0x08, 0xc2, 0xa8, 0x33, 0x1d, 0x53, 0xd7,
	0x79, 0x12, 0x21, 0x6f, 0x23, 0xe2, 0x8e, 0x24, 0x13, 0xdd, 0x01, 0x84, 0x29, 0xa7, 0xde, 0x09,
	0x99, 0x48, 0x0f, 0x43, 0xd5, 0xba, 0x52, 0xed, 0xc4, 0x25, 0x5a, 0xfd, 0x35, 0x48, 0x30, 0xf5,
	0xce, 0x1b, 0xca, 0xbd, 0x76, 0x5c, 0xa0, 0x02, 0x94, 0x9e, 0x9b, 0x39, 0xde, 0x13, 0xa2, 0x00,
	0x9b, 0x9a, 0xdb, 0x96, 0x02, 0x74, 0x0f, 0x76, 0x12, 0xea, 0x7e, 0x40, 0x98, 0x23, 0x7c, 0x16,
	0x02, 0xb9, 0x1b, 0x17, 0x7e, 0x10, 0xca, 0xac, 0xf7, 0x0a, 0x42, 0xfc, 0x97, 0xca, 0xe0, 0xef,
	0x15, 0xb8, 0xa1, 0x93, 0xdf, 0xd5, 0x99, 0xfd, 0x73, 0x67, 0x16, 0x86, 0xbd, 0x39, 0x0f, 0xfb,
	0x9b, 0xc5, 0x51, 0x2f, 0x55, 0x77, 0x1e, 0x43, 0xef, 0x01, 0x11, 0x7f, 0xff, 0x91, 0x59, 0x5f,
	0x19, 0x05, 0x33, 0x97, 0x42, 0xd7, 0x08, 0x3a, 0xc1, 0xdc, 0x72, 0xcc, 0x94, 0x69, 0x58, 0x80,
	0x6e, 0xc6, 0x0b, 0x50, 0x66, 0xfa, 0x76, 0x90, 0xe2, 0x58, 0xdf, 0x57, 0xa1, 0x9d, 0x56, 0x4b,
	0x39, 0x6f, 0x2c, 0xc3, 0x5b, 0xa5, 0x0c, 0xde, 0xaa, 0xe5, 0xf1, 0x56, 0x5b, 0x09, 0x6f, 0xf5,
	0x95, 0xf0, 0xd6, 0x58, 0x19, 0x6f, 0x6b, 0x4b, 0xf1, 0xb6, 0x3e, 0x2f, 0xdc, 0x07, 0xb0, 0xcd,
	0x48, 0xe0, 0x33, 0x31, 0x26, 0x6e, 0x30, 0xf5, 0xcf, 0xc2, 0x00, 0x35, 0x55, 0x80, 0x3a, 0x5a,
	0xf4, 0x4e, 0x28, 0x91, 0x61, 0x4a, 0x55, 0x02, 0x58, 0x56, 0x09, 0x5a, 0x99, 0x4a, 0xf0, 0x93,
	0x01, 0x3b, 0xc9, 0xfe, 0xe5, 0x7d, 0xca, 0x45, 0x19, 0x84, 0x5e, 0x96, 0xbc, 0x4a, 0xa2, 0xe4,
	0x25, 0x6a, 0x72, 0x35, 0x55, 0x93, 0xd3, 0x55, 0xb7, 0x96, 0xad, 0xba, 0x08, 0x6a, 0x41, 0x94,
	0x35, 0xea, 0xb6, 0x1a, 0xcb, 0xe6, 0x65, 0x4a, 0x5d, 0x2a, 0x54, 0xf8, 0xeb, 0xb6, 0x26, 0x24,
	0xf7, 0xd9, 0x8c, 0xb0, 0xb3, 0x30, 0xc4, 0x9a, 0xb0, 0xbe, 0x2d, 0xd8, 0x51, 0xd9, 0x9b, 0x11,
	0xef, 0xca, 0xc6, 0x53, 0xca, 0x85, 0x59, 0x19, 0x56, 0xf7, 0x5b, 0x87, 0xb7, 0x0a, 0x5a, 0x33,
	0x39, 0xfb, 0x27, 0xbe, 0xbd, 0x35, 0x49, 0xb2, 0xa4, 0x77, 0xc2, 0x17, 0xce, 0x34, 0x4c, 0xa7,
	0x9a, 0xb0, 0x7e, 0xab, 0x43, 0x27, 0x63, 0xfc, 0xdf, 0x6f, 0xe0, 0x12, 0xbd, 0x18, 0xa4, 0x7b,
	0xb1, 0xbc, 0x46, 0xab, 0x95, 0xdf, 0x68, 0xc5, 0x1b, 0xaa, 0xcd, 0x54, 0x43, 0x95, 0x68, 0x9a,
	0xda, 0x8b, 0x9b, 0xa6, 0xce, 0xb2, 0xab, 0x82, 0xd2, 0x57, 0x25, 0x93, 0xb6, 0xb6, 0xcb, 0xa4,
	0xad, 0x6e, 0xf9, 0xb4, 0xb5, 0xb3, 0x52, 0xda, 0xea, 0xad, 0x94, 0xb6, 0x76, 0x57, 0x4e, 0x5b,
	0xe6, 0x82, 0xb4, 0x55, 0x90, 0xa6, 0x6e, 0x14, 0xa4, 0x29, 0xeb, 0x21, 0x74, 0xf5, 0x29, 0xac,
	0xf8, 0x05, 0xd6, 0x86, 0x2a, 0xc5, 0x3c, 0xbc, 0x05, 0x72, 0x28, 0xbf, 0x01, 0x73, 0x66, 0x2a,
	0x55, 0x8b, 0xbf, 0x34, 0xa0, 0x9f, 0x53, 0x32, 0xcb, 0xa6, 0xbb, 0x64, 0x4d, 0xab, 0xa5, 0x6b,
	0x5a, 0xe9, 0xac, 0x65, 0x7d, 0xb7, 0xc8, 0x8f, 0x52, 0x49, 0xea, 0x53, 0xe8, 0x65, 0xca, 0x77,
	0x3c, 0x53, 0x59, 0x8b, 0x6a, 0x78, 0x98, 0xae, 0xba, 0x41, 0x0e, 0xbf, 0x20, 0x67, 0xfd, 0x58,
	0x85, 0x5e, 0xfe, 0x34, 0x57, 0x95, 0xfe, 0xa5, 0xa9, 0xf4, 0x87, 0xcf, 0x1b, 0xb0, 0x16, 0xde,
	0x1a, 0xf4, 0x08, 0x36, 0x93, 0xaf, 0x73, 0x28, 0x51, 0xdd, 0x32, 0x0f, 0xb6, 0xfd, 0x85, 0x62,
	0x8e, 0x1e, 0x43, 0x27, 0xf3, 0x34, 0x83, 0x86, 0x71, 0x9b, 0xbc, 0x37, 0xbc, 0xfe, 0x32, 0x0d,
	0x2e, 0x1d, 0x4d, 0xd6, 0xf2, 0xa4, 0xa3, 0x99, 0x47, 0x9d, 0xfe, 0x42, 0x31, 0x47, 0x5f, 0xc0,
	0x76, 0xce, 0x47, 0x19, 0xb2, 0x52, 0xdb, 0xcb, 0xe9, 0xd8, 0xfb, 0xcb, 0x75, 0x38, 0x3a, 0x81,
	0x5e, 0xfe, 0xf7, 0x02, 0xba, 0x9d, 0xdd, 0x6a, 0xde, 0x22, 0xa5, 0xd4, 0xd4, 0x36, 0x72, 0x52,
	0x48, 0x72, 0x1b, 0xf9, 0x1f, 0x1e, 0xfd, 0xe5, 0x3a, 0x1c, 0x7d, 0x0e, 0x28, 0xdb, 0x41, 0xa1,
	0xbd, 0xe2, 0xd0, 0x86, 0x49, 0xb4, 0xbf, 0x54, 0x45, 0x41, 0x25, 0x93, 0xc1, 0x93, 0x50, 0xc9,
	0x2b, 0x15, 0xfd, 0x65, 0x1a, 0x1c, 0x51, 0xd8, 0x2d, 0x48, 0xab, 0xe8, 0x95, 0x25, 0x7b, 0x8e,
	0xdc, 0x2f, 0xa7, 0xc7, 0xef, 0x9b, 0xcf, 0xcf, 0x07, 0xc6, 0x8b, 0xf3, 0x81, 0xf1, 0xcb, 0xf9,
	0xc0, 0xf8, 0xe6, 0x62, 0x70, 0xed, 0xc5, 0xc5, 0xe0, 0xda, 0xcf, 0x17, 0x83, 0x6b, 0xc7, 0x0d,
	0xf5, 0xab, 0xc7, 0xbd, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x8a, 0x56, 0x0b, 0x37, 0x19,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CompanyClient is the client API for Company service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompanyClient interface {
	// 添加企业基本信息
	AddCompanyInfo(ctx context.Context, in *AddCompanyInfoReq, opts ...grpc.CallOption) (*AddCompanyInfoRes, error)
	// 编辑企业基本信息
	UpdateCompanyInfo(ctx context.Context, in *UpdateCompanyInfoReq, opts ...grpc.CallOption) (*UpdateCompanyInfoRes, error)
	// 获取公司基本信息
	GetCompanyInfo(ctx context.Context, in *GetCompanyInfoReq, opts ...grpc.CallOption) (*GetCompanyInfoRes, error)
	// 添加企业防控信息
	AddPreventionRecord(ctx context.Context, in *AddPreventionRecordReq, opts ...grpc.CallOption) (*AddPreventionRecordRes, error)
	// 编辑企业防控信息
	UpdatePreventionRecord(ctx context.Context, in *UpdatePreventionRecordReq, opts ...grpc.CallOption) (*UpdatePreventionRecordRes, error)
	// 获取企业防控信息
	GetPreventionRecord(ctx context.Context, in *GetPreventionRecordReq, opts ...grpc.CallOption) (*GetPreventionRecordRes, error)
	// 获取企业信息列表
	GetCompanyInfoList(ctx context.Context, in *GetCompanyInfoListReq, opts ...grpc.CallOption) (*GetCompanyInfoListRes, error)
	// 删除企业基本信息
	DeleteCompanyInfo(ctx context.Context, in *DeleteCompanyInfoReq, opts ...grpc.CallOption) (*DeleteCompanyInfoRes, error)
	// 获取企业防控信息列表
	GetPreventionRecordList(ctx context.Context, in *GetPreventionRecordListReq, opts ...grpc.CallOption) (*GetPreventionRecordListRes, error)
}

type companyClient struct {
	cc *grpc.ClientConn
}

func NewCompanyClient(cc *grpc.ClientConn) CompanyClient {
	return &companyClient{cc}
}

func (c *companyClient) AddCompanyInfo(ctx context.Context, in *AddCompanyInfoReq, opts ...grpc.CallOption) (*AddCompanyInfoRes, error) {
	out := new(AddCompanyInfoRes)
	err := c.cc.Invoke(ctx, "/apicompany.Company/AddCompanyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) UpdateCompanyInfo(ctx context.Context, in *UpdateCompanyInfoReq, opts ...grpc.CallOption) (*UpdateCompanyInfoRes, error) {
	out := new(UpdateCompanyInfoRes)
	err := c.cc.Invoke(ctx, "/apicompany.Company/UpdateCompanyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetCompanyInfo(ctx context.Context, in *GetCompanyInfoReq, opts ...grpc.CallOption) (*GetCompanyInfoRes, error) {
	out := new(GetCompanyInfoRes)
	err := c.cc.Invoke(ctx, "/apicompany.Company/GetCompanyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) AddPreventionRecord(ctx context.Context, in *AddPreventionRecordReq, opts ...grpc.CallOption) (*AddPreventionRecordRes, error) {
	out := new(AddPreventionRecordRes)
	err := c.cc.Invoke(ctx, "/apicompany.Company/AddPreventionRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) UpdatePreventionRecord(ctx context.Context, in *UpdatePreventionRecordReq, opts ...grpc.CallOption) (*UpdatePreventionRecordRes, error) {
	out := new(UpdatePreventionRecordRes)
	err := c.cc.Invoke(ctx, "/apicompany.Company/UpdatePreventionRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetPreventionRecord(ctx context.Context, in *GetPreventionRecordReq, opts ...grpc.CallOption) (*GetPreventionRecordRes, error) {
	out := new(GetPreventionRecordRes)
	err := c.cc.Invoke(ctx, "/apicompany.Company/GetPreventionRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetCompanyInfoList(ctx context.Context, in *GetCompanyInfoListReq, opts ...grpc.CallOption) (*GetCompanyInfoListRes, error) {
	out := new(GetCompanyInfoListRes)
	err := c.cc.Invoke(ctx, "/apicompany.Company/GetCompanyInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) DeleteCompanyInfo(ctx context.Context, in *DeleteCompanyInfoReq, opts ...grpc.CallOption) (*DeleteCompanyInfoRes, error) {
	out := new(DeleteCompanyInfoRes)
	err := c.cc.Invoke(ctx, "/apicompany.Company/DeleteCompanyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) GetPreventionRecordList(ctx context.Context, in *GetPreventionRecordListReq, opts ...grpc.CallOption) (*GetPreventionRecordListRes, error) {
	out := new(GetPreventionRecordListRes)
	err := c.cc.Invoke(ctx, "/apicompany.Company/GetPreventionRecordList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServer is the server API for Company service.
type CompanyServer interface {
	// 添加企业基本信息
	AddCompanyInfo(context.Context, *AddCompanyInfoReq) (*AddCompanyInfoRes, error)
	// 编辑企业基本信息
	UpdateCompanyInfo(context.Context, *UpdateCompanyInfoReq) (*UpdateCompanyInfoRes, error)
	// 获取公司基本信息
	GetCompanyInfo(context.Context, *GetCompanyInfoReq) (*GetCompanyInfoRes, error)
	// 添加企业防控信息
	AddPreventionRecord(context.Context, *AddPreventionRecordReq) (*AddPreventionRecordRes, error)
	// 编辑企业防控信息
	UpdatePreventionRecord(context.Context, *UpdatePreventionRecordReq) (*UpdatePreventionRecordRes, error)
	// 获取企业防控信息
	GetPreventionRecord(context.Context, *GetPreventionRecordReq) (*GetPreventionRecordRes, error)
	// 获取企业信息列表
	GetCompanyInfoList(context.Context, *GetCompanyInfoListReq) (*GetCompanyInfoListRes, error)
	// 删除企业基本信息
	DeleteCompanyInfo(context.Context, *DeleteCompanyInfoReq) (*DeleteCompanyInfoRes, error)
	// 获取企业防控信息列表
	GetPreventionRecordList(context.Context, *GetPreventionRecordListReq) (*GetPreventionRecordListRes, error)
}

// UnimplementedCompanyServer can be embedded to have forward compatible implementations.
type UnimplementedCompanyServer struct {
}

func (*UnimplementedCompanyServer) AddCompanyInfo(ctx context.Context, req *AddCompanyInfoReq) (*AddCompanyInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCompanyInfo not implemented")
}
func (*UnimplementedCompanyServer) UpdateCompanyInfo(ctx context.Context, req *UpdateCompanyInfoReq) (*UpdateCompanyInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompanyInfo not implemented")
}
func (*UnimplementedCompanyServer) GetCompanyInfo(ctx context.Context, req *GetCompanyInfoReq) (*GetCompanyInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyInfo not implemented")
}
func (*UnimplementedCompanyServer) AddPreventionRecord(ctx context.Context, req *AddPreventionRecordReq) (*AddPreventionRecordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPreventionRecord not implemented")
}
func (*UnimplementedCompanyServer) UpdatePreventionRecord(ctx context.Context, req *UpdatePreventionRecordReq) (*UpdatePreventionRecordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePreventionRecord not implemented")
}
func (*UnimplementedCompanyServer) GetPreventionRecord(ctx context.Context, req *GetPreventionRecordReq) (*GetPreventionRecordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreventionRecord not implemented")
}
func (*UnimplementedCompanyServer) GetCompanyInfoList(ctx context.Context, req *GetCompanyInfoListReq) (*GetCompanyInfoListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyInfoList not implemented")
}
func (*UnimplementedCompanyServer) DeleteCompanyInfo(ctx context.Context, req *DeleteCompanyInfoReq) (*DeleteCompanyInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompanyInfo not implemented")
}
func (*UnimplementedCompanyServer) GetPreventionRecordList(ctx context.Context, req *GetPreventionRecordListReq) (*GetPreventionRecordListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreventionRecordList not implemented")
}

func RegisterCompanyServer(s *grpc.Server, srv CompanyServer) {
	s.RegisterService(&_Company_serviceDesc, srv)
}

func _Company_AddCompanyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCompanyInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).AddCompanyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apicompany.Company/AddCompanyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).AddCompanyInfo(ctx, req.(*AddCompanyInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_UpdateCompanyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).UpdateCompanyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apicompany.Company/UpdateCompanyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).UpdateCompanyInfo(ctx, req.(*UpdateCompanyInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetCompanyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetCompanyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apicompany.Company/GetCompanyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetCompanyInfo(ctx, req.(*GetCompanyInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_AddPreventionRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPreventionRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).AddPreventionRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apicompany.Company/AddPreventionRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).AddPreventionRecord(ctx, req.(*AddPreventionRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_UpdatePreventionRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePreventionRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).UpdatePreventionRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apicompany.Company/UpdatePreventionRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).UpdatePreventionRecord(ctx, req.(*UpdatePreventionRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetPreventionRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreventionRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetPreventionRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apicompany.Company/GetPreventionRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetPreventionRecord(ctx, req.(*GetPreventionRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetCompanyInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyInfoListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetCompanyInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apicompany.Company/GetCompanyInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetCompanyInfoList(ctx, req.(*GetCompanyInfoListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_DeleteCompanyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompanyInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).DeleteCompanyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apicompany.Company/DeleteCompanyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).DeleteCompanyInfo(ctx, req.(*DeleteCompanyInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_GetPreventionRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreventionRecordListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).GetPreventionRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apicompany.Company/GetPreventionRecordList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).GetPreventionRecordList(ctx, req.(*GetPreventionRecordListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Company_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apicompany.Company",
	HandlerType: (*CompanyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCompanyInfo",
			Handler:    _Company_AddCompanyInfo_Handler,
		},
		{
			MethodName: "UpdateCompanyInfo",
			Handler:    _Company_UpdateCompanyInfo_Handler,
		},
		{
			MethodName: "GetCompanyInfo",
			Handler:    _Company_GetCompanyInfo_Handler,
		},
		{
			MethodName: "AddPreventionRecord",
			Handler:    _Company_AddPreventionRecord_Handler,
		},
		{
			MethodName: "UpdatePreventionRecord",
			Handler:    _Company_UpdatePreventionRecord_Handler,
		},
		{
			MethodName: "GetPreventionRecord",
			Handler:    _Company_GetPreventionRecord_Handler,
		},
		{
			MethodName: "GetCompanyInfoList",
			Handler:    _Company_GetCompanyInfoList_Handler,
		},
		{
			MethodName: "DeleteCompanyInfo",
			Handler:    _Company_DeleteCompanyInfo_Handler,
		},
		{
			MethodName: "GetPreventionRecordList",
			Handler:    _Company_GetPreventionRecordList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apicompany.proto",
}

func (m *AddCompanyInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddCompanyInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddCompanyInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Industry) > 0 {
		i -= len(m.Industry)
		copy(dAtA[i:], m.Industry)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Industry)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Adcode) > 0 {
		i -= len(m.Adcode)
		copy(dAtA[i:], m.Adcode)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Adcode)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.DetailedAddress) > 0 {
		i -= len(m.DetailedAddress)
		copy(dAtA[i:], m.DetailedAddress)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.DetailedAddress)))
		i--
		dAtA[i] = 0x72
	}
	if m.CommunityId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.CommunityId))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Community) > 0 {
		i -= len(m.Community)
		copy(dAtA[i:], m.Community)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Community)))
		i--
		dAtA[i] = 0x62
	}
	if m.StreetId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.StreetId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Street) > 0 {
		i -= len(m.Street)
		copy(dAtA[i:], m.Street)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Street)))
		i--
		dAtA[i] = 0x52
	}
	if m.DistrictId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.DistrictId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.District) > 0 {
		i -= len(m.District)
		copy(dAtA[i:], m.District)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.District)))
		i--
		dAtA[i] = 0x42
	}
	if m.CityId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.CityId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x32
	}
	if m.ProvinceId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.ProvinceId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Province) > 0 {
		i -= len(m.Province)
		copy(dAtA[i:], m.Province)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Province)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApicompany(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddCompanyInfoRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddCompanyInfoRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddCompanyInfoRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApicompany(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateCompanyInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCompanyInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCompanyInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Industry) > 0 {
		i -= len(m.Industry)
		copy(dAtA[i:], m.Industry)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Industry)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Adcode) > 0 {
		i -= len(m.Adcode)
		copy(dAtA[i:], m.Adcode)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Adcode)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Id != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x78
	}
	if len(m.DetailedAddress) > 0 {
		i -= len(m.DetailedAddress)
		copy(dAtA[i:], m.DetailedAddress)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.DetailedAddress)))
		i--
		dAtA[i] = 0x72
	}
	if m.CommunityId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.CommunityId))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Community) > 0 {
		i -= len(m.Community)
		copy(dAtA[i:], m.Community)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Community)))
		i--
		dAtA[i] = 0x62
	}
	if m.StreetId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.StreetId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Street) > 0 {
		i -= len(m.Street)
		copy(dAtA[i:], m.Street)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Street)))
		i--
		dAtA[i] = 0x52
	}
	if m.DistrictId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.DistrictId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.District) > 0 {
		i -= len(m.District)
		copy(dAtA[i:], m.District)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.District)))
		i--
		dAtA[i] = 0x42
	}
	if m.CityId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.CityId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x32
	}
	if m.ProvinceId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.ProvinceId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Province) > 0 {
		i -= len(m.Province)
		copy(dAtA[i:], m.Province)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Province)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApicompany(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateCompanyInfoRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCompanyInfoRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCompanyInfoRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApicompany(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCompanyInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCompanyInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCompanyInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApicompany(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCompanyInfoRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCompanyInfoRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCompanyInfoRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompanyInfo != nil {
		{
			size, err := m.CompanyInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApicompany(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApicompany(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompanyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompanyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompanyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateTime != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.CreateTime != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.IsDelete != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.IsDelete))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.Industry) > 0 {
		i -= len(m.Industry)
		copy(dAtA[i:], m.Industry)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Industry)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Adcode) > 0 {
		i -= len(m.Adcode)
		copy(dAtA[i:], m.Adcode)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Adcode)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.DetailedAddress) > 0 {
		i -= len(m.DetailedAddress)
		copy(dAtA[i:], m.DetailedAddress)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.DetailedAddress)))
		i--
		dAtA[i] = 0x72
	}
	if m.CommunityId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.CommunityId))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Community) > 0 {
		i -= len(m.Community)
		copy(dAtA[i:], m.Community)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Community)))
		i--
		dAtA[i] = 0x62
	}
	if m.StreetId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.StreetId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Street) > 0 {
		i -= len(m.Street)
		copy(dAtA[i:], m.Street)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Street)))
		i--
		dAtA[i] = 0x52
	}
	if m.DistrictId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.DistrictId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.District) > 0 {
		i -= len(m.District)
		copy(dAtA[i:], m.District)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.District)))
		i--
		dAtA[i] = 0x42
	}
	if m.CityId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.CityId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x32
	}
	if m.ProvinceId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.ProvinceId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Province) > 0 {
		i -= len(m.Province)
		copy(dAtA[i:], m.Province)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Province)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddPreventionRecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPreventionRecordReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPreventionRecordReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisinfectionOperator) > 0 {
		i -= len(m.DisinfectionOperator)
		copy(dAtA[i:], m.DisinfectionOperator)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.DisinfectionOperator)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DisinfectionRange) > 0 {
		i -= len(m.DisinfectionRange)
		copy(dAtA[i:], m.DisinfectionRange)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.DisinfectionRange)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DisinfectionTime != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.DisinfectionTime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DisinfectionImage) > 0 {
		i -= len(m.DisinfectionImage)
		copy(dAtA[i:], m.DisinfectionImage)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.DisinfectionImage)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MaterialImage) > 0 {
		i -= len(m.MaterialImage)
		copy(dAtA[i:], m.MaterialImage)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.MaterialImage)))
		i--
		dAtA[i] = 0x22
	}
	if m.ReturneeNum != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.ReturneeNum))
		i--
		dAtA[i] = 0x18
	}
	if m.CompanyId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.CompanyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApicompany(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddPreventionRecordRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPreventionRecordRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPreventionRecordRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApicompany(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdatePreventionRecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePreventionRecordReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePreventionRecordReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x48
	}
	if len(m.DisinfectionOperator) > 0 {
		i -= len(m.DisinfectionOperator)
		copy(dAtA[i:], m.DisinfectionOperator)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.DisinfectionOperator)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DisinfectionRange) > 0 {
		i -= len(m.DisinfectionRange)
		copy(dAtA[i:], m.DisinfectionRange)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.DisinfectionRange)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DisinfectionTime != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.DisinfectionTime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DisinfectionImage) > 0 {
		i -= len(m.DisinfectionImage)
		copy(dAtA[i:], m.DisinfectionImage)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.DisinfectionImage)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MaterialImage) > 0 {
		i -= len(m.MaterialImage)
		copy(dAtA[i:], m.MaterialImage)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.MaterialImage)))
		i--
		dAtA[i] = 0x22
	}
	if m.ReturneeNum != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.ReturneeNum))
		i--
		dAtA[i] = 0x18
	}
	if m.CompanyId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.CompanyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApicompany(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdatePreventionRecordRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePreventionRecordRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePreventionRecordRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApicompany(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPreventionRecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPreventionRecordReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPreventionRecordReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompanyId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.CompanyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApicompany(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPreventionRecordRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPreventionRecordRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPreventionRecordRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PreventionRecord != nil {
		{
			size, err := m.PreventionRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApicompany(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApicompany(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PreventionRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreventionRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreventionRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateTime != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x58
	}
	if m.CreateTime != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x50
	}
	if m.ReportEmployeeNum != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.ReportEmployeeNum))
		i--
		dAtA[i] = 0x48
	}
	if m.Id != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x40
	}
	if len(m.DisinfectionOperator) > 0 {
		i -= len(m.DisinfectionOperator)
		copy(dAtA[i:], m.DisinfectionOperator)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.DisinfectionOperator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DisinfectionRange) > 0 {
		i -= len(m.DisinfectionRange)
		copy(dAtA[i:], m.DisinfectionRange)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.DisinfectionRange)))
		i--
		dAtA[i] = 0x32
	}
	if m.DisinfectionTime != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.DisinfectionTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.DisinfectionImage) > 0 {
		i -= len(m.DisinfectionImage)
		copy(dAtA[i:], m.DisinfectionImage)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.DisinfectionImage)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MaterialImage) > 0 {
		i -= len(m.MaterialImage)
		copy(dAtA[i:], m.MaterialImage)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.MaterialImage)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ReturneeNum != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.ReturneeNum))
		i--
		dAtA[i] = 0x10
	}
	if m.CompanyId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.CompanyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCompanyInfoListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCompanyInfoListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCompanyInfoListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Limit != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x30
	}
	if m.Page != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x28
	}
	if m.CommunityId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.CommunityId))
		i--
		dAtA[i] = 0x20
	}
	if m.StreetId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.StreetId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Adcode) > 0 {
		i -= len(m.Adcode)
		copy(dAtA[i:], m.Adcode)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Adcode)))
		i--
		dAtA[i] = 0x12
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApicompany(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCompanyInfoListRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCompanyInfoListRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCompanyInfoListRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CompanyInfoList) > 0 {
		for iNdEx := len(m.CompanyInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CompanyInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApicompany(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApicompany(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompanyInfoListVo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompanyInfoListVo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompanyInfoListVo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReportEmployeeNum != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.ReportEmployeeNum))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.DisinfectionOperator) > 0 {
		i -= len(m.DisinfectionOperator)
		copy(dAtA[i:], m.DisinfectionOperator)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.DisinfectionOperator)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.DisinfectionRange) > 0 {
		i -= len(m.DisinfectionRange)
		copy(dAtA[i:], m.DisinfectionRange)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.DisinfectionRange)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.DisinfectionTime != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.DisinfectionTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if len(m.DisinfectionImage) > 0 {
		i -= len(m.DisinfectionImage)
		copy(dAtA[i:], m.DisinfectionImage)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.DisinfectionImage)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.MaterialImage) > 0 {
		i -= len(m.MaterialImage)
		copy(dAtA[i:], m.MaterialImage)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.MaterialImage)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.ReturneeNum != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.ReturneeNum))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.UpdateTime != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.CreateTime != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.IsDelete != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.IsDelete))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.DetailedAddress) > 0 {
		i -= len(m.DetailedAddress)
		copy(dAtA[i:], m.DetailedAddress)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.DetailedAddress)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Community) > 0 {
		i -= len(m.Community)
		copy(dAtA[i:], m.Community)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Community)))
		i--
		dAtA[i] = 0x52
	}
	if m.DistrictId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.DistrictId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.District) > 0 {
		i -= len(m.District)
		copy(dAtA[i:], m.District)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.District)))
		i--
		dAtA[i] = 0x42
	}
	if m.CityId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.CityId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x32
	}
	if m.ProvinceId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.ProvinceId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Province) > 0 {
		i -= len(m.Province)
		copy(dAtA[i:], m.Province)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Province)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteCompanyInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCompanyInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteCompanyInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		i -= len(m.Ids)
		copy(dAtA[i:], m.Ids)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.Ids)))
		i--
		dAtA[i] = 0x12
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApicompany(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteCompanyInfoRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCompanyInfoRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteCompanyInfoRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApicompany(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPreventionRecordListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPreventionRecordListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPreventionRecordListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x30
	}
	if m.Page != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x28
	}
	if m.CompanyId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.CompanyId))
		i--
		dAtA[i] = 0x20
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApicompany(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPreventionRecordListRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPreventionRecordListRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPreventionRecordListRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PreventionRecordList) > 0 {
		for iNdEx := len(m.PreventionRecordList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PreventionRecordList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApicompany(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApicompany(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PreventionRecordListVo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreventionRecordListVo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreventionRecordListVo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateTime != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x58
	}
	if m.CreateTime != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x50
	}
	if m.ReportEmployeeNum != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.ReportEmployeeNum))
		i--
		dAtA[i] = 0x48
	}
	if m.Id != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x40
	}
	if len(m.DisinfectionOperator) > 0 {
		i -= len(m.DisinfectionOperator)
		copy(dAtA[i:], m.DisinfectionOperator)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.DisinfectionOperator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DisinfectionRange) > 0 {
		i -= len(m.DisinfectionRange)
		copy(dAtA[i:], m.DisinfectionRange)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.DisinfectionRange)))
		i--
		dAtA[i] = 0x32
	}
	if m.DisinfectionTime != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.DisinfectionTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.DisinfectionImage) > 0 {
		i -= len(m.DisinfectionImage)
		copy(dAtA[i:], m.DisinfectionImage)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.DisinfectionImage)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MaterialImage) > 0 {
		i -= len(m.MaterialImage)
		copy(dAtA[i:], m.MaterialImage)
		i = encodeVarintApicompany(dAtA, i, uint64(len(m.MaterialImage)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ReturneeNum != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.ReturneeNum))
		i--
		dAtA[i] = 0x10
	}
	if m.CompanyId != 0 {
		i = encodeVarintApicompany(dAtA, i, uint64(m.CompanyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApicompany(dAtA []byte, offset int, v uint64) int {
	offset -= sovApicompany(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddCompanyInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.Province)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.ProvinceId != 0 {
		n += 1 + sovApicompany(uint64(m.ProvinceId))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.CityId != 0 {
		n += 1 + sovApicompany(uint64(m.CityId))
	}
	l = len(m.District)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.DistrictId != 0 {
		n += 1 + sovApicompany(uint64(m.DistrictId))
	}
	l = len(m.Street)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.StreetId != 0 {
		n += 1 + sovApicompany(uint64(m.StreetId))
	}
	l = len(m.Community)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.CommunityId != 0 {
		n += 1 + sovApicompany(uint64(m.CommunityId))
	}
	l = len(m.DetailedAddress)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.Adcode)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 2 + l + sovApicompany(uint64(l))
	}
	l = len(m.Industry)
	if l > 0 {
		n += 2 + l + sovApicompany(uint64(l))
	}
	return n
}

func (m *AddCompanyInfoRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovApicompany(uint64(m.Id))
	}
	return n
}

func (m *UpdateCompanyInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.Province)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.ProvinceId != 0 {
		n += 1 + sovApicompany(uint64(m.ProvinceId))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.CityId != 0 {
		n += 1 + sovApicompany(uint64(m.CityId))
	}
	l = len(m.District)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.DistrictId != 0 {
		n += 1 + sovApicompany(uint64(m.DistrictId))
	}
	l = len(m.Street)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.StreetId != 0 {
		n += 1 + sovApicompany(uint64(m.StreetId))
	}
	l = len(m.Community)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.CommunityId != 0 {
		n += 1 + sovApicompany(uint64(m.CommunityId))
	}
	l = len(m.DetailedAddress)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovApicompany(uint64(m.Id))
	}
	l = len(m.Adcode)
	if l > 0 {
		n += 2 + l + sovApicompany(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 2 + l + sovApicompany(uint64(l))
	}
	l = len(m.Industry)
	if l > 0 {
		n += 2 + l + sovApicompany(uint64(l))
	}
	return n
}

func (m *UpdateCompanyInfoRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApicompany(uint64(l))
	}
	return n
}

func (m *GetCompanyInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovApicompany(uint64(m.Id))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	return n
}

func (m *GetCompanyInfoRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.CompanyInfo != nil {
		l = m.CompanyInfo.Size()
		n += 1 + l + sovApicompany(uint64(l))
	}
	return n
}

func (m *CompanyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApicompany(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.Province)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.ProvinceId != 0 {
		n += 1 + sovApicompany(uint64(m.ProvinceId))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.CityId != 0 {
		n += 1 + sovApicompany(uint64(m.CityId))
	}
	l = len(m.District)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.DistrictId != 0 {
		n += 1 + sovApicompany(uint64(m.DistrictId))
	}
	l = len(m.Street)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.StreetId != 0 {
		n += 1 + sovApicompany(uint64(m.StreetId))
	}
	l = len(m.Community)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.CommunityId != 0 {
		n += 1 + sovApicompany(uint64(m.CommunityId))
	}
	l = len(m.DetailedAddress)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.Adcode)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 2 + l + sovApicompany(uint64(l))
	}
	l = len(m.Industry)
	if l > 0 {
		n += 2 + l + sovApicompany(uint64(l))
	}
	if m.IsDelete != 0 {
		n += 2 + sovApicompany(uint64(m.IsDelete))
	}
	if m.CreateTime != 0 {
		n += 2 + sovApicompany(uint64(m.CreateTime))
	}
	if m.UpdateTime != 0 {
		n += 2 + sovApicompany(uint64(m.UpdateTime))
	}
	return n
}

func (m *AddPreventionRecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.CompanyId != 0 {
		n += 1 + sovApicompany(uint64(m.CompanyId))
	}
	if m.ReturneeNum != 0 {
		n += 1 + sovApicompany(uint64(m.ReturneeNum))
	}
	l = len(m.MaterialImage)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.DisinfectionImage)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.DisinfectionTime != 0 {
		n += 1 + sovApicompany(uint64(m.DisinfectionTime))
	}
	l = len(m.DisinfectionRange)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.DisinfectionOperator)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	return n
}

func (m *AddPreventionRecordRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovApicompany(uint64(m.Id))
	}
	return n
}

func (m *UpdatePreventionRecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.CompanyId != 0 {
		n += 1 + sovApicompany(uint64(m.CompanyId))
	}
	if m.ReturneeNum != 0 {
		n += 1 + sovApicompany(uint64(m.ReturneeNum))
	}
	l = len(m.MaterialImage)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.DisinfectionImage)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.DisinfectionTime != 0 {
		n += 1 + sovApicompany(uint64(m.DisinfectionTime))
	}
	l = len(m.DisinfectionRange)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.DisinfectionOperator)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovApicompany(uint64(m.Id))
	}
	return n
}

func (m *UpdatePreventionRecordRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApicompany(uint64(l))
	}
	return n
}

func (m *GetPreventionRecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.CompanyId != 0 {
		n += 1 + sovApicompany(uint64(m.CompanyId))
	}
	return n
}

func (m *GetPreventionRecordRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.PreventionRecord != nil {
		l = m.PreventionRecord.Size()
		n += 1 + l + sovApicompany(uint64(l))
	}
	return n
}

func (m *PreventionRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompanyId != 0 {
		n += 1 + sovApicompany(uint64(m.CompanyId))
	}
	if m.ReturneeNum != 0 {
		n += 1 + sovApicompany(uint64(m.ReturneeNum))
	}
	l = len(m.MaterialImage)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.DisinfectionImage)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.DisinfectionTime != 0 {
		n += 1 + sovApicompany(uint64(m.DisinfectionTime))
	}
	l = len(m.DisinfectionRange)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.DisinfectionOperator)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovApicompany(uint64(m.Id))
	}
	if m.ReportEmployeeNum != 0 {
		n += 1 + sovApicompany(uint64(m.ReportEmployeeNum))
	}
	if m.CreateTime != 0 {
		n += 1 + sovApicompany(uint64(m.CreateTime))
	}
	if m.UpdateTime != 0 {
		n += 1 + sovApicompany(uint64(m.UpdateTime))
	}
	return n
}

func (m *GetCompanyInfoListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.Adcode)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.StreetId != 0 {
		n += 1 + sovApicompany(uint64(m.StreetId))
	}
	if m.CommunityId != 0 {
		n += 1 + sovApicompany(uint64(m.CommunityId))
	}
	if m.Page != 0 {
		n += 1 + sovApicompany(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovApicompany(uint64(m.Limit))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	return n
}

func (m *GetCompanyInfoListRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApicompany(uint64(l))
	}
	if len(m.CompanyInfoList) > 0 {
		for _, e := range m.CompanyInfoList {
			l = e.Size()
			n += 1 + l + sovApicompany(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovApicompany(uint64(m.Total))
	}
	return n
}

func (m *CompanyInfoListVo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApicompany(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.Province)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.ProvinceId != 0 {
		n += 1 + sovApicompany(uint64(m.ProvinceId))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.CityId != 0 {
		n += 1 + sovApicompany(uint64(m.CityId))
	}
	l = len(m.District)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.DistrictId != 0 {
		n += 1 + sovApicompany(uint64(m.DistrictId))
	}
	l = len(m.Community)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.DetailedAddress)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.IsDelete != 0 {
		n += 2 + sovApicompany(uint64(m.IsDelete))
	}
	if m.CreateTime != 0 {
		n += 2 + sovApicompany(uint64(m.CreateTime))
	}
	if m.UpdateTime != 0 {
		n += 2 + sovApicompany(uint64(m.UpdateTime))
	}
	if m.ReturneeNum != 0 {
		n += 2 + sovApicompany(uint64(m.ReturneeNum))
	}
	l = len(m.MaterialImage)
	if l > 0 {
		n += 2 + l + sovApicompany(uint64(l))
	}
	l = len(m.DisinfectionImage)
	if l > 0 {
		n += 2 + l + sovApicompany(uint64(l))
	}
	if m.DisinfectionTime != 0 {
		n += 2 + sovApicompany(uint64(m.DisinfectionTime))
	}
	l = len(m.DisinfectionRange)
	if l > 0 {
		n += 2 + l + sovApicompany(uint64(l))
	}
	l = len(m.DisinfectionOperator)
	if l > 0 {
		n += 2 + l + sovApicompany(uint64(l))
	}
	if m.ReportEmployeeNum != 0 {
		n += 2 + sovApicompany(uint64(m.ReportEmployeeNum))
	}
	return n
}

func (m *DeleteCompanyInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.Ids)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	return n
}

func (m *DeleteCompanyInfoRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApicompany(uint64(l))
	}
	return n
}

func (m *GetPreventionRecordListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.CompanyId != 0 {
		n += 1 + sovApicompany(uint64(m.CompanyId))
	}
	if m.Page != 0 {
		n += 1 + sovApicompany(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovApicompany(uint64(m.Limit))
	}
	return n
}

func (m *GetPreventionRecordListRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApicompany(uint64(l))
	}
	if len(m.PreventionRecordList) > 0 {
		for _, e := range m.PreventionRecordList {
			l = e.Size()
			n += 1 + l + sovApicompany(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovApicompany(uint64(m.Total))
	}
	return n
}

func (m *PreventionRecordListVo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompanyId != 0 {
		n += 1 + sovApicompany(uint64(m.CompanyId))
	}
	if m.ReturneeNum != 0 {
		n += 1 + sovApicompany(uint64(m.ReturneeNum))
	}
	l = len(m.MaterialImage)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.DisinfectionImage)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.DisinfectionTime != 0 {
		n += 1 + sovApicompany(uint64(m.DisinfectionTime))
	}
	l = len(m.DisinfectionRange)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	l = len(m.DisinfectionOperator)
	if l > 0 {
		n += 1 + l + sovApicompany(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovApicompany(uint64(m.Id))
	}
	if m.ReportEmployeeNum != 0 {
		n += 1 + sovApicompany(uint64(m.ReportEmployeeNum))
	}
	if m.CreateTime != 0 {
		n += 1 + sovApicompany(uint64(m.CreateTime))
	}
	if m.UpdateTime != 0 {
		n += 1 + sovApicompany(uint64(m.UpdateTime))
	}
	return n
}

func sovApicompany(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApicompany(x uint64) (n int) {
	return sovApicompany(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddCompanyInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddCompanyInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddCompanyInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &base.Head{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Province", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Province = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvinceId", wireType)
			}
			m.ProvinceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProvinceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field District", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.District = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictId", wireType)
			}
			m.DistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistrictId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Street", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Street = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetId", wireType)
			}
			m.StreetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Community", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Community = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityId", wireType)
			}
			m.CommunityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommunityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetailedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Adcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Industry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Industry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddCompanyInfoRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddCompanyInfoRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddCompanyInfoRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCompanyInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCompanyInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCompanyInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &base.Head{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Province", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Province = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvinceId", wireType)
			}
			m.ProvinceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProvinceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field District", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.District = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictId", wireType)
			}
			m.DistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistrictId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Street", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Street = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetId", wireType)
			}
			m.StreetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Community", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Community = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityId", wireType)
			}
			m.CommunityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommunityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetailedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Adcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Industry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Industry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCompanyInfoRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCompanyInfoRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCompanyInfoRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCompanyInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCompanyInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCompanyInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &base.Head{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCompanyInfoRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCompanyInfoRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCompanyInfoRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompanyInfo == nil {
				m.CompanyInfo = &CompanyInfo{}
			}
			if err := m.CompanyInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompanyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompanyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompanyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Province", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Province = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvinceId", wireType)
			}
			m.ProvinceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProvinceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field District", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.District = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictId", wireType)
			}
			m.DistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistrictId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Street", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Street = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetId", wireType)
			}
			m.StreetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Community", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Community = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityId", wireType)
			}
			m.CommunityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommunityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetailedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Adcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Industry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Industry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDelete", wireType)
			}
			m.IsDelete = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsDelete |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPreventionRecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPreventionRecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPreventionRecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &base.Head{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			m.CompanyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturneeNum", wireType)
			}
			m.ReturneeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturneeNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaterialImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaterialImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisinfectionImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisinfectionImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisinfectionTime", wireType)
			}
			m.DisinfectionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisinfectionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisinfectionRange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisinfectionRange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisinfectionOperator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisinfectionOperator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPreventionRecordRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPreventionRecordRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPreventionRecordRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePreventionRecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePreventionRecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePreventionRecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &base.Head{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			m.CompanyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturneeNum", wireType)
			}
			m.ReturneeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturneeNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaterialImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaterialImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisinfectionImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisinfectionImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisinfectionTime", wireType)
			}
			m.DisinfectionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisinfectionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisinfectionRange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisinfectionRange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisinfectionOperator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisinfectionOperator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePreventionRecordRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePreventionRecordRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePreventionRecordRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPreventionRecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPreventionRecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPreventionRecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &base.Head{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			m.CompanyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPreventionRecordRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPreventionRecordRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPreventionRecordRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreventionRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreventionRecord == nil {
				m.PreventionRecord = &PreventionRecord{}
			}
			if err := m.PreventionRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreventionRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreventionRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreventionRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			m.CompanyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturneeNum", wireType)
			}
			m.ReturneeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturneeNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaterialImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaterialImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisinfectionImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisinfectionImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisinfectionTime", wireType)
			}
			m.DisinfectionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisinfectionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisinfectionRange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisinfectionRange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisinfectionOperator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisinfectionOperator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportEmployeeNum", wireType)
			}
			m.ReportEmployeeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportEmployeeNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCompanyInfoListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCompanyInfoListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCompanyInfoListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &base.Head{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Adcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetId", wireType)
			}
			m.StreetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityId", wireType)
			}
			m.CommunityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommunityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCompanyInfoListRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCompanyInfoListRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCompanyInfoListRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyInfoList = append(m.CompanyInfoList, &CompanyInfoListVo{})
			if err := m.CompanyInfoList[len(m.CompanyInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompanyInfoListVo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompanyInfoListVo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompanyInfoListVo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Province", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Province = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvinceId", wireType)
			}
			m.ProvinceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProvinceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field District", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.District = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictId", wireType)
			}
			m.DistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistrictId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Community", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Community = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetailedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDelete", wireType)
			}
			m.IsDelete = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsDelete |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturneeNum", wireType)
			}
			m.ReturneeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturneeNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaterialImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaterialImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisinfectionImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisinfectionImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisinfectionTime", wireType)
			}
			m.DisinfectionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisinfectionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisinfectionRange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisinfectionRange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisinfectionOperator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisinfectionOperator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportEmployeeNum", wireType)
			}
			m.ReportEmployeeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportEmployeeNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCompanyInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCompanyInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCompanyInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &base.Head{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCompanyInfoRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCompanyInfoRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCompanyInfoRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPreventionRecordListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPreventionRecordListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPreventionRecordListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &base.Head{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			m.CompanyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPreventionRecordListRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPreventionRecordListRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPreventionRecordListRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreventionRecordList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreventionRecordList = append(m.PreventionRecordList, &PreventionRecordListVo{})
			if err := m.PreventionRecordList[len(m.PreventionRecordList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreventionRecordListVo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreventionRecordListVo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreventionRecordListVo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			m.CompanyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturneeNum", wireType)
			}
			m.ReturneeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturneeNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaterialImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaterialImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisinfectionImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisinfectionImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisinfectionTime", wireType)
			}
			m.DisinfectionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisinfectionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisinfectionRange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisinfectionRange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisinfectionOperator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApicompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApicompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisinfectionOperator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportEmployeeNum", wireType)
			}
			m.ReportEmployeeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportEmployeeNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApicompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApicompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApicompany(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApicompany
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApicompany
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApicompany
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApicompany
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApicompany
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApicompany        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApicompany          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApicompany = fmt.Errorf("proto: unexpected end of group")
)
