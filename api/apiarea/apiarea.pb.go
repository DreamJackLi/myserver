// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: apiarea.proto

package apiarea

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	base "robot-server/api/base"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Req struct {
	Head *base.Head `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// 所属国家id
	CountryId int64 `protobuf:"varint,2,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	// 所属省id
	ProvinceId int64 `protobuf:"varint,3,opt,name=province_id,json=provinceId,proto3" json:"province_id,omitempty"`
	// 所属市id
	CityId int64 `protobuf:"varint,4,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	// 区县id
	DistrictId int64 `protobuf:"varint,5,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
	// 街道id
	StreetId int64 `protobuf:"varint,6,opt,name=street_id,json=streetId,proto3" json:"street_id,omitempty"`
}

func (m *Req) Reset()         { *m = Req{} }
func (m *Req) String() string { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()    {}
func (*Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9ca9e4a92431d6b, []int{0}
}
func (m *Req) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Req.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Req.Merge(m, src)
}
func (m *Req) XXX_Size() int {
	return m.Size()
}
func (m *Req) XXX_DiscardUnknown() {
	xxx_messageInfo_Req.DiscardUnknown(m)
}

var xxx_messageInfo_Req proto.InternalMessageInfo

func (m *Req) GetHead() *base.Head {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *Req) GetCountryId() int64 {
	if m != nil {
		return m.CountryId
	}
	return 0
}

func (m *Req) GetProvinceId() int64 {
	if m != nil {
		return m.ProvinceId
	}
	return 0
}

func (m *Req) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *Req) GetDistrictId() int64 {
	if m != nil {
		return m.DistrictId
	}
	return 0
}

func (m *Req) GetStreetId() int64 {
	if m != nil {
		return m.StreetId
	}
	return 0
}

type Resp struct {
	Base        *base.BaseRes `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Provinces   []*Province   `protobuf:"bytes,2,rep,name=provinces,proto3" json:"provinces,omitempty"`
	Cites       []*City       `protobuf:"bytes,3,rep,name=cites,proto3" json:"cites,omitempty"`
	Districts   []*District   `protobuf:"bytes,4,rep,name=districts,proto3" json:"districts,omitempty"`
	Streets     []*Street     `protobuf:"bytes,5,rep,name=streets,proto3" json:"streets,omitempty"`
	Communities []*Community  `protobuf:"bytes,6,rep,name=communities,proto3" json:"communities,omitempty"`
}

func (m *Resp) Reset()         { *m = Resp{} }
func (m *Resp) String() string { return proto.CompactTextString(m) }
func (*Resp) ProtoMessage()    {}
func (*Resp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9ca9e4a92431d6b, []int{1}
}
func (m *Resp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Resp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Resp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resp.Merge(m, src)
}
func (m *Resp) XXX_Size() int {
	return m.Size()
}
func (m *Resp) XXX_DiscardUnknown() {
	xxx_messageInfo_Resp.DiscardUnknown(m)
}

var xxx_messageInfo_Resp proto.InternalMessageInfo

func (m *Resp) GetBase() *base.BaseRes {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *Resp) GetProvinces() []*Province {
	if m != nil {
		return m.Provinces
	}
	return nil
}

func (m *Resp) GetCites() []*City {
	if m != nil {
		return m.Cites
	}
	return nil
}

func (m *Resp) GetDistricts() []*District {
	if m != nil {
		return m.Districts
	}
	return nil
}

func (m *Resp) GetStreets() []*Street {
	if m != nil {
		return m.Streets
	}
	return nil
}

func (m *Resp) GetCommunities() []*Community {
	if m != nil {
		return m.Communities
	}
	return nil
}

type Province struct {
	// 主键
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 中文名称
	Chinese string `protobuf:"bytes,2,opt,name=chinese,proto3" json:"chinese,omitempty"`
	// 英文名称
	English string `protobuf:"bytes,3,opt,name=english,proto3" json:"english,omitempty"`
	// 所属国家id
	CountryId int64 `protobuf:"varint,4,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	// 行政区划编码
	AreaNumber string `protobuf:"bytes,5,opt,name=area_number,json=areaNumber,proto3" json:"area_number,omitempty"`
}

func (m *Province) Reset()         { *m = Province{} }
func (m *Province) String() string { return proto.CompactTextString(m) }
func (*Province) ProtoMessage()    {}
func (*Province) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9ca9e4a92431d6b, []int{2}
}
func (m *Province) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Province) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Province.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Province) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Province.Merge(m, src)
}
func (m *Province) XXX_Size() int {
	return m.Size()
}
func (m *Province) XXX_DiscardUnknown() {
	xxx_messageInfo_Province.DiscardUnknown(m)
}

var xxx_messageInfo_Province proto.InternalMessageInfo

func (m *Province) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Province) GetChinese() string {
	if m != nil {
		return m.Chinese
	}
	return ""
}

func (m *Province) GetEnglish() string {
	if m != nil {
		return m.English
	}
	return ""
}

func (m *Province) GetCountryId() int64 {
	if m != nil {
		return m.CountryId
	}
	return 0
}

func (m *Province) GetAreaNumber() string {
	if m != nil {
		return m.AreaNumber
	}
	return ""
}

type City struct {
	// 主键
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 中文名称
	Chinese string `protobuf:"bytes,2,opt,name=chinese,proto3" json:"chinese,omitempty"`
	// 英文名称
	English string `protobuf:"bytes,3,opt,name=english,proto3" json:"english,omitempty"`
	// 所属省id
	ProvinceId int64 `protobuf:"varint,4,opt,name=province_id,json=provinceId,proto3" json:"province_id,omitempty"`
	// 纬度
	Lat float64 `protobuf:"fixed64,5,opt,name=lat,proto3" json:"lat,omitempty"`
	// 经度
	Lng float64 `protobuf:"fixed64,6,opt,name=lng,proto3" json:"lng,omitempty"`
	// 行政区划编码
	AreaNumber string `protobuf:"bytes,7,opt,name=area_number,json=areaNumber,proto3" json:"area_number,omitempty"`
	// ?
	ZipCode string `protobuf:"bytes,8,opt,name=zip_code,json=zipCode,proto3" json:"zip_code,omitempty"`
}

func (m *City) Reset()         { *m = City{} }
func (m *City) String() string { return proto.CompactTextString(m) }
func (*City) ProtoMessage()    {}
func (*City) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9ca9e4a92431d6b, []int{3}
}
func (m *City) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *City) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_City.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *City) XXX_Merge(src proto.Message) {
	xxx_messageInfo_City.Merge(m, src)
}
func (m *City) XXX_Size() int {
	return m.Size()
}
func (m *City) XXX_DiscardUnknown() {
	xxx_messageInfo_City.DiscardUnknown(m)
}

var xxx_messageInfo_City proto.InternalMessageInfo

func (m *City) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *City) GetChinese() string {
	if m != nil {
		return m.Chinese
	}
	return ""
}

func (m *City) GetEnglish() string {
	if m != nil {
		return m.English
	}
	return ""
}

func (m *City) GetProvinceId() int64 {
	if m != nil {
		return m.ProvinceId
	}
	return 0
}

func (m *City) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *City) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

func (m *City) GetAreaNumber() string {
	if m != nil {
		return m.AreaNumber
	}
	return ""
}

func (m *City) GetZipCode() string {
	if m != nil {
		return m.ZipCode
	}
	return ""
}

type District struct {
	// 主键
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 中文名称
	Chinese string `protobuf:"bytes,2,opt,name=chinese,proto3" json:"chinese,omitempty"`
	// 英文名称
	English string `protobuf:"bytes,3,opt,name=english,proto3" json:"english,omitempty"`
	// 所属市id
	CityId int64 `protobuf:"varint,4,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	// 纬度
	Lat float64 `protobuf:"fixed64,5,opt,name=lat,proto3" json:"lat,omitempty"`
	// 经度
	Lng float64 `protobuf:"fixed64,6,opt,name=lng,proto3" json:"lng,omitempty"`
	// 行政区划编码
	AreaNumber string `protobuf:"bytes,7,opt,name=area_number,json=areaNumber,proto3" json:"area_number,omitempty"`
	// ?
	ZipCode string `protobuf:"bytes,8,opt,name=zip_code,json=zipCode,proto3" json:"zip_code,omitempty"`
}

func (m *District) Reset()         { *m = District{} }
func (m *District) String() string { return proto.CompactTextString(m) }
func (*District) ProtoMessage()    {}
func (*District) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9ca9e4a92431d6b, []int{4}
}
func (m *District) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *District) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_District.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *District) XXX_Merge(src proto.Message) {
	xxx_messageInfo_District.Merge(m, src)
}
func (m *District) XXX_Size() int {
	return m.Size()
}
func (m *District) XXX_DiscardUnknown() {
	xxx_messageInfo_District.DiscardUnknown(m)
}

var xxx_messageInfo_District proto.InternalMessageInfo

func (m *District) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *District) GetChinese() string {
	if m != nil {
		return m.Chinese
	}
	return ""
}

func (m *District) GetEnglish() string {
	if m != nil {
		return m.English
	}
	return ""
}

func (m *District) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *District) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *District) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

func (m *District) GetAreaNumber() string {
	if m != nil {
		return m.AreaNumber
	}
	return ""
}

func (m *District) GetZipCode() string {
	if m != nil {
		return m.ZipCode
	}
	return ""
}

type Street struct {
	// 主键
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 区县id
	DistrictId int64 `protobuf:"varint,2,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
	// 街道名称
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Street) Reset()         { *m = Street{} }
func (m *Street) String() string { return proto.CompactTextString(m) }
func (*Street) ProtoMessage()    {}
func (*Street) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9ca9e4a92431d6b, []int{5}
}
func (m *Street) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Street) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Street.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Street) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Street.Merge(m, src)
}
func (m *Street) XXX_Size() int {
	return m.Size()
}
func (m *Street) XXX_DiscardUnknown() {
	xxx_messageInfo_Street.DiscardUnknown(m)
}

var xxx_messageInfo_Street proto.InternalMessageInfo

func (m *Street) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Street) GetDistrictId() int64 {
	if m != nil {
		return m.DistrictId
	}
	return 0
}

func (m *Street) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Community struct {
	// 主键
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 街道id
	StreetId int64 `protobuf:"varint,2,opt,name=street_id,json=streetId,proto3" json:"street_id,omitempty"`
	// 社区名称
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Community) Reset()         { *m = Community{} }
func (m *Community) String() string { return proto.CompactTextString(m) }
func (*Community) ProtoMessage()    {}
func (*Community) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9ca9e4a92431d6b, []int{6}
}
func (m *Community) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Community) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Community.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Community) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Community.Merge(m, src)
}
func (m *Community) XXX_Size() int {
	return m.Size()
}
func (m *Community) XXX_DiscardUnknown() {
	xxx_messageInfo_Community.DiscardUnknown(m)
}

var xxx_messageInfo_Community proto.InternalMessageInfo

func (m *Community) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Community) GetStreetId() int64 {
	if m != nil {
		return m.StreetId
	}
	return 0
}

func (m *Community) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Req)(nil), "apiarea.Req")
	proto.RegisterType((*Resp)(nil), "apiarea.Resp")
	proto.RegisterType((*Province)(nil), "apiarea.Province")
	proto.RegisterType((*City)(nil), "apiarea.City")
	proto.RegisterType((*District)(nil), "apiarea.District")
	proto.RegisterType((*Street)(nil), "apiarea.Street")
	proto.RegisterType((*Community)(nil), "apiarea.Community")
}

func init() { proto.RegisterFile("apiarea.proto", fileDescriptor_c9ca9e4a92431d6b) }

var fileDescriptor_c9ca9e4a92431d6b = []byte{
	// 596 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xee, 0xda, 0x6e, 0x1c, 0x4f, 0x1a, 0x7e, 0xf6, 0x82, 0x29, 0xc2, 0x04, 0x23, 0xa1, 0x00,
	0xa2, 0x95, 0x0a, 0x2f, 0x40, 0x8b, 0x14, 0x22, 0x01, 0xaa, 0x96, 0x07, 0xa8, 0x1c, 0x7b, 0xd4,
	0xac, 0xd4, 0xd8, 0xae, 0x77, 0x53, 0x29, 0x7d, 0x08, 0x04, 0xef, 0xc3, 0x1d, 0x24, 0x2e, 0x3d,
	0x72, 0x42, 0x28, 0x79, 0x11, 0xe4, 0xf1, 0x4f, 0x5a, 0xa7, 0xe4, 0x54, 0x2e, 0x91, 0xe7, 0xfb,
	0xbe, 0x5d, 0x7d, 0xb3, 0xdf, 0x4c, 0xa0, 0x1b, 0xa4, 0x32, 0xc8, 0x30, 0xd8, 0x49, 0xb3, 0x44,
	0x27, 0xdc, 0x2e, 0xcb, 0xed, 0x5e, 0x96, 0x8c, 0x12, 0xfd, 0x52, 0x61, 0x76, 0x86, 0xd9, 0x6e,
	0x90, 0xca, 0xdd, 0x51, 0xa0, 0x90, 0x7e, 0x0a, 0xa9, 0xff, 0x8d, 0x81, 0x29, 0xf0, 0x94, 0x7b,
	0x60, 0x8d, 0x31, 0x88, 0x5c, 0xd6, 0x63, 0xfd, 0xce, 0x1e, 0xec, 0x90, 0xe4, 0x1d, 0x06, 0x91,
	0x20, 0x9c, 0x3f, 0x04, 0x08, 0x93, 0x69, 0xac, 0xb3, 0xd9, 0x91, 0x8c, 0x5c, 0xa3, 0xc7, 0xfa,
	0xa6, 0x70, 0x4a, 0x64, 0x18, 0xf1, 0x47, 0xd0, 0x49, 0xb3, 0xe4, 0x4c, 0xc6, 0x21, 0xe6, 0xbc,
	0x49, 0x3c, 0x54, 0xd0, 0x30, 0xe2, 0xf7, 0xc0, 0x0e, 0xa5, 0xa6, 0xc3, 0x16, 0x91, 0xad, 0xbc,
	0x2c, 0x4e, 0x46, 0x52, 0xe9, 0x4c, 0x86, 0x3a, 0x27, 0x37, 0x8b, 0x93, 0x15, 0x34, 0x8c, 0xf8,
	0x03, 0x70, 0x94, 0xce, 0x10, 0x89, 0x6e, 0x11, 0xdd, 0x2e, 0x80, 0x61, 0xe4, 0x7f, 0x35, 0xc0,
	0x12, 0xa8, 0x52, 0xfe, 0x18, 0xac, 0xdc, 0x72, 0xe9, 0xbf, 0x5b, 0xf8, 0xdf, 0x0f, 0x14, 0x0a,
	0x54, 0x82, 0x28, 0xbe, 0x0b, 0x4e, 0x65, 0x48, 0xb9, 0x46, 0xcf, 0xec, 0x77, 0xf6, 0xee, 0xee,
	0x54, 0x0f, 0x77, 0x58, 0x32, 0x62, 0xa9, 0xe1, 0x4f, 0x60, 0x33, 0x94, 0x1a, 0x95, 0x6b, 0x92,
	0xb8, 0x5b, 0x8b, 0x0f, 0xa4, 0x9e, 0x89, 0x82, 0xcb, 0x6f, 0xad, 0xcc, 0x2a, 0xd7, 0x6a, 0xdc,
	0xfa, 0xb6, 0x64, 0xc4, 0x52, 0xc3, 0x9f, 0x81, 0x5d, 0xd8, 0x57, 0xee, 0x26, 0xc9, 0x6f, 0xd7,
	0xf2, 0x4f, 0x84, 0x8b, 0x8a, 0xe7, 0xaf, 0xa1, 0x13, 0x26, 0x93, 0xc9, 0x34, 0x96, 0x5a, 0xa2,
	0x72, 0x5b, 0x24, 0xe7, 0x4b, 0x1b, 0x25, 0x37, 0x13, 0x97, 0x65, 0xfe, 0x67, 0x06, 0xed, 0xaa,
	0x1d, 0x7e, 0x0b, 0x0c, 0x59, 0xa4, 0x6a, 0x0a, 0x43, 0x46, 0xdc, 0x05, 0x3b, 0x1c, 0xcb, 0x18,
	0x15, 0x52, 0x88, 0x8e, 0xa8, 0xca, 0x9c, 0xc1, 0xf8, 0xf8, 0x44, 0xaa, 0x31, 0xc5, 0xe7, 0x88,
	0xaa, 0x6c, 0x64, 0x6f, 0x5d, 0x93, 0x7d, 0x6e, 0xe7, 0x28, 0x9e, 0x4e, 0x46, 0x98, 0x51, 0x82,
	0x8e, 0x80, 0x1c, 0xfa, 0x48, 0x88, 0xff, 0x93, 0x81, 0x95, 0x3f, 0xd9, 0x8d, 0x98, 0x69, 0x4c,
	0x9a, 0xb5, 0x32, 0x69, 0x77, 0xc0, 0x3c, 0x09, 0x34, 0xd9, 0x60, 0x22, 0xff, 0x24, 0x24, 0x3e,
	0xa6, 0xd9, 0xc9, 0x91, 0xf8, 0xb8, 0x69, 0xd9, 0x6e, 0x5a, 0xe6, 0xf7, 0xa1, 0x7d, 0x2e, 0xd3,
	0xa3, 0x30, 0x89, 0xd0, 0x6d, 0x17, 0x06, 0xce, 0x65, 0x7a, 0x90, 0x44, 0xe8, 0x7f, 0x67, 0xd0,
	0xae, 0x72, 0xbd, 0x91, 0x8e, 0xfe, 0xb9, 0x1a, 0xff, 0xbb, 0x93, 0x0f, 0xd0, 0x2a, 0x26, 0x6e,
	0xa5, 0x8d, 0xc6, 0x52, 0x1a, 0x2b, 0x4b, 0xc9, 0xc1, 0x8a, 0x83, 0x09, 0x96, 0xad, 0xd0, 0xb7,
	0xff, 0x1e, 0x9c, 0x7a, 0x22, 0x57, 0x6e, 0xbc, 0xb2, 0xc5, 0xc6, 0xd5, 0x2d, 0xbe, 0xee, 0xb6,
	0xbd, 0xdf, 0x0c, 0xac, 0x37, 0x19, 0x06, 0xfc, 0x05, 0x6c, 0x0d, 0x50, 0x1f, 0xd6, 0x5b, 0xb9,
	0x55, 0xcf, 0xbf, 0xc0, 0xd3, 0xed, 0xee, 0xa5, 0x4a, 0xa5, 0xfc, 0x29, 0xd8, 0x03, 0xd4, 0x34,
	0x6c, 0x6b, 0x75, 0xcf, 0xa1, 0x33, 0x40, 0x5d, 0xc7, 0xb8, 0x56, 0xdb, 0x07, 0x67, 0x80, 0xba,
	0x7c, 0xa9, 0xb5, 0xca, 0xc2, 0xea, 0xf2, 0x11, 0xd6, 0x89, 0xf7, 0xdd, 0x1f, 0x73, 0x8f, 0x5d,
	0xcc, 0x3d, 0xf6, 0x67, 0xee, 0xb1, 0x2f, 0x0b, 0x6f, 0xe3, 0x62, 0xe1, 0x6d, 0xfc, 0x5a, 0x78,
	0x1b, 0xa3, 0x16, 0xfd, 0x35, 0xbf, 0xfa, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x67, 0x5e, 0xf6, 0xeb,
	0xd6, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AreaClient is the client API for Area service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AreaClient interface {
	// 获取省
	GetProvinces(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
	// 获取市
	GetCity(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
	// 获取县/区
	GetDistrict(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
	// 获取街道/镇
	GetStreet(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
	// 获取社区
	GetCommunity(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
}

type areaClient struct {
	cc *grpc.ClientConn
}

func NewAreaClient(cc *grpc.ClientConn) AreaClient {
	return &areaClient{cc}
}

func (c *areaClient) GetProvinces(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/apiarea.Area/GetProvinces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaClient) GetCity(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/apiarea.Area/GetCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaClient) GetDistrict(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/apiarea.Area/GetDistrict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaClient) GetStreet(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/apiarea.Area/GetStreet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaClient) GetCommunity(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/apiarea.Area/GetCommunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AreaServer is the server API for Area service.
type AreaServer interface {
	// 获取省
	GetProvinces(context.Context, *Req) (*Resp, error)
	// 获取市
	GetCity(context.Context, *Req) (*Resp, error)
	// 获取县/区
	GetDistrict(context.Context, *Req) (*Resp, error)
	// 获取街道/镇
	GetStreet(context.Context, *Req) (*Resp, error)
	// 获取社区
	GetCommunity(context.Context, *Req) (*Resp, error)
}

// UnimplementedAreaServer can be embedded to have forward compatible implementations.
type UnimplementedAreaServer struct {
}

func (*UnimplementedAreaServer) GetProvinces(ctx context.Context, req *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProvinces not implemented")
}
func (*UnimplementedAreaServer) GetCity(ctx context.Context, req *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCity not implemented")
}
func (*UnimplementedAreaServer) GetDistrict(ctx context.Context, req *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDistrict not implemented")
}
func (*UnimplementedAreaServer) GetStreet(ctx context.Context, req *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreet not implemented")
}
func (*UnimplementedAreaServer) GetCommunity(ctx context.Context, req *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunity not implemented")
}

func RegisterAreaServer(s *grpc.Server, srv AreaServer) {
	s.RegisterService(&_Area_serviceDesc, srv)
}

func _Area_GetProvinces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServer).GetProvinces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiarea.Area/GetProvinces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServer).GetProvinces(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Area_GetCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServer).GetCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiarea.Area/GetCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServer).GetCity(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Area_GetDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServer).GetDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiarea.Area/GetDistrict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServer).GetDistrict(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Area_GetStreet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServer).GetStreet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiarea.Area/GetStreet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServer).GetStreet(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Area_GetCommunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServer).GetCommunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiarea.Area/GetCommunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServer).GetCommunity(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _Area_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apiarea.Area",
	HandlerType: (*AreaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProvinces",
			Handler:    _Area_GetProvinces_Handler,
		},
		{
			MethodName: "GetCity",
			Handler:    _Area_GetCity_Handler,
		},
		{
			MethodName: "GetDistrict",
			Handler:    _Area_GetDistrict_Handler,
		},
		{
			MethodName: "GetStreet",
			Handler:    _Area_GetStreet_Handler,
		},
		{
			MethodName: "GetCommunity",
			Handler:    _Area_GetCommunity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apiarea.proto",
}

func (m *Req) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Req) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Req) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StreetId != 0 {
		i = encodeVarintApiarea(dAtA, i, uint64(m.StreetId))
		i--
		dAtA[i] = 0x30
	}
	if m.DistrictId != 0 {
		i = encodeVarintApiarea(dAtA, i, uint64(m.DistrictId))
		i--
		dAtA[i] = 0x28
	}
	if m.CityId != 0 {
		i = encodeVarintApiarea(dAtA, i, uint64(m.CityId))
		i--
		dAtA[i] = 0x20
	}
	if m.ProvinceId != 0 {
		i = encodeVarintApiarea(dAtA, i, uint64(m.ProvinceId))
		i--
		dAtA[i] = 0x18
	}
	if m.CountryId != 0 {
		i = encodeVarintApiarea(dAtA, i, uint64(m.CountryId))
		i--
		dAtA[i] = 0x10
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiarea(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Resp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Resp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Communities) > 0 {
		for iNdEx := len(m.Communities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Communities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiarea(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Streets) > 0 {
		for iNdEx := len(m.Streets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Streets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiarea(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Districts) > 0 {
		for iNdEx := len(m.Districts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Districts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiarea(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Cites) > 0 {
		for iNdEx := len(m.Cites) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cites[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiarea(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Provinces) > 0 {
		for iNdEx := len(m.Provinces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Provinces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApiarea(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApiarea(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Province) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Province) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Province) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AreaNumber) > 0 {
		i -= len(m.AreaNumber)
		copy(dAtA[i:], m.AreaNumber)
		i = encodeVarintApiarea(dAtA, i, uint64(len(m.AreaNumber)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CountryId != 0 {
		i = encodeVarintApiarea(dAtA, i, uint64(m.CountryId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.English) > 0 {
		i -= len(m.English)
		copy(dAtA[i:], m.English)
		i = encodeVarintApiarea(dAtA, i, uint64(len(m.English)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chinese) > 0 {
		i -= len(m.Chinese)
		copy(dAtA[i:], m.Chinese)
		i = encodeVarintApiarea(dAtA, i, uint64(len(m.Chinese)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApiarea(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *City) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *City) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *City) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ZipCode) > 0 {
		i -= len(m.ZipCode)
		copy(dAtA[i:], m.ZipCode)
		i = encodeVarintApiarea(dAtA, i, uint64(len(m.ZipCode)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AreaNumber) > 0 {
		i -= len(m.AreaNumber)
		copy(dAtA[i:], m.AreaNumber)
		i = encodeVarintApiarea(dAtA, i, uint64(len(m.AreaNumber)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Lng != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lng))))
		i--
		dAtA[i] = 0x31
	}
	if m.Lat != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i--
		dAtA[i] = 0x29
	}
	if m.ProvinceId != 0 {
		i = encodeVarintApiarea(dAtA, i, uint64(m.ProvinceId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.English) > 0 {
		i -= len(m.English)
		copy(dAtA[i:], m.English)
		i = encodeVarintApiarea(dAtA, i, uint64(len(m.English)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chinese) > 0 {
		i -= len(m.Chinese)
		copy(dAtA[i:], m.Chinese)
		i = encodeVarintApiarea(dAtA, i, uint64(len(m.Chinese)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApiarea(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *District) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *District) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *District) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ZipCode) > 0 {
		i -= len(m.ZipCode)
		copy(dAtA[i:], m.ZipCode)
		i = encodeVarintApiarea(dAtA, i, uint64(len(m.ZipCode)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AreaNumber) > 0 {
		i -= len(m.AreaNumber)
		copy(dAtA[i:], m.AreaNumber)
		i = encodeVarintApiarea(dAtA, i, uint64(len(m.AreaNumber)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Lng != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lng))))
		i--
		dAtA[i] = 0x31
	}
	if m.Lat != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i--
		dAtA[i] = 0x29
	}
	if m.CityId != 0 {
		i = encodeVarintApiarea(dAtA, i, uint64(m.CityId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.English) > 0 {
		i -= len(m.English)
		copy(dAtA[i:], m.English)
		i = encodeVarintApiarea(dAtA, i, uint64(len(m.English)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chinese) > 0 {
		i -= len(m.Chinese)
		copy(dAtA[i:], m.Chinese)
		i = encodeVarintApiarea(dAtA, i, uint64(len(m.Chinese)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApiarea(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Street) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Street) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Street) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApiarea(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DistrictId != 0 {
		i = encodeVarintApiarea(dAtA, i, uint64(m.DistrictId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApiarea(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Community) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Community) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Community) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApiarea(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StreetId != 0 {
		i = encodeVarintApiarea(dAtA, i, uint64(m.StreetId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApiarea(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApiarea(dAtA []byte, offset int, v uint64) int {
	offset -= sovApiarea(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Req) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovApiarea(uint64(l))
	}
	if m.CountryId != 0 {
		n += 1 + sovApiarea(uint64(m.CountryId))
	}
	if m.ProvinceId != 0 {
		n += 1 + sovApiarea(uint64(m.ProvinceId))
	}
	if m.CityId != 0 {
		n += 1 + sovApiarea(uint64(m.CityId))
	}
	if m.DistrictId != 0 {
		n += 1 + sovApiarea(uint64(m.DistrictId))
	}
	if m.StreetId != 0 {
		n += 1 + sovApiarea(uint64(m.StreetId))
	}
	return n
}

func (m *Resp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovApiarea(uint64(l))
	}
	if len(m.Provinces) > 0 {
		for _, e := range m.Provinces {
			l = e.Size()
			n += 1 + l + sovApiarea(uint64(l))
		}
	}
	if len(m.Cites) > 0 {
		for _, e := range m.Cites {
			l = e.Size()
			n += 1 + l + sovApiarea(uint64(l))
		}
	}
	if len(m.Districts) > 0 {
		for _, e := range m.Districts {
			l = e.Size()
			n += 1 + l + sovApiarea(uint64(l))
		}
	}
	if len(m.Streets) > 0 {
		for _, e := range m.Streets {
			l = e.Size()
			n += 1 + l + sovApiarea(uint64(l))
		}
	}
	if len(m.Communities) > 0 {
		for _, e := range m.Communities {
			l = e.Size()
			n += 1 + l + sovApiarea(uint64(l))
		}
	}
	return n
}

func (m *Province) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApiarea(uint64(m.Id))
	}
	l = len(m.Chinese)
	if l > 0 {
		n += 1 + l + sovApiarea(uint64(l))
	}
	l = len(m.English)
	if l > 0 {
		n += 1 + l + sovApiarea(uint64(l))
	}
	if m.CountryId != 0 {
		n += 1 + sovApiarea(uint64(m.CountryId))
	}
	l = len(m.AreaNumber)
	if l > 0 {
		n += 1 + l + sovApiarea(uint64(l))
	}
	return n
}

func (m *City) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApiarea(uint64(m.Id))
	}
	l = len(m.Chinese)
	if l > 0 {
		n += 1 + l + sovApiarea(uint64(l))
	}
	l = len(m.English)
	if l > 0 {
		n += 1 + l + sovApiarea(uint64(l))
	}
	if m.ProvinceId != 0 {
		n += 1 + sovApiarea(uint64(m.ProvinceId))
	}
	if m.Lat != 0 {
		n += 9
	}
	if m.Lng != 0 {
		n += 9
	}
	l = len(m.AreaNumber)
	if l > 0 {
		n += 1 + l + sovApiarea(uint64(l))
	}
	l = len(m.ZipCode)
	if l > 0 {
		n += 1 + l + sovApiarea(uint64(l))
	}
	return n
}

func (m *District) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApiarea(uint64(m.Id))
	}
	l = len(m.Chinese)
	if l > 0 {
		n += 1 + l + sovApiarea(uint64(l))
	}
	l = len(m.English)
	if l > 0 {
		n += 1 + l + sovApiarea(uint64(l))
	}
	if m.CityId != 0 {
		n += 1 + sovApiarea(uint64(m.CityId))
	}
	if m.Lat != 0 {
		n += 9
	}
	if m.Lng != 0 {
		n += 9
	}
	l = len(m.AreaNumber)
	if l > 0 {
		n += 1 + l + sovApiarea(uint64(l))
	}
	l = len(m.ZipCode)
	if l > 0 {
		n += 1 + l + sovApiarea(uint64(l))
	}
	return n
}

func (m *Street) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApiarea(uint64(m.Id))
	}
	if m.DistrictId != 0 {
		n += 1 + sovApiarea(uint64(m.DistrictId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApiarea(uint64(l))
	}
	return n
}

func (m *Community) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApiarea(uint64(m.Id))
	}
	if m.StreetId != 0 {
		n += 1 + sovApiarea(uint64(m.StreetId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApiarea(uint64(l))
	}
	return n
}

func sovApiarea(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApiarea(x uint64) (n int) {
	return sovApiarea(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Req) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiarea
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiarea
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &base.Head{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryId", wireType)
			}
			m.CountryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvinceId", wireType)
			}
			m.ProvinceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProvinceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictId", wireType)
			}
			m.DistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistrictId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetId", wireType)
			}
			m.StreetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiarea(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiarea
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiarea
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiarea
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiarea
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &base.BaseRes{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provinces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiarea
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provinces = append(m.Provinces, &Province{})
			if err := m.Provinces[len(m.Provinces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiarea
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cites = append(m.Cites, &City{})
			if err := m.Cites[len(m.Cites)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Districts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiarea
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Districts = append(m.Districts, &District{})
			if err := m.Districts[len(m.Districts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiarea
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Streets = append(m.Streets, &Street{})
			if err := m.Streets[len(m.Streets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Communities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiarea
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Communities = append(m.Communities, &Community{})
			if err := m.Communities[len(m.Communities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiarea(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiarea
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiarea
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Province) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiarea
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Province: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Province: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chinese", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chinese = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field English", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.English = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryId", wireType)
			}
			m.CountryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiarea(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiarea
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiarea
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *City) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiarea
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: City: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: City: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chinese", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chinese = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field English", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.English = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvinceId", wireType)
			}
			m.ProvinceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProvinceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lng = float64(math.Float64frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZipCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZipCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiarea(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiarea
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiarea
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *District) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiarea
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: District: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: District: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chinese", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chinese = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field English", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.English = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lng = float64(math.Float64frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZipCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZipCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiarea(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiarea
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiarea
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Street) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiarea
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Street: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Street: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictId", wireType)
			}
			m.DistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistrictId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiarea(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiarea
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiarea
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Community) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiarea
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Community: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Community: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetId", wireType)
			}
			m.StreetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiarea(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiarea
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiarea
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApiarea(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApiarea
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiarea
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApiarea
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthApiarea
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApiarea
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApiarea(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthApiarea
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApiarea = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApiarea   = fmt.Errorf("proto: integer overflow")
)
